<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>云知</title>
  
  <subtitle>人们总说来日方长,吾愿早日陪伴</subtitle>
  <link href="https://aixiaocainiao.github.io/atom.xml" rel="self"/>
  
  <link href="https://aixiaocainiao.github.io/"/>
  <updated>2023-04-10T14:21:31.272Z</updated>
  <id>https://aixiaocainiao.github.io/</id>
  
  <author>
    <name>fang</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>thread的学习</title>
    <link href="https://aixiaocainiao.github.io/posts/b032c142.html"/>
    <id>https://aixiaocainiao.github.io/posts/b032c142.html</id>
    <published>2023-04-10T14:11:40.377Z</published>
    <updated>2023-04-10T14:21:31.272Z</updated>
    
    <content type="html"><![CDATA[<h1 id="线程thread的学习"><a href="#线程thread的学习" class="headerlink" title="线程thread的学习"></a>线程thread的学习</h1><p>//线程id 线程函数得到线程id<br>pthread_t pthread_self();<br>/*</p><h2 id="线程创建函数"><a href="#线程创建函数" class="headerlink" title="线程创建函数:"></a>线程创建函数:</h2><p>​      int pthread_create(pthread_t <em>thread,const pthread_attr_t </em>attr,<br>​                        void <em>(</em>start_routinue)(void <em>) ,void</em>arg);<br>​      thread: 传出参数，是无符号长整形数，线程创建成功，会将线程 ID 写入到这个指针指向的内存中<br>​      attr: 线程的属性，一般情况下使用默认属性即可，写 NULL<br>​      start_routine: 函数指针，创建出的子线程的处理动作，也就是该函数在子线程中执行。<br>​      arg: 作为实参传递到 start_routine 指针指向的函数内部</p><pre><code>  返回值：线程创建成功返回 0，创建失败返回对应的错误号  注意：        # pthread_create 函数的定义在某一个库中, 编译的时候需要加库名 pthread        $ gcc pthread_create.c -lpthread</code></pre><h2 id="线程退出函数"><a href="#线程退出函数" class="headerlink" title="线程退出函数"></a>线程退出函数</h2><p>​      void pthread_exit(void <em>retval)<br>​      参数：线程退出的时候携带的数据，当前子线程的主线程会得到该数据。如果不需要使用，指定为 NULL<br>线程回收函数<br>​      #include <pthread.h><br>​      // 这是一个阻塞函数, 子线程在运行这个函数就阻塞<br>​      // 子线程退出, 函数解除阻塞, 回收对应的子线程资源, 类似于回收进程使用的函数 wait()<br>​      int pthread_join(pthread_t thread,void *</em>retval)<br>​      参数:<br>​            thread: 要被回收的子线程的线程 ID<br>​            retval: 二级指针，指向一级指针的地址，是一个传出参数，<br>​               这个地址中存储了 pthread_exit () 传递出的数据，如果不需要这个参数，可以指定为 NULL<br>​            返回值：线程回收成功返回 0，回收失败返回错误号。<br>线程分离函数:<br>​      int pthread_detach(pthread_t thread);<br>​            在某些情况下，程序中的主线程有属于自己的业务处理流程，<br>​            如果让主线程负责子线程的资源回收，调用 pthread_join()<br>​            只要子线程不退出主线程就会一直被阻塞，主要线程的任务也就不能被执行了。<br>​            在线程库函数中为我们提供了线程分离函数 pthread_detach()，<br>​            调用这个函数之后指定的子线程就可以和主线程分离，当子线程退出的时候，<br>​            其占用的内核资源就被系统的其他进程接管并回收了。<br>​            线程分离之后在主线程中使用 pthread_join() 就回收不到子线程资源了。</p><h2 id="线程取消函数"><a href="#线程取消函数" class="headerlink" title="线程取消函数"></a>线程取消函数</h2><p>​      // 参数是子线程的线程ID<br>​      int pthread_cancel(pthread_t thread);<br>​      线程取消的意思就是在某些特定情况下在一个线程中杀死另一个线程。使用这个函数杀死一个线程需要分两步：<br>​            在线程 A 中调用线程取消函数 pthread_cancel，指定杀死线程 B，这时候线程 B 是死不了的<br>​            在线程 B 中进程一次系统调用（从用户区切换到内核区），否则线程 B 可以一直运行。<br>​            这其实和七步断肠散、含笑半步癫的功效是一样的，吃了毒药不动或者不笑也没啥事儿<br>​            参数：要杀死的线程的线程 ID<br>​            返回值：函数调用成功返回 0，调用失败返回非 0 错误号。<br>线程ID比较函数<br>​      在 Linux 中线程 ID 本质就是一个无符号长整形，<br>​      因此可以直接使用比较操作符比较两个线程的 ID，<br>​      但是线程库是可以跨平台使用的，在某些平台上 pthread_t 可能不是一个单纯的整形，<br>​      这中情况下比较两个线程的 ID 必须要使用比较函数，函数原型如下<br>​      </p><pre><code>  int pthread_equal(pthread_t t1, pthread_t t2);  参数：t1 和 t2 是要比较的线程的线程 ID  返回值：如果两个线程 ID 相等返回非 0 值，如果不相等返回 0</code></pre><h2 id="互斥锁函数："><a href="#互斥锁函数：" class="headerlink" title="互斥锁函数："></a>互斥锁函数：</h2><p>​      在 Linux 中互斥锁的类型为 pthread_mutex_t，创建一个这种类型的变量就得到了一把互斥锁：<br>​            pthread_mutex_t  mutex;<br>​      // 初始化互斥锁<br>​      // restrict: 是一个关键字, 用来修饰指针, 只有这个关键字修饰的指针可以访问指向的内存地址, 其他指针是不行的<br>​      int pthread_mutex_init(pthread_mutex_t <em>restrict mutex,<br>​            const pthread_mutexattr_t </em>restrict attr);<br>​      // 释放互斥锁资源<br>​      int pthread_mutex_destroy(pthread_mutex_t <em>mutex);<br>​      参数:<br>​      mutex: 互斥锁变量的地址<br>​      attr: 互斥锁的属性，一般使用默认属性即可，这个参数指定为 NULL<br>​      // 修改互斥锁的状态, 将其设定为锁定状态, 这个状态被写入到参数 mutex 中<br>​      int pthread_mutex_lock(pthread_mutex_t </em>mutex);<br>​      这个函数被调用，首先会判断参数 mutex 互斥锁中的状态是不是锁定状态:</p><pre><code>  没有被锁定，是打开的，这个线程可以加锁成功，这个这个锁中会记录是哪个线程加锁成功了  如果被锁定了，其他线程加锁就失败了，这些线程都会阻塞在这把锁上  当这把锁被解开之后，这些阻塞在锁上的线程就解除阻塞了，并且这些线程是通过竞争的方式对这把锁加锁，没抢到锁的线程继续阻塞  // 尝试加锁  int pthread_mutex_trylock(pthread_mutex_t *mutex);  调用这个函数对互斥锁变量加锁还是有两种情况:  如果这把锁没有被锁定是打开的，线程加锁成功  如果锁变量被锁住了，调用这个函数加锁的线程，不会被阻塞，加锁失败直接返回错误号  C  1  2  // 对互斥锁解锁  int pthread_mutex_unlock(pthread_mutex_t *mutex);</code></pre><blockquote><p>参考网址 爱编程的大斌 <a href="https://subingwen.cn/">爱编程的大丙 (subingwen.cn)</a></p></blockquote><p>注意：以后忘记了记得去学习</p>]]></content>
    
    
    <summary type="html">C和C++中关于线程的学习</summary>
    
    
    
    <category term="C++" scheme="https://aixiaocainiao.github.io/categories/C/"/>
    
    
    <category term="thread" scheme="https://aixiaocainiao.github.io/tags/thread/"/>
    
  </entry>
  
  <entry>
    <title>ubuntu解压命令</title>
    <link href="https://aixiaocainiao.github.io/posts/e61dc118.html"/>
    <id>https://aixiaocainiao.github.io/posts/e61dc118.html</id>
    <published>2023-04-09T07:49:32.971Z</published>
    <updated>2023-04-09T08:15:01.684Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ubuntu压缩指令"><a href="#ubuntu压缩指令" class="headerlink" title="ubuntu压缩指令"></a>ubuntu压缩指令</h1><h2 id="详情"><a href="#详情" class="headerlink" title="详情"></a>详情</h2><pre><code>tgz格式解压到当前文件夹：tar -zxvf xxx.tar.gzzip格式解压到当前文件夹：unzip xxx.ziptar.xz格式解压首先：xz -d xxx.tar.xz 解压得到tar文件 ;其次：tar -xvf xxx.tar得到完整解压文件。文件夹压缩：sudo tar jcvf xxx.tar.bz2 xxx</code></pre><h2 id="一、解压-tar-gz格式到指定的目录下："><a href="#一、解压-tar-gz格式到指定的目录下：" class="headerlink" title="一、解压.tar.gz格式到指定的目录下："></a>一、解压.tar.gz格式到指定的目录下：</h2><p>命令格式为：tar -zxvf 【压缩包文件名.tar.gz】 -C 【路径】/</p><p>例如：tar -zxvf japan.tar.gz -C /tmp/</p><h2 id="二、解压-tar-bz2格式到指定的目录下："><a href="#二、解压-tar-bz2格式到指定的目录下：" class="headerlink" title="二、解压.tar.bz2格式到指定的目录下："></a>二、解压.tar.bz2格式到指定的目录下：</h2><p>命令格式：tar -jxvf 【压缩包文件名.tar.bz2】 -C 【路径】/</p><p>例如：tar -zxvf japan.tar.bz2 -C /tmp/</p><h2 id="三、压缩-tar-gz格式到指定目录下"><a href="#三、压缩-tar-gz格式到指定目录下" class="headerlink" title="三、压缩.tar.gz格式到指定目录下"></a>三、压缩.tar.gz格式到指定目录下</h2><p>命令格式：tar -zcvf 【目录】/ 【压缩包文件名.tar.gz】【源文件】</p><p>例如：tar -zcvf /tmp/test.tar.gz japan/</p><p>注意：一次压缩多个文件直接在源文件后用空格格开即可</p><h2 id="四、压缩-tar-bz2格式到指定目录下"><a href="#四、压缩-tar-bz2格式到指定目录下" class="headerlink" title="四、压缩.tar.bz2格式到指定目录下"></a>四、压缩.tar.bz2格式到指定目录下</h2><p>命令格式：tar -jcvf 【目录】/ 【压缩包文件名.tar.gz】【源文件】</p><p>例如：tar -jcvf /tmp/test.tar.bz2 japan/</p><p>注意：一次压缩多个文件直接在源文件后用空格格开即可</p><p>扩展资料</p><p>每条选项以及命令直接的空格一定要打，Linux严格区分大小写，输入时注意大小写。</p><p>tar在Linux上是常用的打包、压缩、加压缩工具，他的参数很多，常用的压缩与解压缩参数有：</p><p>-c ：create 建立压缩档案的参数；</p><p>-x ： 解压缩压缩档案的参数；</p><p>-z ： 是否需要用gzip压缩；</p><p>-v： 压缩的过程中显示档案；</p><p>-f： 置顶文档名，在f后面立即接文件名，不能再加参数<br>————————————————</p><h2 id="五、删除指令"><a href="#五、删除指令" class="headerlink" title="五、删除指令"></a>五、删除指令</h2><p>5.1、强制删除</p><p>sudo rm -rf +文件夹名字</p><hr><p>5.2、其他</p><p>wstool merge -t src <a href="https://ghproxy.com/https://raw.githubusercontent.com/cartographer-project/cartographer_ros/master/cartographer_ros.rosinstall">https://ghproxy.com/https://raw.githubusercontent.com/cartographer-project/cartographer_ros/master/cartographer_ros.rosinstall</a></p><p>uri: <a href="https://github.com/cartographer-project/cartographer.git">https://github.com/cartographer-project/cartographer.git</a></p><p>uri: <a href="https://github.com/cartographer-project/cartographer_ros.git">https://github.com/cartographer-project/cartographer_ros.git</a></p><p>carto packxml<br>46行</p><depend>libabsl-dev</depend><blockquote><p>版权声明：本文为CSDN博主「晓风笙」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/weixin_49285070/article/details/124261150">https://blog.csdn.net/weixin_49285070/article/details/124261150</a></p></blockquote>]]></content>
    
    
    <summary type="html">ubuntu 必备解压命令</summary>
    
    
    
    <category term="SF" scheme="https://aixiaocainiao.github.io/categories/SF/"/>
    
    
    <category term="ubuntu" scheme="https://aixiaocainiao.github.io/tags/ubuntu/"/>
    
    <category term="压缩命令" scheme="https://aixiaocainiao.github.io/tags/%E5%8E%8B%E7%BC%A9%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>ros noetic 基本安装</title>
    <link href="https://aixiaocainiao.github.io/posts/4f1bb390.html"/>
    <id>https://aixiaocainiao.github.io/posts/4f1bb390.html</id>
    <published>2023-04-09T07:48:29.680Z</published>
    <updated>2023-04-09T08:15:01.692Z</updated>
    
    <content type="html"><![CDATA[<h1 id="个人安装流程"><a href="#个人安装流程" class="headerlink" title="个人安装流程"></a>个人安装流程</h1><h2 id="一、ubuntu右键文档问题解决"><a href="#一、ubuntu右键文档问题解决" class="headerlink" title="一、ubuntu右键文档问题解决"></a>一、ubuntu右键文档问题解决</h2><p>模板里面创建文档<br>cd 到模板里面<br>touch 空白文档 txt文档</p><p>就完成了<br>(创建了两个文档类型)</p><h2 id="二、ubuntu和windows时间不同步问题"><a href="#二、ubuntu和windows时间不同步问题" class="headerlink" title="二、ubuntu和windows时间不同步问题"></a>二、ubuntu和windows时间不同步问题</h2><p>2.0<br>准备工作:切换安装源  自动选择最优<br>2.1<br>时间同步工具:<br>sudo apt install ntpdate<br>出现无法定位 可以<br>执行<br>sudo apt-get install<br>sudo apt-get update<br>2.2<br>互联网同步时间<br>sudo ntpdate time.windows.com<br>2.3<br>sudo hwclock —localtime —systohc</p><h2 id="三、启动菜单的默认选项-选为windows"><a href="#三、启动菜单的默认选项-选为windows" class="headerlink" title="三、启动菜单的默认选项 选为windows"></a>三、启动菜单的默认选项 选为windows</h2><p>sudo gedit /etc/default/grub</p><p>GRUB_DEFAULT=2 改为0<br>更新设置<br>sudo update-grub</p><h2 id="四-ros安装流程-ros-noetic"><a href="#四-ros安装流程-ros-noetic" class="headerlink" title="四.ros安装流程 ros -noetic"></a>四.ros安装流程 ros -noetic</h2><p>4.1清华安装源<br>sudo sh -c ‘. /etc/lsb-release &amp;&amp; echo “deb <a href="http://mirrors.tuna.tsinghua.edu.cn/ros/ubuntu/">http://mirrors.tuna.tsinghua.edu.cn/ros/ubuntu/</a> <code>lsb_release -cs</code> main” &gt; /etc/apt/sources.list.d/ros-latest.list’<br>4.2.设置key<br>sudo apt-key adv —keyserver ‘hkp://keyserver.ubuntu.com:80’ —recv-key C1CF6E31E6BADE8868B172B4F42ED6FBAB17C654<br>4.3安装<br>sudo apt update<br>sudo apt install ros-noetic-desktop-full<br>4.4配置环境变量<br>echo “source /opt/ros/noetic/setup.bash” &gt;&gt; ~/.bashrc<br>source ~/.bashrc</p><p>4.5- 卸载ros指令<br>sudo apt remove ros-noetic-*<br>4.6安装构建依赖<br>sudo apt install python3-rosdep python3-rosinstall python3-rosinstall-generator python3-wstool build-essential</p><p>解决init 和 update失败的问题</p><p>sudo apt-get install python3-pip<br>sudo pip3 install 6-rosdep<br>sudo 6-rosdep</p><p>接着执行就可以了<br>sudo rosdep init<br>sudo update </p><h2 id="五、vscode的安装"><a href="#五、vscode的安装" class="headerlink" title="五、vscode的安装"></a>五、vscode的安装</h2><p>vscode 的安装 </p><ul><li>浏览器下载deb</li><li>sudo dpkg -i 安装包<br>六、超级终端的安装<br>sudo </li></ul><h2 id="七、cmake的安装升级"><a href="#七、cmake的安装升级" class="headerlink" title="七、cmake的安装升级"></a>七、cmake的安装升级</h2><p>1、官网安装<br><a href="https://cmake.org/download/">https://cmake.org/download/</a><br>下载tar ;linux版本即可<br>2、解压后编译</p><p>指引到目录下，进行编译即可</p><pre><code>cd ~/Downloads/cmake-3.22.2./configuremakesudo make install</code></pre><p>3、版本覆盖</p><pre><code>    在解压后编译 后，其实再一开始不卸载老版本的cmake的的时候，安装编译新版本的是不能立刻变更的，需要软连接覆盖的。使用which cmake查找cmake的安装路径，新版本的cmake默认编译安装的路径是在/usr/local/bin/cmake，而我们系统会默认去/usr/bin中去寻找老版本的cmake。做一个链接覆盖即可：</code></pre><p>sudo ln -sf /usr/local/bin/cmake /usr/bin</p><h2 id="八、升级gcc"><a href="#八、升级gcc" class="headerlink" title="八、升级gcc"></a>八、升级gcc</h2><p>1.出现下面情况<br>lib/libxslab2.so: undefined reference to<br>`std::__cxx11::basic_stringstream<char, std::char_traits<char>,<br>std::allocator<char> &gt;::basic_stringstream()@GLIBCXX_3.4.26’</p><p>2、解决方案</p><h1 id="Install-and-use-gcc9"><a href="#Install-and-use-gcc9" class="headerlink" title="Install and use gcc9"></a>Install and use gcc9</h1><p>sudo add-apt-repository ppa:ubuntu-toolchain-r/test<br>sudo apt update<br>sudo apt install gcc-9<br>sudo apt install g++-9<br>sudo rm /usr/bin/gcc<br>sudo rm /usr/bin/g++<br>sudo ln -s /usr/bin/gcc-9 /usr/bin/gcc<br>sudo ln -s /usr/bin/g++-9 /usr/bin/g++</p><h2 id="九、安装配置rplidar-思岚雷达1）"><a href="#九、安装配置rplidar-思岚雷达1）" class="headerlink" title="九、安装配置rplidar(思岚雷达1）"></a>九、安装配置rplidar(思岚雷达1）</h2><p>mkdir -p rplidar/src<br>cd rplidar/src<br>git clone <a href="https://github.com/Slamtec/rplidar_ros.git">https://github.com/Slamtec/rplidar_ros.git</a><br>cd ..<br>catkin_make<br>sudo gedit ~/.bashrc<br><!-- 在文件最后加入 --><br>source /home/yunfang/rplidar/devel/setup.bash(最好使用绝对路径)<br><!-- 保存并退出 --><br>source ~/.bashrc<br><!-- 在插上雷达之后要进行以下工作 --><br><!-- 检查rplidar串口的权限 --><br>ls -l /dev |grep ttyUSB<br><!-- 输入指令添加权限(我这里是USB0) --><br>sudo chmod 666 /dev/ttyUSB0<br><!-- 启动雷达 --><br>roslaunch rplidar_ros rplidar_s2.launch</p><h2 id="十、安装-Pangolin"><a href="#十、安装-Pangolin" class="headerlink" title="十、安装 Pangolin"></a>十、安装 Pangolin</h2><p>1.安装依赖<br>sudo apt update<br>sudo apt upgrade<br>sudo apt install libglew-dev cmake libboost-dev libboost-thread-dev<br>libboost-filesystem-dev libeigen3-dev -y</p><p>2.进⼊ 创建目录并进入<br>mkdir Pangolin<br>cd Pangolin<br>git clone <a href="https://github.com/stevenlovegrove/Pangolin.git">https://github.com/stevenlovegrove/Pangolin.git</a><br>cd Pangolinmkdir build &amp;&amp; cd build<br>cmake ..<br>sudo make -j8<br>sudo make install</p><p>更新动态库链接</p><p>sudo ldconfig</p><h2 id="十一、rosdep失败使用rosdepc"><a href="#十一、rosdep失败使用rosdepc" class="headerlink" title="十一、rosdep失败使用rosdepc"></a>十一、rosdep失败使用rosdepc</h2><h2 id="十二、安装并配置-opencv4-6-0"><a href="#十二、安装并配置-opencv4-6-0" class="headerlink" title="十二、安装并配置 opencv4.6.0"></a>十二、安装并配置 opencv4.6.0</h2><p>参考⽹址⼀ <a href="https://blog.csdn.net/weixin_44796670/article/details/115900538">https://blog.csdn.net/weixin_44796670/article/details/115900538</a><br>参考⽹址⼆ <a href="https://blog.csdn.net/KIK9973/article/details/118830187?">https://blog.csdn.net/KIK9973/article/details/118830187?</a><br>ops_request_misc=&amp;request_id=&amp;biz_id=102&amp;utm_term=Ubuntu18.04 安装<br>OpenCV&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-4-<br>118830187.nonecase&amp;spm=1018.2226.3001.4187</p><p>1、安装依赖环境<br>sudo apt install -y g++<br>sudo apt install -y cmake<br>sudo apt install -y make<br>sudo apt install -y wget unzip<br>2、安装opencv的依赖库<br>sudo apt-get install build-essential libgtk2.0-dev libgtk-3-dev libavcodec-<br>dev libavformat-dev libjpeg-dev libswscale-dev libtiff5-dev</p><p>3、下载 opencv4.6.0 源⽂件<br>wget -O opencv.zip <a href="https://github.com/opencv/opencv/archive/4.6.0.zip">https://github.com/opencv/opencv/archive/4.6.0.zip</a><br>4、编译源⽂件<br>进⼊解压后的 opencv ⽂件夹中执⾏以下命令<br>mkdir build<br>cd build<br>cmake -D CMAKE_BUILD_TYPE=Release -D OPENCV_GENERATE_PKGCONFIG=YES ..<br>make -j12</p><p>PS: 这里的make -j12是根据所使⽤电脑的 CPU 核⼼数来选择的</p><p>5、安装动态库及头文件<br>sudo make install</p><p>6、配置 pkg-conﬁg 环境<br>sudo gedit /etc/profile.d/pkgconfig.sh<br>&lt;打开 config 文件，在文件后面加上一行&gt;<br>export PKG_CONFIG_PATH=/usr/local/lib/pkgconfig:$PKG_CONFIG_PATH<br>&lt;保存并退出&gt;<br>source /etc/profile</p><p>7、配置动态库环境<br>sudo gedit /etc/ld.so.conf.d/opencv4.conf<br>&lt;打开 config 文件，在该文件末尾加上 opencv 的 lib 路径&gt;<br>/usr/local/lib<br>&lt;保存并退出&gt;<br>sudo ldconfig</p><blockquote><p>引用说明：部分来自luper</p></blockquote>]]></content>
    
    
    <summary type="html">ubuntu18 ros noetic 新系统必备</summary>
    
    
    
    <category term="SF" scheme="https://aixiaocainiao.github.io/categories/SF/"/>
    
    
    <category term="ros" scheme="https://aixiaocainiao.github.io/tags/ros/"/>
    
    <category term="noetic" scheme="https://aixiaocainiao.github.io/tags/noetic/"/>
    
  </entry>
  
  <entry>
    <title>git的安装</title>
    <link href="https://aixiaocainiao.github.io/posts/c9ac0fa7.html"/>
    <id>https://aixiaocainiao.github.io/posts/c9ac0fa7.html</id>
    <published>2023-04-08T05:25:49.966Z</published>
    <updated>2023-04-09T08:15:01.687Z</updated>
    
    <content type="html"><![CDATA[<p>git的使用：<br>第一步: github 创建同名(文件夹)仓库<br>第二步：cd 到同名文件夹中<br>echo “# download” &gt;&gt; README.md<br>git init<br>(git add README.md)<br>git add .<br>git commit -m “first commit”<br>git branch -M main<br>每个仓库地址不一样<br>(git remote add origin <a href="https://github.com/aixiaocainiao/download.git">https://github.com/aixiaocainiao/download.git</a>)<br>git push -u origin main</p>]]></content>
    
    
    <summary type="html">git的安装</summary>
    
    
    
    <category term="SF" scheme="https://aixiaocainiao.github.io/categories/SF/"/>
    
    
    <category term="git" scheme="https://aixiaocainiao.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>ros指令</title>
    <link href="https://aixiaocainiao.github.io/posts/50f3c42c.html"/>
    <id>https://aixiaocainiao.github.io/posts/50f3c42c.html</id>
    <published>2023-04-07T07:48:37.957Z</published>
    <updated>2023-04-09T08:15:01.677Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ros指令"><a href="#ros指令" class="headerlink" title="ros指令"></a>ros指令</h1><h2 id="一、理解"><a href="#一、理解" class="headerlink" title="一、理解"></a>一、理解</h2><p>odm  framd_id odm_combined<br>map  map<br>nase_frame_id base_footprint</p><p>scan  scan<br> 查看某个具体的消息 需要使用管道<br>rosmsg list | grep -i 话题名称<br>校园网址<br><a href="https://120.199.39.54:7090/zmcc/indexForce.wlan?wlanuserip=10.137.237.63&amp;wlanacname=0437.0571.571.00">https://120.199.39.54:7090/zmcc/indexForce.wlan?wlanuserip=10.137.237.63&amp;wlanacname=0437.0571.571.00</a></p><p>C语言学习中递归函数<br>ctrl+shift+空格出现代码提示<br>使用rosparam导入参数<br>设置的参数.yaml文件中 需要加空格 例如bg_R: 100<br>rosparam 便签 会率先执行 所以在使用dump导出参数的时候需要自己直接写一个launch文件</p><p>写代码之前操作</p><p>mkdir -p xxx_ws/src(必须得有 src)<br>cd xxx_ws<br>catkin_make<br>cd xxx_ws<br>code .</p><p>rviz中 ctrl+shift+鼠标可以拖动位置<br>args=”-d $(find urdf01_rviz)/config/show_mycar.rviz”<br>这玩意保存的时配置 不是rviz里面显示的东西<br>solidworks<br>joint origin是joint相对于parent的位置<br>[joint_state_publisher-4] process has died [pid 12169, exit code 1, cmd /opt/ros/melodic/lib/joint_state_publisher/joint_state_publisher <strong>name:=joint_state_publisher </strong>log:=/home/yunfang/.ros/log/3c02610c-bfaa-11ed-a76e-30d16b56c4c1/joint_state_publisher-4.log].<br>log file: /home/yunfang/.ros/log/3c02610c-bfaa-11ed-a76e-30d16b56c4c1/joint_state_publisher-4*.log</p><p>出现下面的错误 请删除掉urdf里面的中文注释 melidic中不能有一点点中文<br>evince mycar.pdf<br>arbotix报错，进入src下的arbotix_ros功能包，进入arbotix_python，进入bin，进入arbotix_driver<br>将第一行中的python的运行版本从3改为2.7运行就可以了<br>rviz中fixed frame为 odm<br>gazebo有进程问题 请执行下面指令 直接杀死<br>killall gzserver</p><p>killall gzclient</p><p>tar -xvf arduino-1.x.y-linux64.tar.xz<br>tar解压命令 </p><node name="playbag" pkg="rosbag" type="play"      args="--clock $(arg bag_filename)" />]]></content>
    
    
    <summary type="html">ubuntu18 ros</summary>
    
    
    
    <category term="Slam" scheme="https://aixiaocainiao.github.io/categories/Slam/"/>
    
    
    <category term="ros" scheme="https://aixiaocainiao.github.io/tags/ros/"/>
    
  </entry>
  
  <entry>
    <title>导航原理</title>
    <link href="https://aixiaocainiao.github.io/posts/cb0cb908.html"/>
    <id>https://aixiaocainiao.github.io/posts/cb0cb908.html</id>
    <published>2023-04-07T07:48:37.952Z</published>
    <updated>2023-04-09T08:15:01.680Z</updated>
    
    <content type="html"><![CDATA[<h1 id="导航原理"><a href="#导航原理" class="headerlink" title="导航原理"></a>导航原理</h1><h2 id="一、第一部分"><a href="#一、第一部分" class="headerlink" title="一、第一部分"></a>一、第一部分</h2><h3 id="1-1密匙"><a href="#1-1密匙" class="headerlink" title="1.1密匙"></a>1.1密匙</h3><p>tolen url<br>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</p><h2 id="1-2-导航组成"><a href="#1-2-导航组成" class="headerlink" title="1.2 导航组成"></a>1.2 导航组成</h2><p>1.全局地图（全局概览图 ：定位和路径规划）<br>2.自身地位：（确定在地图中的位置）<br>3.路径规划：（全局路径规划+局部路径规划）<br>4.运动控制：（控制速度和方向）<br>5.环境感知：（感知周围环境）</p><h2 id="二、代价地图组成（多层叠加）"><a href="#二、代价地图组成（多层叠加）" class="headerlink" title="二、代价地图组成（多层叠加）"></a>二、代价地图组成（多层叠加）</h2><p>1.静态层 —-slam绘制的静态地图<br>2.障碍物层 —导航中传感器感知的障碍物<br>3.膨胀层  —为了避免碰撞而设置的安全区域</p><p>4.自定义层 —根据业务自设置的地图数据 （例如在地图中添加一个虚拟墙）</p><p>—————————膨胀空间的设置可以参考非自由空间。<br>致命障碍:栅格值为254，此时障碍物与机器人中心重叠，必然发生碰撞；<br>内切障碍:栅格值为253，此时障碍物处于机器人的内切圆内，必然发生碰撞；<br>外切障碍:栅格值为[128,252]，此时障碍物处于其机器人的外切圆内，处于碰撞临界，不一定发生碰撞；<br>非自由空间:栅格值为[1,127]，此时机器人处于障碍物附近，属于危险警戒区，进入此区域，将来可能会发生碰撞；<br>自由区域:栅格值为0，此处机器人可以自由通过；<br>未知区域:栅格值为255，还没探明是否有障碍物。</p>]]></content>
    
    
    <summary type="html">ubuntu18 ros melotic 导航原理</summary>
    
    
    
    <category term="Slam" scheme="https://aixiaocainiao.github.io/categories/Slam/"/>
    
    
    <category term="navigation" scheme="https://aixiaocainiao.github.io/tags/navigation/"/>
    
  </entry>
  
  <entry>
    <title>ros melotic opencv安装</title>
    <link href="https://aixiaocainiao.github.io/posts/676c85a9.html"/>
    <id>https://aixiaocainiao.github.io/posts/676c85a9.html</id>
    <published>2023-04-06T13:58:07.610Z</published>
    <updated>2023-04-09T08:21:39.869Z</updated>
    
    <content type="html"><![CDATA[<h1 id="opencv安装"><a href="#opencv安装" class="headerlink" title="opencv安装"></a>opencv安装</h1><h2 id="一、准备工作"><a href="#一、准备工作" class="headerlink" title="一、准备工作"></a>一、准备工作</h2><h3 id="1-0设置opencv静态库加载路径"><a href="#1-0设置opencv静态库加载路径" class="headerlink" title="1.0设置opencv静态库加载路径"></a>1.0设置opencv静态库加载路径</h3><ul><li><p>打开配置文件：sudo gedit /etc/ld.so.conf</p></li><li><p>加入编译后lib文件夹路径，形式如下所示，但应做修改：<br>include /home/<em>*</em>/opencv-3.4.x/build/lib</p><ul><li>原来的<br>include /etc/ld.so.conf.d/*.conf</li></ul></li></ul><h3 id="2-0安装流程"><a href="#2-0安装流程" class="headerlink" title="2.0安装流程"></a>2.0安装流程</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install build-essential</span><br><span class="line">sudo apt-get install cmake git libgtk2.0-dev pkg-config libavcodec-dev libavformat-dev libswscale-dev</span><br><span class="line">sudo apt-get install python-dev python-numpy libtbb2 libtbb-dev libjpeg-dev libpng-dev libtiff-dev libjasper-dev libdc1394-22-dev</span><br></pre></td></tr></table></figure><p>出现错误：E: 无法定位软件包 libjasper-dev<br>执行这一步即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo add-apt-repository &quot;deb http://security.ubuntu.com/ubuntu xenial-security main&quot;</span><br><span class="line">sudo apt update</span><br><span class="line">sudo apt install libjasper1 libjasper-dev</span><br><span class="line">cd ~/opencv-3.4.15/build/</span><br><span class="line">cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr/local -DOPENCV_EXTRA_MODULES_PATH=../opencv_contrib/modules ..</span><br></pre></td></tr></table></figure><h2 id="二、安装流程："><a href="#二、安装流程：" class="headerlink" title="二、安装流程："></a>二、安装流程：</h2><p>1.ubuntu 18.04 安装OpenCV 4.1.0版本<br>先下载OpenCV和OpenCV_contrib</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/Itseez/opencv.git</span><br><span class="line">git clone https://github.com/Itseez/opencv_contrib.git</span><br></pre></td></tr></table></figure><p>其中opencv_contrib放入opencv文件夹中<br>2.安装依赖</p><h2 id="三、-更新源，安装软件包"><a href="#三、-更新源，安装软件包" class="headerlink" title="三、 更新源，安装软件包"></a>三、 更新源，安装软件包</h2><h3 id="3-1"><a href="#3-1" class="headerlink" title="3.1"></a>3.1</h3><p>sudo apt update &amp;&amp; sudo apt install -y cmake g++ wget unzip</p><h3 id="3-2安装依赖"><a href="#3-2安装依赖" class="headerlink" title="3.2安装依赖"></a>3.2安装依赖</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install build-essential libgtk2.0-dev libavcodec-dev libavformat-dev libjpeg-dev libswscale-dev libtiff5-dev</span><br><span class="line">sudo apt-get install libgtk2.0-dev</span><br><span class="line">sudo apt-get install pkg-config</span><br></pre></td></tr></table></figure><p>出现错误：E: 无法定位软件包 libjasper-dev<br>执行这一步即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo add-apt-repository &quot;deb http://security.ubuntu.com/ubuntu xenial-security main&quot;</span><br><span class="line">sudo apt update</span><br><span class="line">sudo apt install libjasper1 libjasper-dev</span><br><span class="line">cd ~/opencv-3.4.15/build/</span><br><span class="line">cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr/local -DOPENCV_EXTRA_MODULES_PATH=../opencv_contrib/modules ..</span><br></pre></td></tr></table></figure><h3 id="3-3在build文件夹下执行cmake"><a href="#3-3在build文件夹下执行cmake" class="headerlink" title="3.3在build文件夹下执行cmake"></a>3.3在build文件夹下执行cmake</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cd opencv/</span><br><span class="line">mkdir build</span><br><span class="line">cd build/</span><br><span class="line">(cd ~/opencv-3.4.15/build/)看一下上面 整过了就不用整了</span><br><span class="line">cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr/local -DOPENCV_EXTRA_MODULES_PATH=../opencv_contrib-3.4.15/modules ..</span><br><span class="line">opencv_contrib-3.4.15需要修改成自己的文件夹名字</span><br></pre></td></tr></table></figure><h3 id="3-4编译"><a href="#3-4编译" class="headerlink" title="3.4编译"></a>3.4编译</h3><p>这里的j4是针对性能不好的电脑，我这里电脑性能比较强，选择j32编译,s数据越大编译的速度就越快。<br>make -j4</p><h3 id="3-5安装到系统"><a href="#3-5安装到系统" class="headerlink" title="3.5安装到系统"></a>3.5安装到系统</h3><p>sudo make install<br>添加路径<br>sudo gedit /etc/ld.so.conf.d/opencv.conf</p><p>然后在打开文件中添加如下内容<br>/usr/local/lib<br>之后再终端输入以下命令（安装完成某个工程后生成许多动态库，该命令是为了让这些动态链接库为系统所共享）<br>sudo ldconfig</p><p>使其保存并生效。<br>再在终端输入</p><p>sudo gedit /etc/bash.bashrc</p><p>打开文件后在末尾输入：</p><p>PKG_CONFIG_PATH=$PKG_CONFIG_PATH:/usr/local/lib/pkgconfig<br>export PKG_CONFIG_PATH<br>保存退出，终端输入：<br>source /etc/bash.bashrc<br>至此，opencv及opencv_contrib安装配置完成了！</p><h3 id="3-6测试安装的文件"><a href="#3-6测试安装的文件" class="headerlink" title="3.6测试安装的文件"></a>3.6测试安装的文件</h3><p>进入opencv/samples/cpp/example_cmake目录下，终端打开，依次输入：<br>cd ../samples/cpp/example_cmake<br>cmake .<br>make<br>./opencv_example</p>]]></content>
    
    
    <summary type="html">ubuntu18 ros melotic opencv安装</summary>
    
    
    
    <category term="SF" scheme="https://aixiaocainiao.github.io/categories/SF/"/>
    
    
    <category term="ros" scheme="https://aixiaocainiao.github.io/tags/ros/"/>
    
    <category term="melodic" scheme="https://aixiaocainiao.github.io/tags/melodic/"/>
    
    <category term="opencv" scheme="https://aixiaocainiao.github.io/tags/opencv/"/>
    
  </entry>
  
  <entry>
    <title>ros melotic安装</title>
    <link href="https://aixiaocainiao.github.io/posts/e9f64358.html"/>
    <id>https://aixiaocainiao.github.io/posts/e9f64358.html</id>
    <published>2023-04-06T13:55:01.784Z</published>
    <updated>2023-04-10T14:21:31.283Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ros-melodi-安装"><a href="#ros-melodi-安装" class="headerlink" title="ros melodi 安装"></a>ros melodi 安装</h1><h2 id="一、安装流程"><a href="#一、安装流程" class="headerlink" title="一、安装流程"></a>一、安装流程</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">sudo sh -c &#x27;. /etc/lsb-release &amp;&amp; echo &quot;deb http://mirrors.tuna.tsinghua.edu.cn/ros/ubuntu/ $DISTRIB_CODENAME main&quot; &gt; /etc/apt/sources.list.d/ros-latest.list&#x27;</span><br><span class="line">sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys F42ED6FBAB17C654</span><br><span class="line">sudo apt-get update</span><br><span class="line"></span><br><span class="line">sudo apt-get install ros-melodic-desktop-full</span><br><span class="line"></span><br><span class="line">sudo apt-get install ros-melodic-rqt*</span><br><span class="line"></span><br><span class="line">sudo apt install rospack-tool</span><br><span class="line"></span><br><span class="line">sudo apt-get install python3-pip</span><br><span class="line">sudo pip3 install 6-rosdep</span><br><span class="line">sudo 6-rosdep</span><br><span class="line">sudo rosdep init </span><br><span class="line">rosdep update </span><br><span class="line"></span><br><span class="line">echo &quot;source /opt/ros/melodic/setup.bash&quot; &gt;&gt; ~/.bashrc</span><br><span class="line">source ~/.bashrc</span><br><span class="line"></span><br><span class="line">sudo apt install python-rosinstall python-rosinstall-generator python-wstool build-essential</span><br></pre></td></tr></table></figure><h2 id="二、启动"><a href="#二、启动" class="headerlink" title="二、启动"></a>二、启动</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;source /opt/ros/melodic/setup.bash&quot; &gt;&gt; ~/.bashrc</span><br><span class="line">source ~/.bashrc</span><br><span class="line">roscore</span><br><span class="line">rosrun turtlesim turtlesim_node</span><br><span class="line">rosrun turtlesim turtle_teleop_key</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">ubuntu18 ros melotic安装</summary>
    
    
    
    <category term="SF" scheme="https://aixiaocainiao.github.io/categories/SF/"/>
    
    
    <category term="ros" scheme="https://aixiaocainiao.github.io/tags/ros/"/>
    
    <category term="melodic" scheme="https://aixiaocainiao.github.io/tags/melodic/"/>
    
  </entry>
  
  <entry>
    <title>ros melotic cartographer安装</title>
    <link href="https://aixiaocainiao.github.io/posts/26aabfb9.html"/>
    <id>https://aixiaocainiao.github.io/posts/26aabfb9.html</id>
    <published>2023-04-06T13:39:21.589Z</published>
    <updated>2023-04-09T08:15:01.703Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ros-melotic-cartographer安装"><a href="#ros-melotic-cartographer安装" class="headerlink" title="ros melotic cartographer安装"></a>ros melotic cartographer安装</h1><h2 id="一、安装相关"><a href="#一、安装相关" class="headerlink" title="一、安装相关"></a>一、安装相关</h2><h3 id="1-安装相关的依赖"><a href="#1-安装相关的依赖" class="headerlink" title="1.安装相关的依赖"></a>1.安装相关的依赖</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install -y google-mock libboost-all-dev  libeigen3-dev libgflags-dev libgoogle-glog-dev liblua5.2-dev libprotobuf-dev  libsuitesparse-dev libwebp-dev ninja-build protobuf-compiler python-sphinx  ros-melodic-tf2-eigen libatlas-base-dev libsuitesparse-dev liblapack-dev</span><br></pre></td></tr></table></figure><h3 id="2-下载安装包"><a href="#2-下载安装包" class="headerlink" title="2.下载安装包"></a>2.下载安装包</h3><p>（因为命令下载太慢，所以我直接提前下载下来，主目录下建立  cartographer_ws文件夹，cartographer_ws文件夹内建src文件夹，放入下载的cartographer，cartographer_ros，ceres-solver）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mkdir cartographer</span><br><span class="line">cd cartographer</span><br><span class="line">mkdir src</span><br><span class="line">cd src</span><br><span class="line">git clone https://github.com/googlecartographer/cartographer_ros.git</span><br><span class="line">git clone https://github.com/googlecartographer/cartographer.git</span><br><span class="line">(git clone https://github.com/ceres-solver/ceres-solver.git)</span><br><span class="line">不用这个</span><br></pre></td></tr></table></figure><h3 id="3-获取ceres-solver"><a href="#3-获取ceres-solver" class="headerlink" title="3.获取ceres-solver"></a>3.获取ceres-solver</h3><p>在上述建好的src文件夹下，获取ceres-solver源码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget ceres-solver.org/ceres-solver-1.13.0.tar.gz</span><br></pre></td></tr></table></figure><p>下载不成功的话，可以使用下面的链接下载</p><p>版本为ceres-solver-1.13.0，对应的是ros-melodic的环境，激光—cartographer中使用-Linux文档类资源-CSDN下载</p><p>切记：版本一定要对，否则编译不过去</p><h3 id="4-接着"><a href="#4-接着" class="headerlink" title="4 .接着"></a>4 .接着</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">cd ceres-solver</span><br><span class="line">mkdir build</span><br><span class="line">cd build</span><br><span class="line">cmake ..</span><br><span class="line">make -j 8 </span><br><span class="line">#make test  # 此选项可选</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure><h3 id="5-放在目录"><a href="#5-放在目录" class="headerlink" title="5 .放在目录"></a>5 .放在目录</h3><p>下载好的protobuf放在cartographer/scripts/目录下就行<br>下载链接下载地址：<a href="https://codeload.github.com/google/protobuf/zip/v3.0.0">https://codeload.github.com/google/protobuf/zip/v3.0.0</a></p><h3 id="6-执行依赖"><a href="#6-执行依赖" class="headerlink" title="6.执行依赖"></a>6.执行依赖</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">cd protobuf</span><br><span class="line">mkdir build</span><br><span class="line">cd build</span><br><span class="line">cmake -G Ninja \</span><br><span class="line">  -DCMAKE_POSITION_INDEPENDENT_CODE=ON \</span><br><span class="line">  -DCMAKE_BUILD_TYPE=Release \</span><br><span class="line">  -Dprotobuf_BUILD_TESTS=OFF \</span><br><span class="line">  ../cmake</span><br><span class="line"></span><br><span class="line">ninja</span><br><span class="line">sudo ninja install</span><br></pre></td></tr></table></figure><h3 id="7-进入工作空间"><a href="#7-进入工作空间" class="headerlink" title="7.进入工作空间"></a>7.进入工作空间</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd cartographer_ws</span><br><span class="line">rosdep update</span><br><span class="line">rosdep install --from-paths src --ignore-src --rosdistro=$&#123;ROS_DISTRO&#125; -y（出错）</span><br></pre></td></tr></table></figure><ul><li>解决：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">（1）rosdep install --from-paths src --ignore-src --rosdistro=$&#123;ROS_DISTRO&#125; -y 行不通。pass</span><br><span class="line">（2）把：rosdep install --from-paths src --ignore-src --rosdistro=kinetic -y</span><br><span class="line">改成：rosdep install --from-paths ~/cartographer_ws/src --ignore-src -r</span><br><span class="line">OK！</span><br><span class="line">catkin_ws 自己的工作空间  我的是cartographer_ws</span><br><span class="line">————————————————</span><br></pre></td></tr></table></figure><p>执行catkin_make_isolated —install —use-ninja（出错）<br>报错：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;== Failed to process package &#x27;cartographer&#x27;: </span><br><span class="line">  Command &#x27;[&#x27;cmake&#x27;, &#x27;/home/willingham/carto_ws/src/cartographer&#x27;, &#x27;-DCMAKE_INSTALL_PREFIX=/home/willingham/carto_ws/install_isolated&#x27;, &#x27;-G&#x27;, &#x27;Ninja&#x27;]&#x27; returned non-zero exit status 1</span><br><span class="line"></span><br><span class="line">Reproduce this error by running:</span><br><span class="line">==&gt; cd /home/willingham/carto_ws/build_isolated/cartographer &amp;&amp; cmake /home/willingham/carto_ws/src/cartographer -DCMAKE_INSTALL_PREFIX=/home/willingham/carto_ws/install_isolated -G Ninja</span><br><span class="line"></span><br><span class="line">Command failed, exiting.</span><br></pre></td></tr></table></figure><ul><li>解决：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install stow</span><br><span class="line">sudo chmod +x ~/cartographer_ws/src/cartographer/scripts/install_abseil.sh</span><br><span class="line">cd ~/cartographer_ws/src/cartographer/scripts</span><br><span class="line">./install_abseil.sh</span><br><span class="line">再执行一次catkin_make_isolated --install --use-ninja  成功</span><br></pre></td></tr></table></figure><h3 id="8-执行命令"><a href="#8-执行命令" class="headerlink" title="8.执行命令"></a>8.执行命令</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source install_isolated/setup.bash</span><br></pre></td></tr></table></figure><p>下载DEMO测试</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2d slam</span><br><span class="line">wget -P ~/Downloads https://storage.googleapis.com/cartographer-public-data/bags/backpack_2d/cartographer_paper_deutsches_museum.bag</span><br><span class="line">roslaunch cartographer_ros demo_backpack_2d.launch bag_filename:=$&#123;HOME&#125;/Downloads/cartographer_paper_deutsches_museum.bag</span><br></pre></td></tr></table></figure><ul><li>中间包括自己下载camke 3.11以上的版本</li></ul><h3 id="8-1错误纠正"><a href="#8-1错误纠正" class="headerlink" title="8.1错误纠正"></a>8.1错误纠正</h3><ul><li><p>1.通过以下命令查询cmake版本。</p><p>cmake —version</p></li><li><p>2.这里，我并没有卸载旧版本的cmake，而是直接安装新版本，而且这样没有出现问题。【非必须】<br>可去<a href="http://www.cmake.org/files查找需要的版本，写本博客时最新版为3.11.3，以此为例。">http://www.cmake.org/files查找需要的版本，写本博客时最新版为3.11.3，以此为例。</a></p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install build-essential</span><br><span class="line">$ wget http://www.cmake.org/files/v3.11/cmake-3.11.3.tar.gz</span><br><span class="line">$ tar xf cmake-3.11.3.tar.gz</span><br><span class="line">$ cd cmake-3.11.3</span><br><span class="line">$ ./configure</span><br><span class="line">$ make</span><br><span class="line">$ sudo make install</span><br></pre></td></tr></table></figure><ul><li>3.创建cmake的软连接(我这里自动连接了)　(我没有整这一步也是OK的 没必要的）跳转第四部    </li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1.ln -sf /your cmake3.11 path/bin/*  /usr/bin/</span><br><span class="line">2.ln -sf /your/cmake-3.11.3/path/bin/*  /usr/bin/</span><br></pre></td></tr></table></figure><p>如果需要要换成自己的实际路径</p><ul><li><p>4.然后，输入以下命令查询cmake版本。<br>1</p><p>cmake —version</p></li></ul><hr><p>如果输出以下信息，则表明安装成功。<br>cmake version 3.11<br>————————————————</p><hr>]]></content>
    
    
    <summary type="html">ubuntu18 ros melotic cartographer安装</summary>
    
    
    
    <category term="SF" scheme="https://aixiaocainiao.github.io/categories/SF/"/>
    
    
    <category term="ubuntu" scheme="https://aixiaocainiao.github.io/tags/ubuntu/"/>
    
    <category term="melodic" scheme="https://aixiaocainiao.github.io/tags/melodic/"/>
    
    <category term="cartographer" scheme="https://aixiaocainiao.github.io/tags/cartographer/"/>
    
  </entry>
  
  <entry>
    <title>ubuntu18安装pycharm2021.3</title>
    <link href="https://aixiaocainiao.github.io/posts/62d28f2b.html"/>
    <id>https://aixiaocainiao.github.io/posts/62d28f2b.html</id>
    <published>2023-04-06T13:14:57.303Z</published>
    <updated>2023-04-09T08:15:01.711Z</updated>
    
    <content type="html"><![CDATA[<h1 id="如何在Ubuntu安装pycharm的专业版，保姆级教学"><a href="#如何在Ubuntu安装pycharm的专业版，保姆级教学" class="headerlink" title="如何在Ubuntu安装pycharm的专业版，保姆级教学"></a>如何在Ubuntu安装pycharm的专业版，保姆级教学</h1><h2 id="一、下载Pycharm2021-3版本"><a href="#一、下载Pycharm2021-3版本" class="headerlink" title="一、下载Pycharm2021.3版本"></a>一、下载Pycharm2021.3版本</h2><pre><code>    进入pycharm官网，点击Download下载按钮</code></pre><p><a href="https://img-blog.csdnimg.cn/3cc019fbca954a5590106a31ee7c07ca.png">https://img-blog.csdnimg.cn/3cc019fbca954a5590106a31ee7c07ca.png</a><br>     这里我们选择Other version，其他版本<br><a href="https://img-blog.csdnimg.cn/cec1e7cca3ae4b9fb3661ee31fb4a7bf.png">https://img-blog.csdnimg.cn/cec1e7cca3ae4b9fb3661ee31fb4a7bf.png</a><br>        下拉选择2021.3版本（注意别选错了，其他版本不知道有没有用）<br><a href="https://img-blog.csdnimg.cn/eebfbe2261ad48a2b4286666539ec24f.png">https://img-blog.csdnimg.cn/eebfbe2261ad48a2b4286666539ec24f.png</a><br> 点击下载（注意：下载的是2021.3 - Linux (tar.gz)）<br><a href="https://img-blog.csdnimg.cn/5379a28e41f24c6e89d5fb1d9eeb423e.png">https://img-blog.csdnimg.cn/5379a28e41f24c6e89d5fb1d9eeb423e.png</a><br>    下载完成后，我们可以在下载文件夹下看到安装包<br><a href="https://img-blog.csdnimg.cn/2603a06c9d3e4a2196c20d8b78867a0a.png">https://img-blog.csdnimg.cn/2603a06c9d3e4a2196c20d8b78867a0a.png</a></p><h2 id="二、安装pycharm2021-3"><a href="#二、安装pycharm2021-3" class="headerlink" title="二、安装pycharm2021.3"></a>二、安装pycharm2021.3</h2><pre><code>    由于我们下载的安装包是压缩的形式，我们先把它提取出来 ,这里我预先已经提取出来了</code></pre><p><a href="https://img-blog.csdnimg.cn/58d774aef9c44199bf69d31b163dde0a.png">https://img-blog.csdnimg.cn/58d774aef9c44199bf69d31b163dde0a.png</a></p><ul><li><p>现在我们来看一下提取出来的文件结构：</p><pre><code>            双击进去的第一层是“pycharm-2021.3”</code></pre><p><a href="https://img-blog.csdnimg.cn/b03fbf9391d04bada412067da83a5a54.png">https://img-blog.csdnimg.cn/b03fbf9391d04bada412067da83a5a54.png</a></p></li><li><p>这里为了后面好操作我将其移动到“主目录”  下，就是“用户文件夹”下<br><a href="https://img-blog.csdnimg.cn/8c8c34f331e74790a2c1f3a6649758c6.png">https://img-blog.csdnimg.cn/8c8c34f331e74790a2c1f3a6649758c6.png</a><br><a href="https://img-blog.csdnimg.cn/">https://img-blog.csdnimg.cn/</a> 3329149da1e742aaa9c0197fb2aeef8b.png</p></li><li>进入“pycharm-2021.3”可看到这些结构，找到bin这个文件夹：<br><a href="https://img-blog.csdnimg.cn/747779f9793142eab088b426c3750782.png">https://img-blog.csdnimg.cn/747779f9793142eab088b426c3750782.png</a></li><li><p>这里我们选择bin这个文件继续进去 ，找到pycharm.sh和pycharm64.vmoptions这2个文件</p><pre><code>  其中pycharm.sh是运行文件，pycharm64.vmoptions是配置文件</code></pre></li><li><p>我们先来修改一下配置文件 pycharm64.vmoptions：</p><pre><code>  将下面这段代码添加上去  注：-javaagent: 后面加的是文件fineagent.jar的路径  文件在文章最后有提供。</code></pre></li><li>-javaagent:/home/用户名/fineagent.jar<br><a href="https://img-blog.csdnimg.cn/1d19259dce59418eac8f57eb9c016b44.png">https://img-blog.csdnimg.cn/1d19259dce59418eac8f57eb9c016b44.png</a></li><li>添加好上面这段代码之后，我们将文件 fineagent.jar复制到“主目录”  下，就是“用户文件夹”下<br><a href="https://img-blog.csdnimg.cn/7c729511478a4cb4a10b89c58fdaa45e.png">https://img-blog.csdnimg.cn/7c729511478a4cb4a10b89c58fdaa45e.png</a></li></ul><h2 id="三、运行pycharm"><a href="#三、运行pycharm" class="headerlink" title="三、运行pycharm"></a>三、运行pycharm</h2><pre><code>    在终端进入pycharm的bin文件夹 ：</code></pre><p><a href="https://img-blog.csdnimg.cn/4e910984b78a4fb6bf2be541245c610b.png">https://img-blog.csdnimg.cn/4e910984b78a4fb6bf2be541245c610b.png</a><br><a href="https://img-blog.csdnimg.cn/ef0ec50c440f4a2e93291979084f0e6b.png">https://img-blog.csdnimg.cn/ef0ec50c440f4a2e93291979084f0e6b.png</a><br> 通过下列命令运行pycharm<br>./pycharm.sh</p><h2 id="四、运行成功，输入破解码激活"><a href="#四、运行成功，输入破解码激活" class="headerlink" title="四、运行成功，输入破解码激活"></a>四、运行成功，输入破解码激活</h2><pre><code>    复制下列代码：</code></pre><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">5AYV1D1RE5-eyJsaWNlbnNlSWQiOiI1QVlWMUQxUkU1IiwibGljZW5zZWVOYW1lIjoiaHR0cHM6Ly93d3cuaml3ZWljaGVuZ3podS5jb20iLCJhc3NpZ25lZU5hbWUiOiIiLCJhc3NpZ25lZUVtYWlsIjoiIiwibGljZW5zZVJlc3RyaWN0aW9uIjoiIiwiY2hlY2tDb25jdXJyZW50VXNlIjpmYWxzZSwicHJvZHVjdHMiOlt7ImNvZGUiOiJJSSIsImZhbGxiYWNrRGF0ZSI6IjIwOTktMTItMzEiLCJwYWlkVXBUbyI6IjIwOTktMTItMzEifSx7ImNvZGUiOiJBQyIsImZhbGxiYWNrRGF0ZSI6IjIwOTktMTItMzEiLCJwYWlkVXBUbyI6IjIwOTktMTItMzEifSx7ImNvZGUiOiJEUE4iLCJmYWxsYmFja0RhdGUiOiIyMDk5LTEyLTMxIiwicGFpZFVwVG8iOiIyMDk5LTEyLTMxIn0seyJjb2RlIjoiUFMiLCJmYWxsYmFja0RhdGUiOiIyMDk5LTEyLTMxIiwicGFpZFVwVG8iOiIyMDk5LTEyLTMxIn0seyJjb2RlIjoiR08iLCJmYWxsYmFja0RhdGUiOiIyMDk5LTEyLTMxIiwicGFpZFVwVG8iOiIyMDk5LTEyLTMxIn0seyJjb2RlIjoiRE0iLCJmYWxsYmFja0RhdGUiOiIyMDk5LTEyLTMxIiwicGFpZFVwVG8iOiIyMDk5LTEyLTMxIn0seyJjb2RlIjoiQ0wiLCJmYWxsYmFja0RhdGUiOiIyMDk5LTEyLTMxIiwicGFpZFVwVG8iOiIyMDk5LTEyLTMxIn0seyJjb2RlIjoiUlMwIiwiZmFsbGJhY2tEYXRlIjoiMjA5OS0xMi0zMSIsInBhaWRVcFRvIjoiMjA5OS0xMi0zMSJ9LHsiY29kZSI6IlJDIiwiZmFsbGJhY2tEYXRlIjoiMjA5OS0xMi0zMSIsInBhaWRVcFRvIjoiMjA5OS0xMi0zMSJ9LHsiY29kZSI6IlJEIiwiZmFsbGJhY2tEYXRlIjoiMjA5OS0xMi0zMSIsInBhaWRVcFRvIjoiMjA5OS0xMi0zMSJ9LHsiY29kZSI6IlBDIiwiZmFsbGJhY2tEYXRlIjoiMjA5OS0xMi0zMSIsInBhaWRVcFRvIjoiMjA5OS0xMi0zMSJ9LHsiY29kZSI6IlJNIiwiZmFsbGJhY2tEYXRlIjoiMjA5OS0xMi0zMSIsInBhaWRVcFRvIjoiMjA5OS0xMi0zMSJ9LHsiY29kZSI6IldTIiwiZmFsbGJhY2tEYXRlIjoiMjA5OS0xMi0zMSIsInBhaWRVcFRvIjoiMjA5OS0xMi0zMSJ9LHsiY29kZSI6IkRCIiwiZmFsbGJhY2tEYXRlIjoiMjA5OS0xMi0zMSIsInBhaWRVcFRvIjoiMjA5OS0xMi0zMSJ9LHsiY29kZSI6IkRDIiwiZmFsbGJhY2tEYXRlIjoiMjA5OS0xMi0zMSIsInBhaWRVcFRvIjoiMjA5OS0xMi0zMSJ9LHsiY29kZSI6IlJTVSIsImZhbGxiYWNrRGF0ZSI6IjIwOTktMTItMzEiLCJwYWlkVXBUbyI6IjIwOTktMTItMzEifV0sImhhc2giOiIxMjc5Njg3Ny8wIiwiZ3JhY2VQZXJpb2REYXlzIjo3LCJhdXRvUHJvbG9uZ2F0ZWQiOmZhbHNlLCJpc0F1dG9Qcm9sb25nYXRlZCI6ZmFsc2V9-HNPogO0kWkHCVMnsjmBXUqQt87UPHqdkYqZGveSJtu8hb2V2Yq7gHsHenp4UuEd3jwEwC+YrUIf7U5yDA/56F5Sdn0RLUHZX5DHeQbJPbmYCBsDRT7m8rnmMFOSZn3vwNatvv1cooZbcGOk3Wwxx6bF7XcgaIrmXRcmZMZgv2PZehr0WS1HxNKe3X4nbGP3MwiSbg4ypmxNDrljmgv+Si9QDDwNLDffqeO0Lce0FqEJuMWmvBS42S0aeIYF8IS5bp4+LFKLJ8T7tF40OxKYDurBb9+9c43GZBscM/eLB8Jos66jNGFwgebFUlvhzJKVHZtuc/N8zGeEnTq6K0T/B8w==-MIIDTjCCAjagAwIBAgIBDTANBgkqhkiG9w0BAQsFADAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBMCAXDTE4MTEwMTEyMjk0NloYDzIwOTkwODA5MDIyNjA3WjAfMR0wGwYDVQQDDBRwcm9kMnktZnJvbS0yMDIwMTAxOTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAMK3eyr0+Oys/TwcQO+qYaXWGBmXcEP4fR0bHHzZd/4WNGltXhecM80OWthA38BQRYAJBCKz/dSkO2Kj1H2y+7KB5cIaOiJEyTESfTSgzQdot6laRBU8oxy9mmagI46M8zEEmplPybY4YJj4HOwZiBsMQEMxoTgMDLpuHX6uASoVhSj6koB55lOj4wEgsQBeAMWTAXmTl88ixE179J8aBUkBGpL8w/tZzl9BJXZNF15gPfkS58rw8cdPzXLS0Yym37A2/KKFhfHzJc5KhbaxqYzmkAfTMqPsIqCQ1lQUAqfiPn2gN2I1Z3/cQuEW27M55fXVr2DduQe5DWzYJs85L50CAwEAAaOBmTCBljAJBgNVHRMEAjAAMB0GA1UdDgQWBBQk2hEilvWFQcCTR+gxI0z0wIQC/zBIBgNVHSMEQTA/gBSjnrZIZ0ISNkG9beC5tKBSi5fxs6EcpBowGDEWMBQGA1UEAwwNSmV0UHJvZmlsZSBDQYIJANJssYOyg3nhMBMGA1UdJQQMMAoGCCsGAQUFBwMBMAsGA1UdDwQEAwIFoDANBgkqhkiG9w0BAQsFAAOCAQEAsCQBjO5wttco/Z5cj/o4GBrku8UtBBBVFq4xsBanshTHm4deVxcTvta4aScV0TPKcaLqGqWx8A9v8XXO8dBbCuyXvWZteZ/C2Covg1xXiM99lz7VxqpjVmLdKanZn5u0gQSiYJdcfF+TdbmEIeSOnN/kLXNq2hXdJQK2zk2J25UZqu5EibRtTbdOzw6ZcfwJ8uOntXfsmAhnNICP3Wf/4wR/mwB0Ka4S+JA3IbF5MUmUZ/fjUaFarnin70us+Vxf/sZUi7u67wilvwVV0NAqDpthHUV0NRc4q+yOr2Dt/uCHdy4XRXLJfAv/z9/xBwNZZALNz3EtQL6IeIWWJByl3g==</span><br></pre></td></tr></table></figure><p><a href="https://img-blog.csdnimg.cn/7da38dc5cd5b413e815bc9213b2b94e8.png">https://img-blog.csdnimg.cn/7da38dc5cd5b413e815bc9213b2b94e8.png</a><br><a href="https://img-blog.csdnimg.cn/373e6474f69e438f92553476f1c2ac02.png">https://img-blog.csdnimg.cn/373e6474f69e438f92553476f1c2ac02.png</a></p><ul><li>激活成功实例：<br><a href="https://img-blog.csdnimg.cn/d18f50b6be804b608a918d951e7ce483.png">https://img-blog.csdnimg.cn/d18f50b6be804b608a918d951e7ce483.png</a><br>到这里我们就已经成功在Ubuntu系统上激活pycharm专业版了， 欢迎大家在评论区讨论！！！</li></ul><p>文章所需要的pycharm版本和资料如下 ，我已经放在了网盘，有需要也可以加我微信发你！！！！</p><p> 链接：<a href="https://pan.baidu.com/s/1uZteOE7OcXfwP4mHC2hlrg">https://pan.baidu.com/s/1uZteOE7OcXfwP4mHC2hlrg</a></p><p>提取码：x7x7 </p><p>微信 如下：<br>————————————————</p><blockquote><p>本文为CSDN博主「@xuxin_2000」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/qq_52466870/article/details/128134511">https://blog.csdn.net/qq_52466870/article/details/128134511</a><br><a href="https://img-blog.csdnimg.cn/4115133912824e0a8c9bdb62bafe9fc3.png">https://img-blog.csdnimg.cn/4115133912824e0a8c9bdb62bafe9fc3.png</a><br>注：如果文件pycharm64.vmoptions没有配置错误和文件fineagent.jar添加正确，pycharm是正常运行的 </p></blockquote>]]></content>
    
    
    <summary type="html">ubuntu18 pycharm2021.3</summary>
    
    
    
    <category term="SF" scheme="https://aixiaocainiao.github.io/categories/SF/"/>
    
    
    <category term="ubuntu" scheme="https://aixiaocainiao.github.io/tags/ubuntu/"/>
    
    <category term="pycharm2021.3" scheme="https://aixiaocainiao.github.io/tags/pycharm2021-3/"/>
    
  </entry>
  
  <entry>
    <title>ubuntu按装搜狗输入法</title>
    <link href="https://aixiaocainiao.github.io/posts/cb2decdd.html"/>
    <id>https://aixiaocainiao.github.io/posts/cb2decdd.html</id>
    <published>2023-04-06T12:51:35.828Z</published>
    <updated>2023-04-09T08:15:01.707Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ubuntu安装搜狗输入法"><a href="#ubuntu安装搜狗输入法" class="headerlink" title="ubuntu安装搜狗输入法"></a>ubuntu安装搜狗输入法</h1><h2 id="一、安装fcitx"><a href="#一、安装fcitx" class="headerlink" title="一、安装fcitx"></a>一、安装fcitx</h2><ul><li><p>sudo apt-get install fcitx-bin </p></li><li><p>第一步，安装sogoupinyin_4.0.1.2800_x86_64.deb包；<br>通过命令行重新安装搜狗输入法，安装包官网下载链接<br>sudo dpkg –i sogoupinyin_4.0.1.2800_x86_64.deb<br>安装中文支持包</p></li><li><p>打开setting－&gt; Region &amp; Lannguage -&gt; InputSource下的Manage installation Language</p></li><li><p>点击Installation/ Remove Language<br>勾选中文（简体），并点击应用</p></li><li><p>keyboard input method system选择：fcitx<br>————————————————<br>点击应用到全局，然后重启</p></li></ul><h2 id="二、具体操作"><a href="#二、具体操作" class="headerlink" title="二、具体操作"></a>二、具体操作</h2><h3 id="2-1、第一步"><a href="#2-1、第一步" class="headerlink" title="2.1、第一步"></a>2.1、第一步</h3><ul><li>1、通过命令行更新系统（如果因网络连接问题无法更新，可以选择换源）</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get upgrade</span><br></pre></td></tr></table></figure><ul><li>2、通过命令行安装aptitude</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install aptitude   </span><br></pre></td></tr></table></figure><ul><li>3、通过命令行利用aptitude 安装fcitx、qt</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo aptitude install fcitx-bin fcitx-table fcitx-config-gtk fcitx-config-gtk2 fcitx-frontend-all</span><br><span class="line">sudo aptitude install qt5-default qtcreator qml-module-qtquick-controls2</span><br></pre></td></tr></table></figure><ul><li><p>4、如果右上角没有出现fcitx，在终端中输入im-config进行配置</p></li><li><p>5、通过命令行重新安装搜狗输入法</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo dpkg –i sogoupinyin_4.0.1.2800_x86_64.deb</span><br></pre></td></tr></table></figure><h3 id="2-2、第二步"><a href="#2-2、第二步" class="headerlink" title="2.2、第二步"></a>2.2、第二步</h3><ul><li>1、安装依赖。因为我之前安装好deb包后直接以为安装完成了，忽略了第二步要安装依赖。（这步骤很关键）<br>安装官网给出的两条命令，在终端执行</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install libqt5qml5 libqt5quick5 libqt5quickwidgets5 qml-module-qtquick2</span><br><span class="line"></span><br><span class="line">sudo apt install libgsettings-qt1</span><br></pre></td></tr></table></figure><ul><li>2、最后卸载ibus </li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get purge ibus</span><br></pre></td></tr></table></figure><ul><li>3、重启完成即可使用（如果没有，需在右上角fcitx配置中添加搜狗输入法）<br>————————————————</li></ul>]]></content>
    
    
    <summary type="html">ubuntu按装搜狗输入法</summary>
    
    
    
    <category term="SF" scheme="https://aixiaocainiao.github.io/categories/SF/"/>
    
    
    <category term="ubuntu" scheme="https://aixiaocainiao.github.io/tags/ubuntu/"/>
    
    <category term="搜狗输入法" scheme="https://aixiaocainiao.github.io/tags/%E6%90%9C%E7%8B%97%E8%BE%93%E5%85%A5%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>blog记录流程</title>
    <link href="https://aixiaocainiao.github.io/posts/e258dd8e.html"/>
    <id>https://aixiaocainiao.github.io/posts/e258dd8e.html</id>
    <published>2023-04-05T11:30:03.694Z</published>
    <updated>2023-04-09T08:21:39.847Z</updated>
    
    <content type="html"><![CDATA[<h1 id="hexo-blog教程"><a href="#hexo-blog教程" class="headerlink" title="hexo-blog教程"></a>hexo-blog教程</h1><h2 id="一、流程"><a href="#一、流程" class="headerlink" title="一、流程"></a>一、流程</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">g 底部 gg顶部</span><br><span class="line">cmd </span><br><span class="line">然后</span><br><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br><span class="line">cnpm install hexo-cli -g</span><br><span class="line">创建目录:</span><br><span class="line">cd blog</span><br><span class="line">cnpm install -g hexo -cli</span><br><span class="line">hexo init</span><br><span class="line">hexo s</span><br><span class="line"></span><br><span class="line">hexo n 博客名字</span><br><span class="line">cd _posts/</span><br><span class="line">ls</span><br><span class="line">vim 博客 进行编辑</span><br><span class="line">cd ..</span><br><span class="line">cd .. 回退到blog文件夹</span><br><span class="line">hexo clean</span><br><span class="line">hexo g 部署成功</span><br><span class="line">hexo s</span><br><span class="line">打开给的端口网址</span><br><span class="line">部署到GitHub上</span><br><span class="line">创建同名仓库 aixiaocainiao.github.io(必须是这个名字)</span><br><span class="line">然后回来 </span><br><span class="line">cd blog (保证这个文件夹下）</span><br><span class="line">cnpm install hexo-deployer-git --save</span><br><span class="line">npm install hexo-deployer-git --save</span><br><span class="line">ll</span><br><span class="line">vim _config.yml</span><br><span class="line">esc g 底部 i 编写</span><br><span class="line">type: &#x27;git&#x27;</span><br><span class="line">  repo: https://github.com/aixiaocainiao/aixiaocainiao.github.io.git</span><br><span class="line">  branch: main</span><br><span class="line">hexo g</span><br><span class="line">hexo s 一下</span><br><span class="line">hexo d 部署到github</span><br><span class="line">此时就可以访问同名网址了</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> 页脚不行的</span><br></pre></td></tr></table></figure><h2 id="二、密匙"><a href="#二、密匙" class="headerlink" title="二、密匙"></a>二、密匙</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">见password那篇 第四篇文章 加密设置</span><br></pre></td></tr></table></figure><h2 id="三、可用的url图片可以借助于云图床"><a href="#三、可用的url图片可以借助于云图床" class="headerlink" title="三、可用的url图片可以借助于云图床"></a>三、可用的url图片可以借助于云图床</h2><h3 id="3-1图片引入"><a href="#3-1图片引入" class="headerlink" title="3.1图片引入"></a>3.1图片引入</h3><ul><li><p>安装成功后可在【C:/Hexo-Blog/blog-demo/node_modules】文件夹下找到hexo-theme-butterfly文件夹<br>default_cover:</p><ul><li><p><a href="https://picsum.photos/id/1018/470/315">https://picsum.photos/id/1018/470/315</a></p><p><img src="https://picsum.photos/id/1018/470/315" alt="图片url"></p></li><li><p>ttps://picsum.photos/id/1044/470/315</p></li><li><p><img src="https://picsum.photos/id/1044/470/315" alt="图片url"></p></li><li><p><a href="https://picsum.photos/id/1056/470/315">https://picsum.photos/id/1056/470/315</a></p></li></ul><p><img src="https://picsum.photos/id/1056/470/315" alt="图片url"></p><h3 id="3-2解决方法如下："><a href="#3-2解决方法如下：" class="headerlink" title="3.2解决方法如下："></a>3.2解决方法如下：</h3></li></ul><p>1、右击VSCode图标，选择以管理员身份运行；</p><p>2、在vscode终端中执行get-ExecutionPolicy，显示Restricted，状态是禁止的；</p><p>3、这时执行set-ExecutionPolicy RemoteSigned；</p><p>4、再执行get-ExecutionPolicy，显示RemoteSigned，状态解禁，可以运行。</p><ul><li><p>descr: Ubuntu指南</p><pre><code>cover: https://source.fomal.cc/img/default_cover_43.webp</code></pre><p><img src="https://source.fomal.cc/img/default_cover_43.webp" alt="图片url"></p><ul><li><p>descr: 玩转Win10<br>cover: <a href="https://source.fomal.cc/img/default_cover_44.webp">https://source.fomal.cc/img/default_cover_44.webp</a></p></li><li><p><img src="https://source.fomal.cc/img/default_cover_44.webp" alt="图片url"></p></li><li><p>descr: 长篇小说连载</p></li><li><p>cover: <a href="https://source.fomal.cc/img/default_cover_45.webp">https://source.fomal.cc/img/default_cover_45.webp</a></p><p><img src="https://source.fomal.cc/img/default_cover_45.webp" alt="图片url"></p></li><li><p>descr: 个人日记</p></li><li><p>cover: <a href="https://source.fomal.cc/img/default_cover_46.webp">https://source.fomal.cc/img/default_cover_46.webp</a></p><p><img src="https://source.fomal.cc/img/default_cover_46.webp" alt="url"></p></li></ul></li></ul><pre><code>  自定义字体在魔改5 自己还没有执行</code></pre><p>$web-bg = hexo-config(‘background’) &amp;&amp; unquote(hexo-config(‘background’))</p><p> fab fa-qq: <a href="http://wpa.qq.com/msgrd?v=3&amp;uin=1310446718&amp;site=qq&amp;menu=yes">http://wpa.qq.com/msgrd?v=3&amp;uin=1310446718&amp;site=qq&amp;menu=yes</a> || QQ<br> fas fa-envelope-open-text: mailto:1310446718@qq.com || Email</p><p><a href="http://wpa.qq.com/msgrd?v=3&amp;uin=3051247944&amp;site=qq&amp;menu=yes">http://wpa.qq.com/msgrd?v=3&amp;uin=3051247944&amp;site=qq&amp;menu=yes</a></p>]]></content>
    
    
    <summary type="html">关于hexo搭建blog的记录流程</summary>
    
    
    
    <category term="SF" scheme="https://aixiaocainiao.github.io/categories/SF/"/>
    
    
    <category term="blog" scheme="https://aixiaocainiao.github.io/tags/blog/"/>
    
  </entry>
  
  <entry>
    <title>C语言学习之malloc</title>
    <link href="https://aixiaocainiao.github.io/posts/58eeb5e1.html"/>
    <id>https://aixiaocainiao.github.io/posts/58eeb5e1.html</id>
    <published>2023-04-05T06:48:44.000Z</published>
    <updated>2023-04-09T08:15:01.650Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、C语言学习之malloc"><a href="#一、C语言学习之malloc" class="headerlink" title="一、C语言学习之malloc"></a>一、C语言学习之malloc</h1><h2 id="1、函数详解"><a href="#1、函数详解" class="headerlink" title="1、函数详解"></a>1、函数详解</h2><ul><li><p>1.函数介绍</p><p>头文件: stdlib.h<br>malloc:<br>函数原型：void * malloc(size_t size);<br>size_t就是unsigned int（无符号整型）</p><p>这个函数的作用就是在动态存储区中分配一个长度为size个字节的连续空间，并返回指向该空间的指针。</p></li><li><p>2.返回参数</p><p>1）如果开辟成功，则返回一个指向开辟好空间的指针。<br>2）如果开辟失败，则返回一个NULL指针，因此malloc的返回值一定要做检查。<br>3）返回值的类型是void * ，所以malloc函数并不知道开辟空间的类型，具体在使用的时候使用者自己来决定。<br>4）如果参数size为0，malloc的行为是标准是未定义的，取决于编译器。</p></li></ul><h2 id="2、动态开辟的空间如何释放和回收呢？"><a href="#2、动态开辟的空间如何释放和回收呢？" class="headerlink" title="2、动态开辟的空间如何释放和回收呢？"></a>2、动态开辟的空间如何释放和回收呢？</h2><ul><li>C语言提供了一个专门完成这个功能的库函数— - free<br>free</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">函数原型：<span class="type">void</span> <span class="title function_">free</span><span class="params">(<span class="type">void</span>* p)</span></span><br></pre></td></tr></table></figure><ul><li><p>free的作用就是释放指针变量p所指向的动态空间，使这部分空间能够重新被利用。</p><p>1）如果参数ptr指向的空间不是动态开辟的，那free函数的行为是未  定义的。<br>2）如果参数 ptr是NULL指针，则函数什么事都不做。</p></li></ul><p>注意： 用malloc申请的空间，里面的内容是随机值，如果不初始化的话，可能就会得到一些意想不到的值；<br>理解：如果参数ptr指向的空间不是动态开辟的，那free函数的行为是未定义的。</p><h1 id="二、C语言学习之calloc"><a href="#二、C语言学习之calloc" class="headerlink" title="二、C语言学习之calloc"></a>二、C语言学习之calloc</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">函数原型：void * calloc(size_t num, size_t size);</span><br></pre></td></tr></table></figure><ul><li>函数的功能是为num 个大小为size的元素开辟一块空间，并且把空间的每个字节初始化为O</li><li>与函数ma1loc的区别只在于calloc会在返回地址之前把申请的空间的每个字节初始化为全0。</li></ul><h1 id="三、数组指针和指针数组学习"><a href="#三、数组指针和指针数组学习" class="headerlink" title="三、数组指针和指针数组学习"></a>三、数组指针和指针数组学习</h1><ul><li><p>数组指针：是指针</p></li><li><p>~~~c<br>例如:int (<em>p)[10] = &arr;<br>我们已经熟悉︰<br>整形指针 : int</em> i pint; 能够指向整形数据的指针。<br>浮点型指针 : float* pf; 能够指向浮点型数据的指针。<br>那数组指针应该是︰能够指向数组的指针。<br>数组指针和指针数组要区分开来。<br>整型指针— - 指向整型的指针</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">~~~c</span><br><span class="line">int a = 10;</span><br><span class="line">int* pa = &amp;a;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">字符指针-- - 指向字符的指针</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> ch = <span class="string">&#x27;w&#x27;</span>;</span><br><span class="line"><span class="type">char</span>* pc = &amp;ch;</span><br></pre></td></tr></table></figure></li><li><p>数组指针— - 指向数组的指针</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> arr[<span class="number">10</span>] = &#123; <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span> &#125;;</span><br><span class="line"><span class="comment">//int* p = arr;// 数组名是首元素地址</span></span><br><span class="line"><span class="comment">//数组指针 存放数组的指针变量</span></span><br><span class="line"><span class="type">int</span>(*p)[<span class="number">10</span>] = &amp;arr;<span class="comment">//(*p)代表p是指针变量</span></span><br><span class="line"><span class="comment">//该指针指向了一个数组，数组10个元素，每个元素的类型是int</span></span><br><span class="line"><span class="comment">//如果不用括号将*p括起来，写成int* p[10]，这是指针数组</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><pre><code>    函数指针和指针函数</code></pre><h2 id="3-1复习"><a href="#3-1复习" class="headerlink" title="3.1复习"></a>3.1复习</h2><h3 id="3-1常量字符串"><a href="#3-1常量字符串" class="headerlink" title="3.1常量字符串"></a>3.1常量字符串</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span></span><br><span class="line"><span class="comment">//arr = &amp;arr[0] 数组首地址</span></span><br><span class="line"><span class="comment">//&amp;arr 数组的地址</span></span><br><span class="line"><span class="number">2.</span></span><br><span class="line"><span class="type">char</span>* ps = <span class="string">&quot;bacf&quot;</span>;  最好写成<span class="type">const</span> <span class="type">char</span>* ps = <span class="string">&quot;bacf&quot;</span> </span><br><span class="line">常量区中的内容在整个程序的执行期间是不允许被修改的，且同一份常量字符串只会创建一份，不会重复创建存储。   </span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span>* ps = <span class="string">&quot;bacf&quot;</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,ps);</span><br><span class="line">这种方式是将字符串的首地址放到指针中，通过指针可以找到该字符串（千万不要理解成将字符串放到指针里面去，这是不可能的）。（类似与数组名就是首元素地址，但是跟数组还是有所区别的，这个字符串是一个常量字符串，无法被改变</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1:</span></span><br><span class="line"><span class="type">char</span> arr[<span class="number">5</span>];</span><br><span class="line"><span class="type">char</span>(*pa)[<span class="number">5</span>] = &amp;arr;</span><br><span class="line"><span class="comment">//2:</span></span><br><span class="line"><span class="type">char</span>* ch[<span class="number">8</span>];</span><br><span class="line"><span class="type">char</span>* (*pc)[<span class="number">8</span>] = &amp;ch;</span><br><span class="line"><span class="comment">//3:</span></span><br><span class="line"><span class="type">int</span>(*p)[<span class="number">10</span>];</span><br><span class="line"><span class="comment">//解释: p先和*结合，说明p是一个指针变量，然后指着指向的是一个大小为10个整型的数组。所以p是一个指针，指向一个数组，叫数组指针。</span></span><br><span class="line"><span class="comment">//这里要注意:[]的优先级要高于*号的，所以必须加上(）来保证p先和*结合。</span></span><br></pre></td></tr></table></figure><h3 id="3-2函数指针"><a href="#3-2函数指针" class="headerlink" title="3.2函数指针"></a>3.2函数指针</h3><ul><li>1.注意：<pre><code>&amp; 函数名 和 函数名均表示函数的地址！数组名 != &amp;数组名函数名 == &amp;函数名</code></pre></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> (*pd)(<span class="type">int</span>,<span class="type">int</span>) = &amp;Sdd;pd的类型是<span class="type">int</span> (*)(<span class="type">int</span>,<span class="type">int</span>)</span><br><span class="line"><span class="type">int</span> sum = (*pd)(<span class="number">2</span>,<span class="number">3</span>) 和 <span class="type">int</span> sum = pd(<span class="number">2</span>,<span class="number">30</span>)一样的</span><br><span class="line">注意:</span><br><span class="line">既然这个地方的 * 可以省略，那么我们在使用的时候 * 可以用多个，也可以不要， * 号在这里就是一个摆设，这个地方放 * 是为了方便理解+</span><br></pre></td></tr></table></figure><ul><li>学习指针。<br>函数指针数组<br>那要把函数的地址存到一个数组中，那这个数组就叫函数指针数组</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">- <span class="type">int</span> (*parr1[<span class="number">10</span>])();</span><br><span class="line">  <span class="type">int</span>* parr2[<span class="number">10</span>]();</span><br><span class="line">  <span class="type">int</span> (*)() parr3[<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">关于C语言的动态内存malloc和callo的用法</summary>
    
    
    
    <category term="C++" scheme="https://aixiaocainiao.github.io/categories/C/"/>
    
    
    <category term="C++" scheme="https://aixiaocainiao.github.io/tags/C/"/>
    
    <category term="C" scheme="https://aixiaocainiao.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>加密密匙</title>
    <link href="https://aixiaocainiao.github.io/posts/b2ffbe6c.html"/>
    <id>https://aixiaocainiao.github.io/posts/b2ffbe6c.html</id>
    <published>2023-04-05T06:46:40.121Z</published>
    <updated>2023-04-09T08:15:01.666Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="37e78433fe3ddf725602f18fbc77b9bfc1f0ee23af6fb06a734d132daa581b21">bf77d8818ecf38b4f77c36bf1e782c18400938b11182f74fdc8049505448fdd03358737dcdbe8fdb4266cd68a1bd2d72dbf73d66ebb1288b086ac61fb16eb464e39e35bd76e0791366847e652a037f9bd84553b777dba89dcbac3ad2392b74203c2dde2b42e9adc25955d0000b7362b93718b95dec29696847937691d03565f8d2a984615fa4793c76fd452377ac29f40553dd561595a8f7b256f81d6630c6f1a239c4b9119df132c2a09e5d7216bd02538980f14e8a625b34dee3cada145e4eec1dc01b3cb1ce24c527f74264af1b0e3ab704c52d30ae8ba301e0321c5c72eef1173b2eb4e1488665272a89bcf57a57c002a4e003a99f727b26e52432e1fa1ef2462da994e00a9a0ef4493d4832788d09878cfb6bf8eeb83217717356a1d2f7ddc06e2e84533c370afa12b10e96ef1e4c90d08b8c096bfcb5e24644d31409f43eb1027c155729c53fdaf0a47341c169398bf468b075fd363d65b594d89f2f7712d6a24ed956967f2a973cb164ae93ba9a28a95992151b89ad31e871ef520d58e70eff1be290055654b61098530bb044f7899b1f53b2721d377ceb49fec605d60a14fae9ce7ce23e0269210f7cbfd91e5959ed22b3e60308cc8448f01830e7330d90cb901c05838aca16acf3c7cf0094edef56f53b37d4e54e42818a6ffb563b6768487b27d20042a9743d0fbcc25e35241e357127f650e06e949f0f2093447a1d2f169a410644711a9f8ec5a3111dd6a932e0863b062ec7c3cd4546e57bdeb77929ad1034c6c70fce17929528fdb80fb70bfe068d73892e3eb0abadab147f6657a0e9395609abb3d44eb09efbd4929d3d8b36ebb8e450578a2a12f7e5c3fc5bac59c91bcf936e8986919ba5ef1dcc01ff3ff4a4b07c532e8df0a4a3002185fc0527e142ad0bffcb35087d218464622103abda3c178d0621a32dd11e96a676d834119a49c4e7bd4f7f2fac3837b71d315835b3c95853581ec5dd642015771e0d63c1a2114c792f72c0a1f52e5b8ed94d7b212241a761c4d817e4b2875844663dc9cd969cbd4f1a357e79deed27c6d6e9300854dfec5026673d228ebb91df18fd3f3b7d8b6d44241a78e11a90776594e255dfb641925a74c90b42161ff931e2588d2624bf047cef2ad84f51cd1f0843992628fed4d6ff06ee106877f5e9949daf05e88e5bd1cdb5b52bf1db822b2d916ab29c62bbea7a676c773cbd2e381c04a956f95a38c7857e094250b2edece7385389492b902d022e7320d4ef2f6cf18632f9e4336ba000da9acbf9019c3e85edd81f98cbf1426a2ff1547d4f5a0e5bdb6ed0f57e46f70d75a5e637358b02748258f33b21018b67d37d4fe3064d5c416612630d0ba8efd33427c187dbd5a1d9446633ce3d0abb6f7a11a3d9196c56dfcdb2659dddfc7fddb3357d48b2e8d55e6394f2198d34ca5bc55d1493a9e4e50f0cc10877ab7d46f187c533dc02928f15a0544c77fbeb0a7cbf2623e1a2f1d3178b371438b97f2222e1ef944990d0030b8f879af88e7ce8f9ea51505f6f18790e24b573b5f574f75dafbc359f135a0cf3a7fa34f565553856dc55145a075a4aa61424a7e17e5f565ee9e8c5d7679fa8bda0c1e9e5921fc646119c2175319a12fcdb30cdba76b76552916173cc27b721d47cbb31720b643b738df9799cc258a03949ddbb8325e47777266a1f0c5a8d39b40773dd38beea42a8ed7cc3b1a90816ac020a1db300cdb0067c790386e7fb5144eb82c2be43b93c5fdbcebf7a7dbf9da0b4466e6c479679f3b9157ddf032731aa92f73d1456c6e9edd7cde2a0dcad4ba29430b98a5cc3c78cb2b4bbaf46596d1f8709a52bf02e992ef96e3303011be25cf75856e1b0b9ed516fc7aab2de1a8d46d69a795ed1f216c7ff127a1fb6e0f812ef05bbb66888a02512237200b29345c38dbf45d7cb3dba2867c0fa1dd977a45e963627630d967df92808d9e816094055cf315a293da08a2fe0bc94a4186bc5cbad6f657b3215c5805f9f4cfa10ae02e1f636b5c2e7a38c63c53c2fd24f55ab921379</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好, 这里需要密码.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">有东西被加密了, 请输入密码查看.</summary>
    
    
    
    <category term="SF" scheme="https://aixiaocainiao.github.io/categories/SF/"/>
    
    
    <category term="token" scheme="https://aixiaocainiao.github.io/tags/token/"/>
    
  </entry>
  
  <entry>
    <title>C语言学习-void*详解</title>
    <link href="https://aixiaocainiao.github.io/posts/5e2c870d.html"/>
    <id>https://aixiaocainiao.github.io/posts/5e2c870d.html</id>
    <published>2023-04-05T05:42:28.446Z</published>
    <updated>2023-04-10T14:08:37.759Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、void-指针"><a href="#一、void-指针" class="headerlink" title="一、void*指针"></a>一、void*指针</h1><h2 id="1、C语言void-指针用法"><a href="#1、C语言void-指针用法" class="headerlink" title="1、C语言void*指针用法"></a>1、C语言void*指针用法</h2><h3 id="1-1、void-指针类型用来定义变量"><a href="#1-1、void-指针类型用来定义变量" class="headerlink" title="1.1、void*指针类型用来定义变量"></a>1.1、void*指针类型用来定义变量</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">注意:void*指针表示无类型指针 4字节</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">void* p;</span><br><span class="line">p = NULL;</span><br></pre></td></tr></table></figure><h3 id="1-2、C语言专用语法"><a href="#1-2、C语言专用语法" class="headerlink" title="1.2、C语言专用语法"></a>1.2、C语言专用语法</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">注意:</span><br><span class="line">void*指针（无类型指针）但可以指向任何一种类型的数据，即其他类型的指针可以不通过强制类型转换直接赋值给void*指针</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> *p;</span><br><span class="line"><span class="type">int</span>* a;</span><br><span class="line">p =a;</span><br><span class="line"><span class="type">float</span> *f;</span><br><span class="line">p = g;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">注意:在 C 语言当中，对指针类型的转换要求不是那么严苛，可以不通过强制转换就可以进行相互间的赋值</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>* a = <span class="literal">NULL</span>;</span><br><span class="line"><span class="type">float</span>* b= <span class="literal">NULL</span>;</span><br><span class="line"><span class="type">char</span>* c = <span class="literal">NULL</span>;</span><br><span class="line">a = b;</span><br><span class="line">b = c;</span><br><span class="line">c = a;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">注意:</span><br><span class="line">虽然编译器（gcc 6.3版本）不会显示有错误，编译照常会通过。只是会给出类似下面的警告：</span><br><span class="line">警告 C4133 “=”: 从“float *”到“int *”的类型不兼容</span><br></pre></td></tr></table></figure><h2 id="2、C-void-指针用法"><a href="#2、C-void-指针用法" class="headerlink" title="2、C++void*指针用法"></a>2、C++void*指针用法</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">注意：</span><br><span class="line">而在 C++ 当中，这一点要求就明显比较严格了。它不允许两个不同的类型指针相互赋值，除了 void * 指针。</span><br></pre></td></tr></table></figure><h3 id="2-1、c语言和C-不同之处"><a href="#2-1、c语言和C-不同之处" class="headerlink" title="2.1、c语言和C++不同之处"></a>2.1、c语言和C++不同之处</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1、其他的类型指针可以把值直接赋给 void * 指针，但反过来，void * 指针的值想要赋值给其他类型的指针，也需要通过强制转换。</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ex:</span><br><span class="line"><span class="type">void</span> *p = <span class="literal">NULL</span>;</span><br><span class="line"><span class="type">int</span>* a = (<span class="type">int</span>*)p;<span class="comment">//通过</span></span><br><span class="line"><span class="type">float</span> *b = p;<span class="comment">//错误</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2、void * 指针还有一个非常强大之处，在函数定义的时候，作为参数。当调用的时候，无论什么类型的类型指针或数组都可以正常运行。</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">test</span><span class="params">(<span class="type">void</span>* dst)</span>&#123; &#125;;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> *c = <span class="string">&quot;123456&quot;</span>;</span><br><span class="line">    <span class="type">int</span> arr[] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;;</span><br><span class="line">    test(c)；  <span class="comment">//正常编译</span></span><br><span class="line">    test(arr);<span class="comment">//正常编译</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">注意:</span><br><span class="line">不过 void * 指针也有一个致命的缺点，当对该指针进行算数操作，就会显示以下这个错误。</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="type">void</span> *p;</span><br><span class="line">   p++;<span class="comment">//错误</span></span><br><span class="line">   <span class="comment">//表达式必须是指向完整对象类型的指针</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">根据 ANSI C 标准规定，进行算数操作的指针，必须明确知道该指针所指向的数据类型大小。也就是所指向的数据，都必须是具体的类型，而不是空泛的 void 类型</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">C和C++关于void*指针的用法学习</summary>
    
    
    
    <category term="C++" scheme="https://aixiaocainiao.github.io/categories/C/"/>
    
    
    <category term="C++" scheme="https://aixiaocainiao.github.io/tags/C/"/>
    
    <category term="C" scheme="https://aixiaocainiao.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>office windows 破解教程</title>
    <link href="https://aixiaocainiao.github.io/posts/ba300709.html"/>
    <id>https://aixiaocainiao.github.io/posts/ba300709.html</id>
    <published>2023-04-04T14:12:08.000Z</published>
    <updated>2023-04-09T08:21:39.861Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、使用教程"><a href="#一、使用教程" class="headerlink" title="一、使用教程"></a>一、使用教程</h1><h2 id="1、下载链接"><a href="#1、下载链接" class="headerlink" title="1、下载链接"></a>1、下载链接</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">点击下方超链接打开百度网盘，保存下载安装一气呵成</span><br><span class="line">通过百度网盘分享的文件：HEU_KMS_…</span><br><span class="line">链接:https://pan.baidu.com/s/1jH9IfEJzWwDvWC5hPCjKHg?pwd=6gu7 </span><br><span class="line">提取码:6gu7</span><br><span class="line">复制这段内容打开「百度网盘APP 即可获取」</span><br></pre></td></tr></table></figure><p><a href="https://pan.baidu.com/s/1jH9IfEJzWwDvWC5hPCjKHg?pwd=6gu7">软件百度网盘链接</a></p><h2 id="2、破解流程"><a href="#2、破解流程" class="headerlink" title="2、破解流程"></a>2、破解流程</h2><h3 id="2-1进入软件页面"><a href="#2-1进入软件页面" class="headerlink" title="2.1进入软件页面"></a>2.1进入软件页面</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">综述：</span><br><span class="line">进入页面后 查看windows状态有个小^ 点击 选择你想要激活的软件</span><br><span class="line">eg:点击 查看office状态 之后 选中上面的开始按钮 </span><br><span class="line">然后会有一个进度条  可能有点慢 等到100% 之后 会出现激活的时长</span><br><span class="line">一般为半年  半年之后再次激活使用即可</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">软件如图所示：</span><br></pre></td></tr></table></figure><p><img src="https://c.1ovv.com/2023/04/04/oy507.png" alt="软件页面"></p><h3 id="2-2选中以下按钮"><a href="#2-2选中以下按钮" class="headerlink" title="2.2选中以下按钮"></a>2.2选中以下按钮</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">点击查看office激活状态</span><br></pre></td></tr></table></figure><p><img src="https://c.1ovv.com/2023/04/04/oyjS2.png" alt="选中查看office激活状态选项"></p><h3 id="2-3点击开始"><a href="#2-3点击开始" class="headerlink" title="2.3点击开始"></a>2.3点击开始</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">点击开始 </span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">详解:</span><br><span class="line">软件会自动识别windows和office的激活状态 一般软件会自动激活windows和office(也就是说选中查看office激活状态和查看windows激活状态都是一样的)</span><br></pre></td></tr></table></figure><p><img src="https://c.1ovv.com/2023/04/04/oyTuP.png" alt="出现下面弹框"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">恭喜你 成功完成破解</span><br><span class="line">180天之后再来找我吧 </span><br><span class="line">当然网上有直接破解的 你可以再去找找哦</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">一个自动检测系统 office的破解权限 并且自动破解</summary>
    
    
    
    <category term="SF" scheme="https://aixiaocainiao.github.io/categories/SF/"/>
    
    
    <category term="pojie" scheme="https://aixiaocainiao.github.io/tags/pojie/"/>
    
  </entry>
  
  <entry>
    <title>MarkDown学习</title>
    <link href="https://aixiaocainiao.github.io/posts/cd8aec95.html"/>
    <id>https://aixiaocainiao.github.io/posts/cd8aec95.html</id>
    <published>2023-04-04T12:41:52.000Z</published>
    <updated>2023-04-09T08:15:01.670Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MarkDown语法快速入门"><a href="#MarkDown语法快速入门" class="headerlink" title="MarkDown语法快速入门"></a>MarkDown语法快速入门</h1><h2 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//代码块语法</span></span><br><span class="line">~~~java 回车</span><br><span class="line">~~~shell 回车</span><br><span class="line">    </span><br></pre></td></tr></table></figure><p><strong>2.shell代码</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">//Linux下spring的用法</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">java -jar blog start</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>1.java代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h2 id="2-标题"><a href="#2-标题" class="headerlink" title="2.标题"></a>2.标题</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//标题语法</span></span><br><span class="line"># 一级标题</span><br><span class="line">## 二级标题</span><br><span class="line">###三级标题</span><br><span class="line">#### 四级标题</span><br><span class="line">##### 五级标题</span><br><span class="line">###### 六级标题</span><br><span class="line">    </span><br></pre></td></tr></table></figure><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6><h2 id="3-字体"><a href="#3-字体" class="headerlink" title="3.字体"></a>3.字体</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//加粗</span></span><br><span class="line">**内容**</span><br><span class="line"><span class="comment">//代码高亮提醒</span></span><br><span class="line">==内容==</span><br><span class="line"><span class="comment">//删除线</span></span><br><span class="line">~~内容~~</span><br><span class="line"><span class="comment">//斜体</span></span><br><span class="line">*内容*</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>//加粗<br><strong>内容</strong><br>//代码高亮提醒<br>== 内容 ==</p><p>//删除线<br><del>内容</del><br>//斜体<br><em>内容</em></p><h2 id="4-引用"><a href="#4-引用" class="headerlink" title="4.引用"></a>4.引用</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引用语法</span></span><br><span class="line">&gt;内容</span><br><span class="line">&gt;作者：芳子</span><br><span class="line">&gt;&gt;作者：芳子</span><br><span class="line">&gt;&gt;&gt;作者：芳子</span><br></pre></td></tr></table></figure><p>//引用语法</p><blockquote><p>内容<br>作者：芳子</p><blockquote><p>作者：芳子</p><blockquote><p>作者：芳子</p></blockquote></blockquote></blockquote><h2 id="5-分割线"><a href="#5-分割线" class="headerlink" title="5.分割线"></a>5.分割线</h2><figure class="highlight plaintext"><figcaption><span>a</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//分割线</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">//分割线2</span><br><span class="line">***</span><br></pre></td></tr></table></figure><hr><hr><h2 id="6-图片插入"><a href="#6-图片插入" class="headerlink" title="6.图片插入"></a>6.图片插入</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在线图片</span></span><br><span class="line">！[我的照片(名字)](地址)</span><br><span class="line">！[我的照片](/img/me.png)  --图片路径</span><br><span class="line"><span class="comment">//</span></span><br></pre></td></tr></table></figure><p><img src="https://picsum.photos/1920/942" alt="照片"></p><p><img src="C:\Users\18338\Pictures\weixin.jpg" alt="照片"></p><h2 id="7、超链接"><a href="#7、超链接" class="headerlink" title="7、超链接"></a>7、超链接</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//超链接语法</span></span><br><span class="line">[我的github地址](https:<span class="comment">//aixiaocainiao.github.io/)</span></span><br></pre></td></tr></table></figure><p>//超链接语法<br><a href="https://aixiaocainiao.github.io/">我的github地址</a></p><h2 id="8-列表"><a href="#8-列表" class="headerlink" title="8.列表"></a>8.列表</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//无序列表</span></span><br><span class="line">- 目录<span class="number">1</span></span><br><span class="line">- 目录<span class="number">2</span></span><br><span class="line">- 目录<span class="number">3</span></span><br><span class="line">短gang -</span><br><span class="line">按住空格</span><br><span class="line">- </span><br><span class="line"><span class="comment">//有序列表</span></span><br><span class="line">数字键+.+名称</span><br></pre></td></tr></table></figure><ul><li><p>无序列表</p></li><li><p>目录1</p></li><li>目录2</li><li>目录3</li></ul><p>1.首页</p><p>2.目录</p><h2 id="9-表格"><a href="#9-表格" class="headerlink" title="9.表格"></a>9.表格</h2><div class="table-container"><table><thead><tr><th>成绩</th><th>语文</th><th>数学</th></tr></thead><tbody><tr><td></td><td>78</td><td>88</td></tr><tr><td></td><td>25</td><td>56</td></tr><tr><td></td><td>89</td><td>84</td></tr></tbody></table></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//杂七杂八的语法</span></span><br><span class="line">ctrl+/ 可以看到所有的源码</span><br><span class="line">    </span><br><span class="line"><span class="comment">//表格插入</span></span><br><span class="line">直接鼠标右键</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;MarkDown语法快速入门&quot;&gt;&lt;a href=&quot;#MarkDown语法快速入门&quot; class=&quot;headerlink&quot; title=&quot;MarkDown语法快速入门&quot;&gt;&lt;/a&gt;MarkDown语法快速入门&lt;/h1&gt;&lt;h2 id=&quot;代码块&quot;&gt;&lt;a href=&quot;#代码</summary>
      
    
    
    
    <category term="SF" scheme="https://aixiaocainiao.github.io/categories/SF/"/>
    
    
    <category term="MarkDown" scheme="https://aixiaocainiao.github.io/tags/MarkDown/"/>
    
  </entry>
  
  <entry>
    <title>我的第一篇博客文章</title>
    <link href="https://aixiaocainiao.github.io/posts/b24dd347.html"/>
    <id>https://aixiaocainiao.github.io/posts/b24dd347.html</id>
    <published>2023-04-02T12:57:47.000Z</published>
    <updated>2023-04-09T08:15:01.659Z</updated>
    
    <content type="html"><![CDATA[<h2 id="这是第一篇文章"><a href="#这是第一篇文章" class="headerlink" title="这是第一篇文章"></a>这是第一篇文章</h2><div class="note default simple"><p>nice to meet you! My baby!</p></div>]]></content>
    
    
    <summary type="html">这是第一篇文章</summary>
    
    
    
    <category term="QT" scheme="https://aixiaocainiao.github.io/categories/QT/"/>
    
    
    <category term="QT" scheme="https://aixiaocainiao.github.io/tags/QT/"/>
    
  </entry>
  
  <entry>
    <title>我的第二篇博客文章</title>
    <link href="https://aixiaocainiao.github.io/posts/c1539048.html"/>
    <id>https://aixiaocainiao.github.io/posts/c1539048.html</id>
    <published>2023-04-02T12:57:47.000Z</published>
    <updated>2023-04-09T08:15:01.674Z</updated>
    
    <content type="html"><![CDATA[<h2 id="这是第二篇文章"><a href="#这是第二篇文章" class="headerlink" title="这是第二篇文章"></a>这是第二篇文章</h2>]]></content>
    
    
    <summary type="html">这是第二篇文章</summary>
    
    
    
    <category term="C++" scheme="https://aixiaocainiao.github.io/categories/C/"/>
    
    
    <category term="标签2" scheme="https://aixiaocainiao.github.io/tags/%E6%A0%87%E7%AD%BE2/"/>
    
  </entry>
  
  <entry>
    <title>我的第三篇博客文章</title>
    <link href="https://aixiaocainiao.github.io/posts/6f36dd99.html"/>
    <id>https://aixiaocainiao.github.io/posts/6f36dd99.html</id>
    <published>2023-04-02T12:57:47.000Z</published>
    <updated>2023-04-09T08:15:01.662Z</updated>
    
    <content type="html"><![CDATA[<h2 id="这是第三篇文章"><a href="#这是第三篇文章" class="headerlink" title="这是第三篇文章"></a>这是第三篇文章</h2>]]></content>
    
    
    <summary type="html">这是第三篇文章</summary>
    
    
    
    <category term="Python" scheme="https://aixiaocainiao.github.io/categories/Python/"/>
    
    
    <category term="python" scheme="https://aixiaocainiao.github.io/tags/python/"/>
    
  </entry>
  
</feed>
