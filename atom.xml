<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>云知</title>
  
  <subtitle>人们总说来日方长,吾愿早日陪伴</subtitle>
  <link href="https://aixiaocainiao.github.io/atom.xml" rel="self"/>
  
  <link href="https://aixiaocainiao.github.io/"/>
  <updated>2023-05-16T04:52:26.477Z</updated>
  <id>https://aixiaocainiao.github.io/</id>
  
  <author>
    <name>fang</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>python的学习</title>
    <link href="https://aixiaocainiao.github.io/posts/baed1cc7.html"/>
    <id>https://aixiaocainiao.github.io/posts/baed1cc7.html</id>
    <published>2023-05-13T12:03:00.842Z</published>
    <updated>2023-05-16T04:52:26.477Z</updated>
    
    <content type="html"><![CDATA[<h1 id="python中try的用法"><a href="#python中try的用法" class="headerlink" title="python中try的用法"></a>python中try的用法</h1><ul><li><p>把你要测试的代码放到try  except之间  </p></li><li><p>如果代码正确 执行try里面的内容 和else里面的内容 执行 finnaly里面的内容 </p></li><li><p>如果代码错误，执行except里面的内容  执行finnaly里面的内容 </p></li><li><p>这样看来finally里面的内容完全可以由程序的下面代码直接写和执行</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">\# except NameError:  出现了未定义的变量 value = 8/b   b未定义</span><br><span class="line"></span><br><span class="line">\# except ZeroDivisionError:   zero 除数为0了</span><br></pre></td></tr></table></figure><h2 id="1、正常写法"><a href="#1、正常写法" class="headerlink" title="1、正常写法"></a>1、正常写法</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">try:</span><br><span class="line">    value = 8/4</span><br><span class="line">    print(value)</span><br><span class="line">except:</span><br><span class="line">    print(&quot;error&quot;)</span><br><span class="line">else:</span><br><span class="line">    print(&quot;正常&quot;)</span><br><span class="line">finally:</span><br><span class="line">    print(&quot;一切代码执行完毕&quot;)</span><br></pre></td></tr></table></figure><h2 id="2、异常测试"><a href="#2、异常测试" class="headerlink" title="2、异常测试"></a>2、异常测试</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">try:</span><br><span class="line">    value = 8/0</span><br><span class="line">    print(value)</span><br><span class="line">except ZeroDivisionError:</span><br><span class="line">    print(&quot;ZeroDivisionErro&quot;)</span><br><span class="line">except NameError:</span><br><span class="line">    print(&quot;NameError&quot;)</span><br><span class="line">else:</span><br><span class="line">    print(&quot;正常&quot;)</span><br></pre></td></tr></table></figure><h2 id="3、打印异常信息"><a href="#3、打印异常信息" class="headerlink" title="3、打印异常信息"></a>3、打印异常信息</h2><ul><li>打印异常信息  发生在代码的第几行  细节信息</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import traceback</span><br><span class="line"></span><br><span class="line">try:</span><br><span class="line">    value = 8/0</span><br><span class="line">    print(value)</span><br><span class="line">except:</span><br><span class="line">    info = traceback.format_exc()</span><br><span class="line">    print(info)</span><br><span class="line">    print(type(info))</span><br><span class="line">    </span><br></pre></td></tr></table></figure><h1 id="python中格式化字符串的写法"><a href="#python中格式化字符串的写法" class="headerlink" title="python中格式化字符串的写法"></a>python中格式化字符串的写法</h1><p># 格式化字符串</p><p>“””</p><p>​    方式1</p><p>​    print(“姓名为:”+self.name+”id为:”+self.id)</p><p>​    方式2  format方法</p><p>​    print(“姓名为:{0},id为:{1:.2f}”.format(self.name,self.id))</p><p>​    方式3 </p><p>​    print(f”月薪为:{self.monthly_salary:.2f}”)</p><p>​    </p><p>​    建议选用方式3和方式2   </p><p>​    {1:.2f}   </p><p>.2f保留两位小数  中间用:(冒号)分割</p><p>“””</p><p>“””</p><p>“””</p><h1 id="python类的用法-一、类的创建"><a href="#python类的用法-一、类的创建" class="headerlink" title="python类的用法#一、类的创建"></a>python类的用法#一、类的创建</h1><p>#外部不能访问私有属性和私有方法，自然Cat.__cid是会报错的</p><p>class Cat:</p><p>​    #属性</p><p>​    color = ‘black’</p><p>​    #私有属性</p><p>​    __cld = ‘1’</p><p>​    #构造方法</p><p>​    def <strong>init</strong>(<em>self</em>,<em>name</em>):</p><p>​        <em>self</em>.name = <em>name</em></p><p>​    #自定义方法</p><p>​    def eat(<em>self</em>,<em>food</em>):</p><p>​        <em>self</em>.food = <em>food</em></p><p>​        print(<em>self</em>.name,’正在吃’ + <em>food</em>)</p><p>​    #私有方法</p><p>​    def __run(<em>self</em>):</p><p>​        pass</p><p>print(‘color —&gt;’,Cat.color)</p><p>#二、对象</p><p>#创建对象</p><p>c=Cat(‘Tom’)</p><p>#访问属性</p><p>print(‘name—&gt;’,c.name)</p><p>print(‘color—&gt;’,c.color)</p><p>#调用方法</p><p>c.eat(‘鱼’)</p><p>#疑惑</p><p># 同样对象 c 不能访问私有属性 <strong>cid 及调用私有方法 </strong>run，</p><p># 那我们会有这样一个疑问，这个私有属性和方法难道定义了却不能用吗？</p><p>#      在内部私有属性和方法是可以被访问和调用的。</p><p>#self.speed是有问题的</p><p>class Cat1:</p><p>​    __cld = ‘1’</p><p>​    def __run(<em>self</em>,<em>speed</em>):</p><p>​        print(‘<strong>cld是’+<em>self</em>.</strong>cld,’以’+<em>speed</em>+’的速度奔跑’)</p><p>​    def run(<em>self</em>,<em>speed</em>):</p><p>​        <em>self</em>.__run(<em>speed</em>)</p><p>c1 = Cat1()</p><p>c1.run(‘50迈’)</p><p>#继承 支持多继承 语法格式</p><p>#class 基类(子类1,子类2):</p><p>#    pass</p><p>#for example</p><p>class PersianCat(Cat):</p><p>​    def <strong>init</strong>(<em>self</em>,<em>name</em>):</p><p>​        <em>self</em>.name = <em>name</em></p><p>​    def eat(<em>self</em>,<em>food</em>):</p><p>​        print(<em>self</em>.name,’正在吃’+<em>food</em>)</p><p>​        </p><p>#加菲猫类</p><p>class GarfieldCat(Cat):</p><p>​    def <strong>init</strong>(<em>self</em>, <em>name</em>):</p><p>​        <em>self</em>.name = <em>name</em></p><p>​    def run(<em>self</em>, <em>speed</em>):</p><p>​        print(<em>self</em>.name, ‘正在以’+<em>speed</em>+’的速度奔跑’)</p><p>#单继承</p><p>class SingleCat(PersianCat):</p><p>​    pass</p><p>#多继承</p><p>class MultiCat(PersianCat,GarfieldCat):</p><p>​    pass</p><p>sc = SingleCat(‘波斯猫1号’)</p><p>sc.eat(‘鱼’)</p><p>mc = MultiCat(‘波斯加菲猫1号’)</p><p>mc.eat(‘鱼’)</p><p>mc.run(‘50迈’)</p><p>#子类重写父类方法</p><p>class SingleCat(PersianCat):</p><p>​    def eat(<em>self</em>,<em>food</em>):</p><p>​        print(<em>self</em>.name,’正在吃’+<em>food</em>,’十分钟’,<em>self</em>.name+’吃饱了’)</p><p>sc = SingleCat(‘波斯猫1号’)</p><p>sc.eat(‘鱼’)</p><p>部分源码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">~~~</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## 1、正常写法</span></span><br><span class="line"></span><br><span class="line">~~~python</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Modelplant</span>:  </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name,sex</span>):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.sex = sex</span><br><span class="line">        self.num_eyes = <span class="number">2</span></span><br><span class="line">               </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">breath</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(self.name+<span class="string">&quot;在呼吸&quot;</span>)  </span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">poop</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(self.name+<span class="string">&quot;在拉屎&quot;</span>) </span><br><span class="line">        </span><br><span class="line"><span class="comment">#    如果子类没有构造函数 这个实例就会调用父类的构造函数  实例也可以调用父类的方法 如果父类和子类都有这个 那么调用子类 如果没有调用父类</span></span><br><span class="line"><span class="comment">#    cat = Cat(&#x27;Joji&#x27;,18)</span></span><br><span class="line"><span class="comment">#    cat.poop()</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Human</span>(<span class="title class_ inherited__">Modelplant</span>):</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, sex</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__(name, sex)</span><br><span class="line">        self.has_tail = <span class="literal">False</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">read</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(self.name+<span class="string">&quot;在阅读&quot;</span>)</span><br><span class="line">         </span><br><span class="line">        </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span>(<span class="title class_ inherited__">Modelplant</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, sex</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__(name, sex)</span><br><span class="line">        self.has_tail = <span class="literal">True</span></span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">scratch_soft</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(self.name+<span class="string">&quot;在抓沙发&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    cat = Cat(<span class="string">&quot;Jilo&quot;</span>,<span class="number">1</span>)</span><br><span class="line">    <span class="built_in">print</span>(cat.name)</span><br><span class="line">    cat.poop()</span><br></pre></td></tr></table></figure><h2 id="2、class继承中构造函数的写法"><a href="#2、class继承中构造函数的写法" class="headerlink" title="2、class继承中构造函数的写法"></a>2、class继承中构造函数的写法</h2><p>源码如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Worker</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name,<span class="built_in">id</span></span>):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.<span class="built_in">id</span> = <span class="built_in">id</span></span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">print_info</span>(<span class="params">self</span>):   </span><br><span class="line">      </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;姓名为:<span class="subst">&#123;self.name&#125;</span> id为:<span class="subst">&#123;self.<span class="built_in">id</span>&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;姓名为:&#123;0&#125;,id为:&#123;1&#125;&quot;</span>.<span class="built_in">format</span>(self.name,self.<span class="built_in">id</span>))</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">calculate_monthly_pay</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">FullTimeEmployee</span>(<span class="title class_ inherited__">Worker</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, <span class="built_in">id</span>,monthly_salary</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__(name, <span class="built_in">id</span>)</span><br><span class="line">        self.monthly_salary = monthly_salary</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">calculate_monthly_pay</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;月薪为:<span class="subst">&#123;self.monthly_salary:<span class="number">.2</span>f&#125;</span>&quot;</span>)</span><br><span class="line">        </span><br><span class="line">    </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PartTimeEmployee</span>(<span class="title class_ inherited__">Worker</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, <span class="built_in">id</span>,daily_salary,work_days</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__(name, <span class="built_in">id</span>)</span><br><span class="line">        self.daily_salary = daily_salary</span><br><span class="line">        self.work_days = work_days</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">calculate_monthly_pay</span>(<span class="params">self</span>):</span><br><span class="line">        money = self.work_days * self.daily_salary</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;工资为:<span class="subst">&#123;money&#125;</span>&quot;</span>)</span><br><span class="line">   </span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    full = FullTimeEmployee(<span class="string">&quot;小明&quot;</span>,<span class="number">25</span>,<span class="number">3500</span>)</span><br><span class="line">    full.print_info()</span><br><span class="line">    </span><br><span class="line">    full.calculate_monthly_pay()</span><br><span class="line">    </span><br><span class="line">    part = PartTimeEmployee(<span class="string">&quot;小张&quot;</span>,<span class="number">36</span>,<span class="number">25</span>,<span class="number">22</span>)</span><br><span class="line">    part.print_info()</span><br><span class="line">    </span><br><span class="line">    part.calculate_monthly_pay()</span><br></pre></td></tr></table></figure><p>其中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, <span class="built_in">id</span>,daily_salary,work_days</span>):</span><br><span class="line">       <span class="built_in">super</span>().__init__(name, <span class="built_in">id</span>)</span><br></pre></td></tr></table></figure><p>可以使用父类中的构造 并且自己可以自定义属性</p><h2 id="3、self理解介绍"><a href="#3、self理解介绍" class="headerlink" title="3、self理解介绍:"></a>3、self理解介绍:</h2><p>self指的是类本身  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">__init__</span><br><span class="line">构造的是私有属性 </span><br></pre></td></tr></table></figure><p> 构造函数  在其中定义的是类的私有属性 属于类本身 </p><p>要想在类方法中调用该私有属性  必须传入self</p><p>def read(self)</p><p>才可以使用属性</p><h1 id="python中sys模块的常用函数"><a href="#python中sys模块的常用函数" class="headerlink" title="python中sys模块的常用函数"></a>python中sys模块的常用函数</h1><p>部分源码如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Hi&#x27;</span>)</span><br><span class="line">    sys.exit()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;JOhn&#x27;</span>)</span><br><span class="line"><span class="comment">#argv 返回传递给 Python 脚本的命令行参数列表</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    args = sys.argv</span><br><span class="line">    <span class="built_in">print</span>(args)</span><br><span class="line">    <span class="built_in">print</span>(args[<span class="number">1</span>])</span><br><span class="line">    <span class="built_in">print</span>(sys.version)</span><br><span class="line">    <span class="comment"># print(sys.winver)</span></span><br><span class="line">    <span class="built_in">print</span>(sys.platform)</span><br><span class="line">    <span class="built_in">print</span>(sys.path)</span><br><span class="line">    <span class="built_in">print</span>(sys.maxsize)</span><br><span class="line">    <span class="built_in">print</span>(sys.maxunicode)</span><br><span class="line">    <span class="built_in">print</span>(sys.copyright)</span><br><span class="line">    <span class="built_in">print</span>(sys.modules)</span><br><span class="line">    <span class="built_in">print</span>(sys.byteorder)</span><br><span class="line">    <span class="built_in">print</span>(sys.executable)</span><br><span class="line">    main()</span><br><span class="line"></span><br><span class="line"><span class="comment">#退出当前程序。看下示例：exit()</span></span><br></pre></td></tr></table></figure><h2 id="1、sys-argv-参数个数"><a href="#1、sys-argv-参数个数" class="headerlink" title="1、sys.argv   参数个数"></a>1、sys.argv   参数个数</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">impory sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span></span><br><span class="line">    args = sys.argv</span><br><span class="line">    <span class="built_in">print</span>(args)</span><br><span class="line">    <span class="built_in">print</span>(args[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">上面文件名为：test.py，我们在控制台使用命令：python test.py <span class="number">123</span> abc 执行一下，执行结果如下：</span><br><span class="line"></span><br><span class="line">[<span class="string">&#x27;test.py&#x27;</span>, <span class="string">&#x27;123&#x27;</span>, <span class="string">&#x27;abc&#x27;</span>]</span><br><span class="line"><span class="number">123</span></span><br></pre></td></tr></table></figure><h2 id="2、sys-exit-退出函数的使用"><a href="#2、sys-exit-退出函数的使用" class="headerlink" title="2、sys.exit()退出函数的使用"></a>2、sys.exit()退出函数的使用</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Hi&#x27;</span>)</span><br><span class="line">sys.exit()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Jhon&#x27;</span>)</span><br><span class="line">-------------</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Jhon&#x27;</span>)不会执行到</span><br></pre></td></tr></table></figure><h1 id="python中random模块的常用函数"><a href="#python中random模块的常用函数" class="headerlink" title="python中random模块的常用函数"></a>python中random模块的常用函数</h1><p>源码如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="comment">#返回的是【0.0，1.0】之间的一个随机浮点数</span></span><br><span class="line"><span class="built_in">print</span>(random.random())</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">dir</span>(math))</span><br><span class="line"></span><br><span class="line"><span class="comment">#uniform(a,b) 返回 [a, b) 范围内的一个随机浮点数。看下示例：</span></span><br><span class="line"><span class="built_in">print</span>(random.uniform(<span class="number">1.1</span>,<span class="number">9.9</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">#randint(a,b) 返回 [a, b] 范围内的一个随机整数。看下示例：</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(random.randint(<span class="number">1</span>,<span class="number">10</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">#randrange(start,stop,[,step])  返回 [start, stop) 范围内步长为 step 的一个随机整数。看下示例：</span></span><br><span class="line"><span class="built_in">print</span>(random.randrange(<span class="number">1</span>,<span class="number">10</span>))</span><br><span class="line"><span class="built_in">print</span>(random.randrange(<span class="number">1</span>,<span class="number">10</span>,<span class="number">2</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">#choice(seq)  从非空序列 seq 返回一个随机元素。看下示例：</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(random.choice(<span class="string">&#x27;123456&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(random.choice(<span class="string">&#x27;abcdef&#x27;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#shuffle(x,random) 将序列 x 随机打乱位置。看下示例：</span></span><br><span class="line">l = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line">random.shuffle(l)</span><br><span class="line"><span class="built_in">print</span>(l)</span><br><span class="line"></span><br><span class="line"><span class="comment">#sample(population,k) 返回从总体序列或集合中选择的唯一元素的 k 长度列表，用于无重复的随机抽样。看下示例：</span></span><br><span class="line">l = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line"><span class="built_in">print</span>(random.sample(l,<span class="number">3</span>))</span><br></pre></td></tr></table></figure><h1 id="python中包和模块的使用"><a href="#python中包和模块的使用" class="headerlink" title="python中包和模块的使用"></a>python中包和模块的使用</h1><p>部分源码如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入a模块</span></span><br><span class="line"><span class="keyword">import</span> package.a</span><br><span class="line"><span class="keyword">from</span> package <span class="keyword">import</span> a</span><br><span class="line">a.a()</span><br><span class="line"><span class="keyword">import</span> package.b</span><br><span class="line"><span class="keyword">from</span> package <span class="keyword">import</span> b</span><br><span class="line">b.b()</span><br><span class="line"><span class="keyword">import</span> package1.c </span><br><span class="line"><span class="keyword">import</span> package1.d</span><br><span class="line"><span class="keyword">from</span> package1 <span class="keyword">import</span> c,d</span><br><span class="line">c.c()</span><br><span class="line">d.d()</span><br><span class="line"><span class="comment">#从package1 的d模块导入d函数</span></span><br><span class="line"><span class="keyword">from</span> package1.d <span class="keyword">import</span> d</span><br><span class="line"><span class="comment">#调用函数d()</span></span><br><span class="line">d()</span><br></pre></td></tr></table></figure><ul><li><p>Python 中一个以 .py 结尾的文件就是一个模块，</p></li><li><p>简单来说就是 Python3.3 之前的版本，<strong>init</strong>.py 是包的标识，是必须要有的，之后的版本可以没有。</p></li></ul><p>下面为详细描述:</p><p>Python 中一个以 .py 结尾的文件就是一个模块，</p><p>模块中定义了变量、函数等来实现一些类似的功能。Python 有很多自带的模块（标准库）和第三方模块，一个模块可以被其他模块引用，实现了代码的复用性。</p><hr><p>包是存放模块的文件夹，包中包含 <strong>init</strong>.py 和其他模块，<strong>init</strong>.py 可为空也可定义属性和方法，在 Python3.3 之前的版本，一个文件夹中只有包含 <strong>init</strong>.py，其他程序才能从该文件夹引入相应的模块、函数等，之后的版本没有 <strong>init</strong>.py 也能正常导入，</p><p>简单来说就是 Python3.3 之前的版本，<strong>init</strong>.py 是包的标识，是必须要有的，之后的版本可以没有。</p><h1 id="python中命令空间的使用"><a href="#python中命令空间的使用" class="headerlink" title="python中命令空间的使用"></a>python中命令空间的使用</h1><p>源码如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">#全局作用域</span></span><br><span class="line"></span><br><span class="line">g = <span class="number">1</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">outer</span>():</span><br><span class="line">    <span class="comment">#全局变量</span></span><br><span class="line">    <span class="keyword">global</span> g</span><br><span class="line">    g = g -<span class="number">1</span></span><br><span class="line">    <span class="comment">#嵌套作用域</span></span><br><span class="line">    e = <span class="number">2</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">inner</span>():</span><br><span class="line">        <span class="comment">#局部作用域</span></span><br><span class="line">        i = <span class="number">3</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;g--&gt;&#x27;</span>,g)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#不使用nonlocal</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">outer</span>():</span><br><span class="line">    d = <span class="number">1</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">inner</span>():</span><br><span class="line">        d = <span class="number">2</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;inner--&gt;&#x27;</span>,d)</span><br><span class="line">    inner()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;outer--&gt;&#x27;</span>,d)</span><br><span class="line"></span><br><span class="line"><span class="comment">#使用时机</span></span><br><span class="line"><span class="comment">#如果需要修改嵌套作用域中的变量，则需用到 nonlocal 关键字。</span></span><br><span class="line"><span class="comment"># global   nonlocal</span></span><br><span class="line"><span class="comment">#使用nonloacl</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">outer</span>():</span><br><span class="line">    d = <span class="number">1</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">inner</span>():</span><br><span class="line">        <span class="comment">#嵌套作用域</span></span><br><span class="line">        <span class="keyword">nonlocal</span> d</span><br><span class="line">        d = <span class="number">2</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;inner--&gt;&#x27;</span>,d)</span><br><span class="line">    inner()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;outer--&gt;&#x27;</span>,d)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="1、global-amp-nonlocal"><a href="#1、global-amp-nonlocal" class="headerlink" title="1、global &amp; nonlocal"></a>1、global &amp; nonlocal</h2><ul><li>全局变量：定义在函数外部的变量。</li><li>局部变量：定义在函数内部的变量。</li></ul><h3 id="1、global的使用"><a href="#1、global的使用" class="headerlink" title="1、global的使用"></a>1、global的使用</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 全局变量</span></span><br><span class="line">d = <span class="number">0</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sub</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="comment"># d 在这为局部变量</span></span><br><span class="line">    d = a - b</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;函数内 : &#x27;</span>, d)</span><br><span class="line"></span><br><span class="line">sub(<span class="number">9</span>, <span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;函数外 : &#x27;</span>, d)</span><br></pre></td></tr></table></figure><ul><li>当内部作用域想要修改外部作用域的变量时，就要用到 <code>global</code> 和 <code>nonlocal</code> 关键字了，下面通过具体示例来了解一下。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 全局变量</span></span><br><span class="line">d = <span class="number">0</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sub</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="comment"># 使用 global 声明 d 为全局变量</span></span><br><span class="line">    <span class="keyword">global</span> d</span><br><span class="line">    d = a - b</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;函数内 : &#x27;</span>, d)</span><br><span class="line"></span><br><span class="line">sub(<span class="number">9</span>, <span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;函数外 : &#x27;</span>, d)</span><br></pre></td></tr></table></figure><h3 id="1-2、nonlocal的使用"><a href="#1-2、nonlocal的使用" class="headerlink" title="1.2、nonlocal的使用"></a>1.2、nonlocal的使用</h3><ul><li>如果需要修改嵌套作用域中的变量，则需用到 <code>nonlocal</code> 关键字。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">outer</span>():</span><br><span class="line">    d = <span class="number">1</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">inner</span>():</span><br><span class="line">        <span class="keyword">nonlocal</span> d</span><br><span class="line">        d = <span class="number">2</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;inner：&#x27;</span>, d)</span><br><span class="line">    inner()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;outer：&#x27;</span>, d)</span><br><span class="line">outer()</span><br></pre></td></tr></table></figure><h1 id="python中序列结构的学习"><a href="#python中序列结构的学习" class="headerlink" title="python中序列结构的学习"></a>python中序列结构的学习</h1><p># 序列结构有  字符串 列表 元组    都可以进行切片操作  可以进行序列结构的基本操作：索引、切片、加、乘、检查成员。</p><p># 元组 () 保存不可修改的内容   列表相当于数组 [] 但是可以保存多种类型  可以append</p><p>#元组只能一次删除完全   然后重新赋值      列表可以删除一个    </p><p># 列表转化为元组  </p><p>源码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 序列结构有  字符串 列表 元组    都可以进行切片操作  可以进行序列结构的基本操作：索引、切片、加、乘、检查成员。</span></span><br><span class="line"><span class="comment"># 元组 () 保存不可修改的内容   列表相当于数组 [] 但是可以保存多种类型  可以append</span></span><br><span class="line"><span class="comment">#元组只能一次删除完全   然后重新赋值      列表可以删除一个    </span></span><br><span class="line"><span class="comment"># 列表转化为元组  </span></span><br><span class="line">l = [<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;f&#x27;</span>]</span><br><span class="line">t = <span class="built_in">tuple</span>(l)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;t----&gt;&#x27;</span>,t)   <span class="comment"># 变成了小括号的元组</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 字典 dict   &#123;&#125;  键值对(key:value)    集合  键  没有值  即只存储key &#123;&#125; set() 值不可重复  无序 自动过滤重复的内容</span></span><br><span class="line">s = &#123;<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>&#125;</span><br><span class="line">s = <span class="built_in">set</span>([<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>])</span><br><span class="line">s = <span class="built_in">set</span>()</span><br><span class="line"><span class="comment"># str = &#x27;python&#x27;</span></span><br><span class="line"><span class="comment"># for s in str:</span></span><br><span class="line"><span class="comment">#     print(s)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># sum = 0</span></span><br><span class="line"><span class="comment"># m = 10</span></span><br><span class="line"><span class="comment"># while m &gt; 0:</span></span><br><span class="line"><span class="comment">#     sum = sum + m</span></span><br><span class="line"><span class="comment">#     m = m-1</span></span><br><span class="line"><span class="comment"># print(sum)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># st = &#x27;python&#x27;</span></span><br><span class="line"><span class="comment"># for s in st:</span></span><br><span class="line"><span class="comment">#     if s == &#x27;0&#x27;:</span></span><br><span class="line"><span class="comment">#         break</span></span><br><span class="line"><span class="comment">#     print(s)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输入输出</span></span><br><span class="line">name = <span class="built_in">input</span>(<span class="string">&quot;请输入您的名字: &quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(name)</span><br><span class="line"></span><br><span class="line"><span class="comment">#缩进</span></span><br><span class="line"><span class="keyword">if</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="literal">True</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#多行</span></span><br><span class="line">a = <span class="number">128</span></span><br><span class="line">b = <span class="number">25</span></span><br><span class="line">d = <span class="number">12</span></span><br><span class="line">c = a + \</span><br><span class="line">    b - \</span><br><span class="line">    d</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="built_in">print</span>(b)</span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line"><span class="comment">#注释</span></span><br><span class="line"><span class="comment">#基本运算</span></span><br><span class="line"><span class="built_in">abs</span>(a)<span class="comment">#a的绝对值</span></span><br><span class="line"><span class="built_in">int</span>(a)<span class="comment">#强制类型转换</span></span><br><span class="line"><span class="built_in">float</span>(a)<span class="comment">#强制类型转换</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#数学函数</span></span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line">math.sqrt(<span class="number">1024</span>)</span><br><span class="line"><span class="comment">#随机生成随机数</span></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="built_in">print</span>(random.random())</span><br><span class="line"><span class="comment">#随机生成一个x和y范围的实数</span></span><br><span class="line"><span class="built_in">print</span>(random.uniform(<span class="number">5</span>,<span class="number">8</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">#切片</span></span><br><span class="line">s = <span class="string">&#x27;python&#x27;</span></span><br><span class="line"><span class="comment">#访问第一个字符</span></span><br><span class="line"><span class="built_in">print</span>(s[<span class="number">0</span>])</span><br><span class="line"><span class="comment">#访问yt</span></span><br><span class="line"><span class="built_in">print</span>(s[<span class="number">1</span>:<span class="number">3</span>])</span><br><span class="line"><span class="comment">#访问pyt</span></span><br><span class="line"><span class="built_in">print</span>(s[:<span class="number">3</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">#访问hon</span></span><br><span class="line"><span class="built_in">print</span>(s[<span class="number">3</span>:])</span><br><span class="line"><span class="comment"># 其实最后一个数字是6 也就是6取不到 </span></span><br><span class="line"><span class="built_in">print</span>(s[<span class="number">3</span>:<span class="number">6</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">#单个字符 ord()函数返回单个字符的编码</span></span><br><span class="line">s = <span class="string">&#x27;A&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">ord</span>(s))</span><br><span class="line"><span class="comment">#chr()函数转化成相应的字符</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">chr</span>(<span class="number">65</span>))</span><br><span class="line"></span><br><span class="line">s1 = <span class="string">&#x27;hello&#x27;</span></span><br><span class="line">s2 = <span class="string">&#x27;python&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;s1+s2--&gt;&#x27;</span>,s1+s2)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;s1*2--&gt;&#x27;</span>,s1*<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;s1[2]--&gt;&#x27;</span>,s1[<span class="number">2</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;s1[:2]--&gt;&#x27;</span>,s1[:<span class="number">2</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&quot;H&quot; in s1--&gt;&#x27;</span>,<span class="string">&#x27;H&#x27;</span> <span class="keyword">in</span> s1)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&quot;H&quot; not in s2--&gt;&#x27;</span>,<span class="string">&#x27;H&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> s2)</span><br><span class="line"></span><br><span class="line"><span class="comment">#格式化 %s 字符串 %d 整数 %f 浮点数</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;hello %s&#x27;</span> % <span class="string">&#x27;python&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;hello %s&quot;</span>,<span class="string">&quot;python&quot;</span>)</span><br><span class="line"><span class="comment">#format()</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&#123;0&#125; &#123;1&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="string">&#x27;hello&#x27;</span>,<span class="string">&#x27;python&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">#一、序列</span></span><br><span class="line"><span class="comment">#索引 0 1 2 3 4 5 6</span></span><br><span class="line"><span class="comment">#索引 -7 -6 -5 -4 -3 -2 -1</span></span><br><span class="line">s3 = <span class="string">&#x27;python&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;s3[-1]--&gt;&#x27;</span>,s3[-<span class="number">1</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;s3[4]--&gt;&#x27;</span>,s3[<span class="number">4</span>])</span><br><span class="line"><span class="built_in">str</span> = <span class="string">&#x27;Python&#x27;</span></span><br><span class="line"><span class="keyword">for</span> s <span class="keyword">in</span> <span class="built_in">str</span>:</span><br><span class="line">    <span class="keyword">if</span> s == <span class="string">&#x27;o&#x27;</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="built_in">print</span>(s)</span><br><span class="line"></span><br><span class="line">s4 = <span class="string">&#x27;acbdef&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;s4-&gt;max&quot;</span>,<span class="built_in">max</span>(s4))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;排序&#x27;</span>,<span class="built_in">sorted</span>(s4))</span><br><span class="line"></span><br><span class="line"><span class="comment">#列表 可以放任何类型的数组 里面也是序列的结构 切片操作加减乘除 可变数值  ----》序列结构</span></span><br><span class="line"></span><br><span class="line">l = [<span class="string">&#x27;abcf&#x27;</span>,<span class="number">15</span>,<span class="number">2.3</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;l[0]--&gt;&#x27;</span>,l[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;l[:2]--&gt;&#x27;</span>,l[:<span class="number">2</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">#增删改查、</span></span><br><span class="line">l.append(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line">l[<span class="number">1</span>] = <span class="number">54</span></span><br><span class="line"><span class="keyword">del</span> l[<span class="number">1</span>]</span><br><span class="line"><span class="comment">#count</span></span><br><span class="line">l = [<span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;f&#x27;</span>, <span class="string">&#x27;d&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;d的次数&#x27;</span>,l.count(<span class="string">&#x27;d&#x27;</span>))</span><br><span class="line"><span class="comment">#index 查找元素首次出现的位置</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;l.index(&quot;d&quot;)&#x27;</span>,l.index(<span class="string">&quot;d&quot;</span>))</span><br><span class="line"><span class="comment">#remove 移除列表中某个值的首次匹配项，使用如下所示：</span></span><br><span class="line">l.remove(<span class="string">&#x27;d&#x27;</span>)</span><br><span class="line"><span class="comment">#④ sort()对列表中元素进行排序，使用如下所示：</span></span><br><span class="line">l.sort()</span><br><span class="line"><span class="built_in">print</span>(l)</span><br><span class="line"><span class="comment">#copy 复制列表，使用如下所示</span></span><br><span class="line">lc = l.copy()</span><br><span class="line"><span class="built_in">print</span>(lc)</span><br><span class="line"></span><br><span class="line"><span class="comment">#二、元祖 不可以变的列表（不变数组）             ------》序列结构</span></span><br><span class="line"><span class="comment">#列表写法</span></span><br><span class="line">ld = (<span class="number">1024</span>,<span class="number">2.5</span>,<span class="string">&#x27;python&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;ld[0] = &#x27;</span>,ld[<span class="number">0</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;ld[:2] = &#x27;</span>,ld[:<span class="number">2</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改：不可以修改 但是可以重新在赋值</span></span><br><span class="line">t = (<span class="number">1024</span>, <span class="number">0.5</span>, <span class="string">&#x27;Python&#x27;</span>)</span><br><span class="line">t = (<span class="number">1024</span>, <span class="number">0.5</span>, <span class="string">&#x27;Python&#x27;</span>, <span class="string">&#x27;Hello&#x27;</span>,<span class="string">&#x27;谢谢&#x27;</span>)</span><br><span class="line"><span class="comment">#删除：元组中的元素不能被删除，我们只能删除整个元组，如下所示：</span></span><br><span class="line"><span class="keyword">del</span> ld</span><br><span class="line"></span><br><span class="line"><span class="comment">#③ tuple() 将列表转换为元组，使用如下所示：</span></span><br><span class="line">lc = <span class="built_in">tuple</span>(l)</span><br><span class="line"></span><br><span class="line"><span class="comment">#字典 key:value 键值对</span></span><br><span class="line"><span class="comment">#创建方式1   标准</span></span><br><span class="line">d = &#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;小米&#x27;</span>,<span class="string">&#x27;age&#x27;</span>:<span class="number">23</span>&#125;</span><br><span class="line"><span class="comment">#创建方式2 这个之间时,不是：列表转换为字典</span></span><br><span class="line">le = [(<span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;小明&#x27;</span>),(<span class="string">&#x27;age&#x27;</span>,<span class="number">250</span>)]</span><br><span class="line">d = <span class="built_in">dict</span>(le)</span><br><span class="line"><span class="comment">#方式3</span></span><br><span class="line">d = <span class="built_in">dict</span>(name=<span class="string">&#x27;小只&#x27;</span>,age=<span class="string">&#x27;19&#x27;</span>)</span><br><span class="line"><span class="comment">#空字典</span></span><br><span class="line">d =<span class="built_in">dict</span>()</span><br><span class="line">d = &#123;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查找</span></span><br><span class="line">d = <span class="built_in">dict</span>(name=<span class="string">&#x27;xiao&#x27;</span>,age=<span class="string">&#x27;25&#x27;</span>)</span><br><span class="line"><span class="comment">#方式1</span></span><br><span class="line"><span class="built_in">print</span>(d[<span class="string">&#x27;name&#x27;</span>])</span><br><span class="line"><span class="comment">#方式2</span></span><br><span class="line"><span class="built_in">print</span>(d.get(<span class="string">&#x27;name&#x27;</span>))</span><br><span class="line"><span class="comment">#修改 清空</span></span><br><span class="line"></span><br><span class="line">d.clear()</span><br><span class="line"><span class="built_in">print</span>(d)</span><br><span class="line"></span><br><span class="line"><span class="comment">#获取字典的长度</span></span><br><span class="line">d = <span class="built_in">dict</span>(name=<span class="string">&#x27;xiao&#x27;</span>,age=<span class="string">&#x27;25&#x27;</span>)</span><br><span class="line"><span class="built_in">len</span>(d)</span><br><span class="line"></span><br><span class="line"><span class="comment">#三、集合使用花括号 &#123;&#125; 或者 set() 函数创建，如果创建空集合只能使用 set() 函数，以创建集合 s 为例，如下所示：</span></span><br><span class="line">s = &#123;<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>&#125;</span><br><span class="line"><span class="comment">#使用set函数</span></span><br><span class="line">s = <span class="built_in">set</span>([<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span><span class="string">&#x27;c&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建空集合</span></span><br><span class="line">s = <span class="built_in">set</span>()</span><br><span class="line"><span class="comment">#集合中重复的元素会被自动过滤掉，如下所示：</span></span><br><span class="line"></span><br><span class="line">s = &#123;<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;c&#x27;</span>&#125;</span><br><span class="line">s= &#123;<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;b&#x27;</span>&#125;</span><br><span class="line"><span class="comment">#添加元素可以使用 add 或 update 方法，如果元素已经存在，则不进行操作，如下所示：</span></span><br><span class="line">s.add(<span class="string">&#x27;e&#x27;</span>)</span><br><span class="line">s.update(<span class="string">&#x27;e&#x27;</span>)</span><br><span class="line"><span class="comment">#删除</span></span><br><span class="line">s.remove(<span class="string">&#x27;e&#x27;</span>)</span><br><span class="line"><span class="comment">#清空</span></span><br><span class="line">s.clear()</span><br><span class="line"><span class="comment">#长度</span></span><br><span class="line"><span class="built_in">len</span>(s)</span><br><span class="line"></span><br><span class="line"><span class="built_in">str</span> = <span class="string">&#x27;Python&#x27;</span></span><br><span class="line"><span class="keyword">for</span> s <span class="keyword">in</span> <span class="built_in">str</span>:</span><br><span class="line">    <span class="keyword">if</span> s == <span class="string">&#x27;o&#x27;</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="built_in">print</span>(s)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><h1 id="python中迭代器、装饰器的学习"><a href="#python中迭代器、装饰器的学习" class="headerlink" title="python中迭代器、装饰器的学习"></a>python中迭代器、装饰器的学习</h1><h2 id="1、迭代器源码如下"><a href="#1、迭代器源码如下" class="headerlink" title="1、迭代器源码如下:"></a>1、迭代器源码如下:</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#自己写一个迭代器</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Iterable</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">isinstance</span>(<span class="string">&#x27;abc&#x27;</span>, Iterable))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">isinstance</span>(&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;, Iterable))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">isinstance</span>(<span class="number">1024</span>, Iterable))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="string">&#x27;Hello&#x27;</span>:</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line"></span><br><span class="line"><span class="comment">#可迭代对象需具有 __iter__() 方法，它们均可使用 for 循环遍历，</span></span><br><span class="line"><span class="comment"># 我们可以使用 isinstance() 方法来判断一个对象是否为可迭代对象，看下示例：</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyIterator</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.s = <span class="string">&#x27;程序之间&#x27;</span></span><br><span class="line">        self.i = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__iter__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__next__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> self.i &lt; <span class="number">4</span>:</span><br><span class="line">            n = self.s[self.i]</span><br><span class="line">            self.i += <span class="number">1</span></span><br><span class="line">            <span class="keyword">return</span> n</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">raise</span> StopIteration</span><br><span class="line"></span><br><span class="line">mi = <span class="built_in">iter</span>(MyIterator())</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> mi:</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure><h2 id="2、装饰器的写法"><a href="#2、装饰器的写法" class="headerlink" title="2、装饰器的写法"></a>2、装饰器的写法</h2><p>部分源码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#装饰器</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_multiple_func</span>(<span class="params">n</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">multiple</span>(<span class="params">x</span>):</span><br><span class="line">        <span class="keyword">return</span> n * x</span><br><span class="line">    <span class="keyword">return</span> multiple</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">double = get_multiple_func(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(double(<span class="number">3</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">#第一个dectorator</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dec</span>(<span class="params">f</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@dec</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">double</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> x * <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#完全等价于</span></span><br><span class="line"><span class="comment"># double = dec(double)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#返回和输入都是函数的函数</span></span><br><span class="line"><span class="comment">#特殊情况  返回不是函数 极端例子</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dec</span>(<span class="params">f</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@dec</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">double</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> x * <span class="number">2</span></span><br><span class="line"><span class="comment">#等价于</span></span><br><span class="line">double = dec(double)<span class="comment">#输出为1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(double)<span class="comment">#输出为1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#正常情况</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>部分源码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#闭包</span></span><br><span class="line"><span class="comment">#比如我们调用一个带有返回值的函数 x，</span></span><br><span class="line"><span class="comment"># 此时函数 x 为我们返回一个函数 y，</span></span><br><span class="line"><span class="comment"># 这个函数 y 就被称作闭包，这么一说是不是豁然开朗了</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">x</span>(<span class="params"><span class="built_in">id</span></span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">y</span>(<span class="params">name</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;id--&gt;&#x27;</span>,<span class="built_in">id</span>,<span class="string">&#x27;name--&gt;&#x27;</span>,name)</span><br><span class="line">    <span class="keyword">return</span> y</span><br><span class="line"></span><br><span class="line">y = x(<span class="string">&#x27;001&#x27;</span>)</span><br><span class="line">y(<span class="string">&#x27;小米&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#装饰器</span></span><br><span class="line"><span class="comment">#装饰器（decorator）也称装饰函数，</span></span><br><span class="line"><span class="comment"># 是一种闭包的应用，其主要是用于某些函数需要拓展功能，但又不希望修改原函数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#基于函数</span></span><br><span class="line"><span class="comment"># 装饰函数 必须是闭包</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">funA</span>(<span class="params">fun</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">funB</span>(<span class="params">*args, **kw</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;函数 &#x27;</span> + fun.__name__ + <span class="string">&#x27; 开始执行&#x27;</span>)</span><br><span class="line">        fun(*args, **kw)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;函数 &#x27;</span> + fun.__name__ + <span class="string">&#x27; 执行完成&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> funB</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#定义业务函数</span></span><br><span class="line"><span class="comment">#在业务函数上添加 @装饰函数（类）名</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#装饰函数不带参</span></span><br><span class="line"><span class="meta">@funA</span></span><br><span class="line"><span class="comment">#业务函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">name</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;hello--&gt;&#x27;</span>,name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">func(<span class="string">&#x27;Jhon&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#装饰函数带参</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">funA</span>(<span class="params">flag</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">funB</span>(<span class="params">fun</span>):</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">funC</span>(<span class="params">*args,**kw</span>):</span><br><span class="line">            <span class="keyword">if</span> flag == <span class="literal">True</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;=======&#x27;</span>)</span><br><span class="line">            <span class="keyword">elif</span> flag == <span class="literal">False</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;-----------&#x27;</span>)</span><br><span class="line">            fun(*args,**kw)</span><br><span class="line">        <span class="keyword">return</span> funC</span><br><span class="line">    <span class="keyword">return</span> funB</span><br><span class="line"></span><br><span class="line"><span class="meta">@funA(<span class="params"><span class="literal">False</span></span>)</span></span><br><span class="line"><span class="comment">#业务函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">funD</span>(<span class="params">name</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;hello&#x27;</span>,name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">funD(<span class="string">&#x27;Jhon&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#Python 中还支持多个装饰器同时使用，比如装饰函数为：funA、funD，业务函数为：funH，使用方式如下所示：</span></span><br><span class="line"><span class="meta">@funA</span></span><br><span class="line"><span class="meta">@funD</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">funH</span>():</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#基于类</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#装饰器除了基于函数实现，还可以基于类实现，看下示例：</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,func</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;函数名是%s&#x27;</span> % func.__name__)</span><br><span class="line">        self.__func = func</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__call__</span>(<span class="params">self,*args,**kw</span>):</span><br><span class="line">        self.__func()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hello</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;hello---&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">hello()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#Python 装饰器的 @... 相当于将被装饰的函数（业务函数）作为参数传入装饰函数（类）。</span></span><br></pre></td></tr></table></figure><h1 id="python中文件的操作"><a href="#python中文件的操作" class="headerlink" title="python中文件的操作"></a>python中文件的操作</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#一、文件的写入</span></span><br><span class="line"><span class="comment">#方式1</span></span><br><span class="line">wf = <span class="built_in">open</span>(<span class="string">&#x27;test.txt&#x27;</span>,<span class="string">&#x27;w&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">wf.write(<span class="string">&#x27;Tom\n&#x27;</span>)</span><br><span class="line">wf.write(<span class="string">&#x27;hello\n&#x27;</span>)</span><br><span class="line"><span class="comment">#关闭</span></span><br><span class="line">wf.close()</span><br><span class="line"></span><br><span class="line"><span class="comment">#上面我们使用了 close() 函数进行关闭操作，如果打开的文件忘记了关闭，</span></span><br><span class="line"><span class="comment">#可能会对程序造成一些隐患，为了避免这个问题的出现</span></span><br><span class="line"><span class="comment">#，可以使用 with as 语句，通过这种方式，程序执行完成后会自动关闭已经打开的文件。如下所示：</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#方式2建议使用</span></span><br><span class="line"><span class="keyword">with</span>  <span class="built_in">open</span>(<span class="string">&#x27;text01.txt&#x27;</span>,<span class="string">&#x27;w&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> wf:</span><br><span class="line">    wf.write(<span class="string">&quot;Tom\n&quot;</span>)</span><br><span class="line">    wf.write(<span class="string">&#x27;hello\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#二、文件的读取</span></span><br><span class="line"><span class="comment"># read(size)读取指定的字节数，参数可选，无参或参数为负时读取所有</span></span><br><span class="line"><span class="comment"># readline()读取一行</span></span><br><span class="line"><span class="comment"># readlines()读取所有行并返回列表</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span>  <span class="built_in">open</span>(<span class="string">&#x27;text01.txt&#x27;</span>,<span class="string">&#x27;r&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> wf:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;readline--&gt;&#x27;</span>,wf.readline())</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;read--&gt;&#x27;</span>,wf.read(<span class="number">6</span>))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;readlines--&gt;&#x27;</span>,wf.readlines())</span><br></pre></td></tr></table></figure><h1 id="python函数的操作"><a href="#python函数的操作" class="headerlink" title="python函数的操作"></a>python函数的操作</h1><p>源码如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#空函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">my_empty</span>():</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="comment">#无返回值</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">my_print</span>(<span class="params">name</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line"><span class="comment">#有返回值</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">my_sum</span>(<span class="params">x,y</span>):</span><br><span class="line">    s = x + y</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;s--&gt;&#x27;</span>,s)</span><br><span class="line">    <span class="keyword">return</span> s</span><br><span class="line"><span class="comment">#不定长参数</span></span><br><span class="line"><span class="comment">#当我们不确定参数的个数时，可以使用不定长参数，在参数名前加 * 进行声明，格式如下所示：</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">my_varible</span>(<span class="params">*params</span>):</span><br><span class="line">    <span class="keyword">for</span> p <span class="keyword">in</span> params:</span><br><span class="line">        <span class="built_in">print</span>(p)</span><br><span class="line"></span><br><span class="line"><span class="comment">#我们还可以使用 lambda 定义匿名函数，格式如下所示：</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#匿名函数 lambda 参数 : 表达式</span></span><br><span class="line">my_sub = <span class="keyword">lambda</span> x,y:x-y</span><br><span class="line"></span><br><span class="line">my_empty()</span><br><span class="line">my_print(<span class="string">&#x27;Jhon&#x27;</span>)</span><br><span class="line">result = my_sum(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line">my_varible(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>)</span><br><span class="line"><span class="built_in">print</span>(my_sub(<span class="number">2</span>,<span class="number">1</span>))</span><br></pre></td></tr></table></figure><h1 id="python中枚举的学习"><a href="#python中枚举的学习" class="headerlink" title="python中枚举的学习"></a>python中枚举的学习</h1><p>源码如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> enum <span class="keyword">import</span> Enum</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 起初 Python 中并未内置枚举（enum）类型，</span></span><br><span class="line"><span class="comment"># 枚举是在 Python3.4 添加的新功能，此时我们可能会有一个疑问：Python3.4 之前的版本还能不能使用枚举呢？</span></span><br><span class="line"><span class="comment"># 答案是可以使用，但是不能直接使用，使用之前需要先用 pip install enum 安装。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#定义常量 enum和class语法相同</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">WeekDay</span>(<span class="title class_ inherited__">Enum</span>):</span><br><span class="line">    Mon = <span class="number">0</span></span><br><span class="line">    Tue = <span class="number">1</span></span><br><span class="line">    Wed = <span class="number">2</span></span><br><span class="line">    Thu = <span class="number">3</span></span><br><span class="line">    Fri = <span class="number">4</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#访问成员及属性</span></span><br><span class="line"><span class="comment">#枚举成员</span></span><br><span class="line"><span class="built_in">print</span>(WeekDay.Mon)</span><br><span class="line"><span class="comment">#枚举成员名称</span></span><br><span class="line"><span class="built_in">print</span>(WeekDay.Mon.name)</span><br><span class="line"><span class="comment">#枚举成员值</span></span><br></pre></td></tr></table></figure><h1 id="python中range的学习"><a href="#python中range的学习" class="headerlink" title="python中range的学习"></a>python中range的学习</h1><p>源码:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">5. range()的返回值类型是range</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">在Python3中，range函数的返回值类型不再是列表，</span></span><br><span class="line"><span class="string">而是一个range类型。使用者可以使用list函数继续再将其转化成列表</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">range(start,stop,step)</span></span><br><span class="line"><span class="string">    使用注意</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">1. 所有参数都是整形。不能给出浮点数序列</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">2. 当start参数省略时，step参数也必须省略</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">3. step小于1没有任何意义</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">4. 步长不能为0</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">5. range()的返回值类型是range</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">test = <span class="built_in">range</span>(<span class="number">10</span>)</span><br><span class="line"><span class="built_in">print</span>(test)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(test))</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">python的学习记录</summary>
    
    
    
    <category term="Python" scheme="https://aixiaocainiao.github.io/categories/Python/"/>
    
    
    <category term="python" scheme="https://aixiaocainiao.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>yolov5环境配置</title>
    <link href="https://aixiaocainiao.github.io/posts/9811ab24.html"/>
    <id>https://aixiaocainiao.github.io/posts/9811ab24.html</id>
    <published>2023-04-22T15:51:09.493Z</published>
    <updated>2023-04-22T16:03:10.293Z</updated>
    
    <content type="html"><![CDATA[<h1 id="yolov5环境配置"><a href="#yolov5环境配置" class="headerlink" title="yolov5环境配置"></a>yolov5环境配置</h1><p>配置：AMD显卡 AMD CPU  ubuntu18.04 pytorch cpu版本 外网环境<br>要求：python版本 3.8及其以上  python3.6.9的版本出了问题</p><ul><li><p>1.0、准备工作：<br>yolov5下载包<br>git clone <a href="https://github.com/ultralytics/yolov5.git">https://github.com/ultralytics/yolov5.git</a></p></li><li><p>2.0、环境配置：<br>conda create -n yolov5 python==3.8<br>conda activate yolov5</p></li></ul><h2 id="安装pytorch"><a href="#安装pytorch" class="headerlink" title="安装pytorch"></a>安装pytorch</h2><p>Stable<br>Linux<br>conda<br>Python</p><p>cpu</p><hr><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda install pytorch torchvision torchaudio cpuonly -c pytorch</span><br></pre></td></tr></table></figure><ul><li>3.0、检查配置</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">python</span><br><span class="line">import torch</span><br><span class="line">torch.__version__</span><br><span class="line">输出版本号 证明安装成功</span><br></pre></td></tr></table></figure><h2 id="安装python可视化"><a href="#安装python可视化" class="headerlink" title="安装python可视化"></a>安装python可视化</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install ipython</span><br></pre></td></tr></table></figure><ul><li>4.0、继续</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd  yolov5-master</span><br><span class="line">ls</span><br><span class="line">确保有.txt文件夹</span><br><span class="line">pip3 install -U -r requirements.txt -i https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">yolov5环境配置</summary>
    
    
    
    <category term="other" scheme="https://aixiaocainiao.github.io/categories/other/"/>
    
    
    <category term="yolov5" scheme="https://aixiaocainiao.github.io/tags/yolov5/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu中图片webp格式转为png格式</title>
    <link href="https://aixiaocainiao.github.io/posts/929705e8.html"/>
    <id>https://aixiaocainiao.github.io/posts/929705e8.html</id>
    <published>2023-04-22T15:51:09.482Z</published>
    <updated>2023-04-22T16:03:10.288Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ubuntu中webp转为png"><a href="#ubuntu中webp转为png" class="headerlink" title="ubuntu中webp转为png"></a>ubuntu中webp转为png</h1><p>配置：ubuntu18.04  图片webp格式 转换为png格式</p><p>第一步：</p><ul><li>先在终端中使用如下命令安装 WebP 工具：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install webp</span><br></pre></td></tr></table></figure><p>第二步：</p><ul><li>可以使用如下命令将 JPG 或 PNG 转换为 WEBP：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cwebp -q [图像质量] [JPEG/PNG文件名] -o [WebP文件名]</span><br></pre></td></tr></table></figure><ul><li>使用如下命令或将 WEBP 图片转换成 PNG：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dwebp [WebP文件名] -o [PNG文件名]</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">Ubuntu中图片webp格式转为png格式</summary>
    
    
    
    <category term="other" scheme="https://aixiaocainiao.github.io/categories/other/"/>
    
    
    <category term="png" scheme="https://aixiaocainiao.github.io/tags/png/"/>
    
    <category term="webp" scheme="https://aixiaocainiao.github.io/tags/webp/"/>
    
  </entry>
  
  <entry>
    <title>51单片机学习历程</title>
    <link href="https://aixiaocainiao.github.io/posts/53360020.html"/>
    <id>https://aixiaocainiao.github.io/posts/53360020.html</id>
    <published>2023-04-21T10:16:17.301Z</published>
    <updated>2023-04-21T10:17:56.469Z</updated>
    
    <content type="html"><![CDATA[<h1 id="51单片机学习历程"><a href="#51单片机学习历程" class="headerlink" title="51单片机学习历程"></a>51单片机学习历程</h1><h2 id="LED模块"><a href="#LED模块" class="headerlink" title="LED模块"></a>LED模块</h2><h3 id="LED基础知识"><a href="#LED基础知识" class="headerlink" title="LED基础知识"></a>LED基础知识</h3><ul><li><p>LED 正负极 长正短负  + 5v  -  0v =&gt;TTL</p></li><li><p>电容大小：计算方法</p></li><li>晶振上标有11.0592(我还没有找到)</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">102 = 1k</span><br><span class="line"></span><br><span class="line">10 00 = 1k</span><br><span class="line">电阻：</span><br><span class="line">473 = 47*10^3 = 47 k</span><br><span class="line">1001 = 100 0 = 1k</span><br><span class="line">1002 = 100 00 = 10k</span><br><span class="line">电容：</span><br><span class="line">104 = 10 0000pF</span><br><span class="line">pF nF uF mF F  10^3</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>电阻 限流电阻 害怕烧毁</li><li>8位寄存器P2 控制 8个LED灯亮灭 一端已默认接正极 </li><li>P2_i = 0  LED灯亮 一端接的+极 只需控制这一断为-极即可</li></ul><p>工作原理：每个寄存器连接着io口 寄存器连接着cpu 所以用寄存器的值来控制模块</p><hr><p>见原理图：</p><hr><h3 id="stc-isp用法"><a href="#stc-isp用法" class="headerlink" title="stc-isp用法"></a>stc-isp用法</h3><p>单片机型号选择-&gt;STC89C52RC/LE52RC</p><p>延时程序可以自动生成</p><p>系统频率：11.0592(看自己板子的频率 晶振上标有11.0592(我还没有找到))</p><p>定时长度：自己选择     单位 毫秒</p><p>8051指令集：STC-Y1  才是自己的板子系列</p><h3 id="keil用法"><a href="#keil用法" class="headerlink" title="keil用法"></a>keil用法</h3><p>1.0、生成可执行文件 才能烧录程序</p><p>options for target  output create file 生成可执行文件</p><p>程序 ：while循环</p><p>2.0、忽略不必要的警告</p><p>options for target   BL51 Miso  16  可以忽略警告</p><p>3.0、项目下面配置模板</p><p>project  Bools  {}functions  Templates</p><p>点击Templates  右键  配置模板 </p><h2 id="C51基础知识"><a href="#C51基础知识" class="headerlink" title="C51基础知识"></a>C51基础知识</h2><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><p>存数据的小盒子 </p><p>unsigned int  单片机(16位)    0-65535</p><p>int                    单片机(16位)   -32768 ~ 32767</p><p>见图：</p><hr><p>c51数据类型图</p><p>c51数据运算图</p><hr><p>位运算：</p><ul><li><p>左移：低位补0 高位移除</p></li><li><p>0011 1100 &lt;&lt; 1    -&gt; 0111 1000 </p></li><li><p>右移：高位补0 低位移除</p></li><li><p>0011 1100 &gt;&gt; 2   -&gt; 0000 1111</p></li><li><p>异或：</p></li><li><p>相同为0  不同为1</p></li><li><p>0011 1100 ^ 1111 0000  -&gt; 1100 1100</p></li></ul><h3 id="单片机基础知识"><a href="#单片机基础知识" class="headerlink" title="单片机基础知识"></a>单片机基础知识</h3><p>一、须知</p><p>弱上拉 ：低电平的驱动能力强</p><p>强下拉：高点平的驱动能力弱</p><p>上电  IO口为1</p><p>二、头文件</p><ul><li><em>nop_</em>()  头文件  #include “INTRINS.H”</li><li><h1 id="include-有寄存器位声明"><a href="#include-有寄存器位声明" class="headerlink" title="include   有寄存器位声明"></a>include <REGX52.H>  有寄存器位声明</h1></li><li><h1 id="include-没有寄存器位声明"><a href="#include-没有寄存器位声明" class="headerlink" title="include     没有寄存器位声明"></a>include <REG52.H>    没有寄存器位声明</h1></li></ul><h2 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h2><h3 id="延时程序"><a href="#延时程序" class="headerlink" title="延时程序"></a>延时程序</h3><h4 id="原始"><a href="#原始" class="headerlink" title="原始"></a>原始</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">Delay1ms</span><span class="params">()</span><span class="comment">//@11.0592MHz</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> i, j;</span><br><span class="line"></span><br><span class="line">_nop_();</span><br><span class="line">i = <span class="number">2</span>;</span><br><span class="line">j = <span class="number">199</span>;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span> (--j);</span><br><span class="line">&#125; <span class="keyword">while</span> (--i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="改良"><a href="#改良" class="headerlink" title="改良"></a>改良</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">Delay1ms</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> xms)</span><span class="comment">//@11.0592MHz</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> i, j;</span><br><span class="line"><span class="keyword">while</span>(xms)</span><br><span class="line">&#123;</span><br><span class="line">i = <span class="number">2</span>;</span><br><span class="line">j = <span class="number">199</span>;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span> (--j);</span><br><span class="line">&#125; <span class="keyword">while</span> (--i);</span><br><span class="line">xms--;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="独立按键模块"><a href="#独立按键模块" class="headerlink" title="独立按键模块"></a>独立按键模块</h2><p>一端接的GND 另一端在寄存器上  寄存器连接在cpu的IO口上 这两个数据互通</p><p>按键按下时  IO口应为0  另一方也是 0  也即：都为0 才导通</p><p>1、上电：</p><p>单片机IO口为高电平</p><p>2、按键：</p><p>按键没有按下   寄存器应该为1</p><p>按键按下           寄存器应该为0</p><p>3、按键的抖动：</p><p>对于机械开关，当机械触点断开、闭合时，由于机械触点的弹性作用，一个开关在闭合时不会马上稳定地接通，在断开时也不会一下子断开，所以在开关闭合及断开的瞬间会伴随一连串的抖动</p><p>3.1、按键消抖：</p><p>3.11、硬件消抖：麻烦 需要添加电路</p><p>3.12、软件消抖：简单  加个延时程序</p><p>按键消抖 检测松手</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">注：单片机上电 所有IO口为<span class="number">1</span> </span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(P3_1 == <span class="number">0</span>)<span class="comment">//上电便是高电平 只有按键按下的时候 P3_1才是 0状态  此时 按键按下了</span></span><br><span class="line">&#123;</span><br><span class="line">Delay1ms(<span class="number">20</span>);  <span class="comment">//按键按下 按键消抖  延时程序</span></span><br><span class="line"><span class="keyword">while</span>(P3_1 == <span class="number">0</span>); <span class="comment">//如果按键一直在按下的状态 就什么也不做  一旦按键松手 就会跳出这个程序 </span></span><br><span class="line">Delay1ms(<span class="number">20</span>);  <span class="comment">//按键松手了 然后进行按键消抖</span></span><br><span class="line">          </span><br><span class="line">P2_0 = ~P2_0; <span class="comment">//默认为1   上电为1</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">小技巧：</span><br><span class="line">    </span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//无内容</span></span><br><span class="line">&#125;</span><br><span class="line">简写为</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)&#123;&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>常和寄存器一起使用 char 8 位 寄存器8位</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> <span class="type">char</span> LEDNum = <span class="number">0</span>;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">最后 再取反</span><br><span class="line"></span><br><span class="line"><span class="number">0000</span> <span class="number">0001</span>       <span class="number">0000</span> <span class="number">0001</span> &lt;&lt; <span class="number">0</span></span><br><span class="line"><span class="number">0000</span> <span class="number">0010</span><span class="number">0000</span> <span class="number">0001</span> &lt;&lt; <span class="number">1</span></span><br><span class="line"><span class="number">0000</span> <span class="number">0100</span><span class="number">0000</span> <span class="number">0001</span> &lt;&lt; <span class="number">2</span></span><br><span class="line"><span class="number">0000</span> <span class="number">1000</span><span class="number">0000</span> <span class="number">0001</span> &lt;&lt; <span class="number">3</span></span><br><span class="line"><span class="number">0001</span> <span class="number">0000</span><span class="number">0000</span> <span class="number">0001</span> &lt;&lt; <span class="number">4</span></span><br><span class="line"><span class="number">0010</span> <span class="number">0000</span><span class="number">0000</span> <span class="number">0001</span> &lt;&lt; <span class="number">5</span></span><br><span class="line"><span class="number">0100</span> <span class="number">0000</span><span class="number">0000</span> <span class="number">0001</span> &lt;&lt; <span class="number">6</span></span><br><span class="line"><span class="number">1000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0001</span> &lt;&lt; <span class="number">7</span></span><br></pre></td></tr></table></figure><h2 id="数码管-138译码器"><a href="#数码管-138译码器" class="headerlink" title="数码管 138译码器"></a>数码管 138译码器</h2><ul><li>使用动态数码管模块 需要移动跳线帽位置</li></ul><p>动态数码管模块</p><p> 74HC245  双向数据缓冲器</p><p>有个DIR  IO 口</p><p>DIR 接 1 正向发送   此时跳线帽(J24黄色) 需要接到VCC</p><p>DIR 接0 反向发送    此时跳线帽(J24黄色) 需要接到GED</p><hr><ul><li>这个板子 这个跳线帽换不换位置好像都对(疑问中)</li></ul><hr><p>原理：74LS138选中那个数码管亮，数码管引脚 用来设置数字</p><p>数码管引脚定义:</p><ul><li>共阴极连接    咱的板子是这个  138译码器（这个原因）</li><li>共阳极连接</li></ul><p>共用引脚：会导致所选中的数码管都显示一个数字   因为共有引脚</p><p>利用视觉暂留：可以显示不管数码管显示不同数字</p><ul><li>138译码器</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">P2_4C</span><br><span class="line">P2_3B</span><br><span class="line">P2_2 A</span><br><span class="line"></span><br><span class="line">CBAY</span><br><span class="line">000y0LED1</span><br><span class="line">001y1LED2</span><br><span class="line">010y2LED3</span><br><span class="line">011y3LED4</span><br><span class="line">100y4LED5</span><br><span class="line">101y5LED6</span><br><span class="line">110y6LED7</span><br><span class="line">111y7LED8</span><br><span class="line"></span><br><span class="line">- 选中LED</span><br><span class="line">LED8 LED7 LED6 LED5 LED4 LED3 LED2 LED1 </span><br><span class="line">- 选中数字</span><br><span class="line">unsigned char NixieTable[]=&#123;0x3F,0x06,0x5B,0x4F,0x66,0x6D,0x7D,0x07,0x7F,0x6F&#125;;</span><br></pre></td></tr></table></figure><h3 id="动态数码管消影"><a href="#动态数码管消影" class="headerlink" title="动态数码管消影"></a>动态数码管消影</h3><ul><li>本代码用的是单片机直接扫描  硬件设备简单，但会耗费大量的单片机CPU时间   实现了数码管的动态显示</li><li>•专用驱动芯片：内部自带显存、扫描电路，单片机只需告诉它显示什么即可   TM1640 后期可以自己学习  有自己的通信协议</li><li>数码管显示  先位选 选择那个数码管 在段选 选择响应的数字</li></ul><p>位选 <del>段选 位选</del> 段选 位选 段选</p><p>数码管动态显示多个，会出现串位  数码管显示错位 </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">P0 = NixieTable[Number];<span class="comment">//位选 和 段选完成后</span></span><br><span class="line">Delay(<span class="number">1</span>);  <span class="comment">//延迟1秒 让 数码管显示稳定下来</span></span><br><span class="line">P0 = <span class="number">0x00</span>; <span class="comment">//将段选清0</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">有空自己学习一下  #if 0  好像在哪见过</span><br><span class="line">#ifdef,#if,#else,#elif,#undef</span><br></pre></td></tr></table></figure><h2 id="LCD1602液晶显示屏"><a href="#LCD1602液晶显示屏" class="headerlink" title="LCD1602液晶显示屏"></a>LCD1602液晶显示屏</h2><p>注意：</p><ul><li>使用LCD1602后 数码管就没用了 数码管显示乱码  LED有三个也不能用了  （看引脚接到那个寄存器上面了 就可以知道）</li><li>和其他器件都不冲突 所有可以用来调试</li><li>可以用螺丝刀调节IOE 用来调节显示屏的亮度    位置：黄色跳线帽的下面</li></ul><h2 id="矩阵键盘"><a href="#矩阵键盘" class="headerlink" title="矩阵键盘"></a>矩阵键盘</h2><p>须知：逐行扫描该板子P1_5(连接到了步进电机 然后涉及到蜂鸣器  蜂鸣器会一直响)会出问题  所以采用逐列扫描</p><ul><li>p1_5-&gt;步进电机 -&gt;BZ -&gt;蜂鸣器                                 (引脚冲突)</li></ul><p>1、原理：</p><ul><li><p>在键盘中按键数量较多时，为了减少I/O口的占用，通常将按键排列成矩阵形式</p></li><li><p>采用逐行或逐列的“扫描”，就可以读出任何位置按键的状态</p></li></ul><p>2、数码管扫描（输出扫描）</p><ul><li>原理：显示第1位→显示第2位→显示第3位→……，然后快速循环这个过程，最终实现所有数码管同时显示的效果</li></ul><p>3、矩阵键盘扫描（输入扫描）</p><ul><li>原理：读取第1行(列)→读取第2行(列) →读取第3行(列) → ……，然后快速循环这个过程，最终实现所有按键同时检测的效果</li></ul><hr><p>以上两种扫描方式的共性：节省I/O口</p><hr><p>4、使用：</p><ul><li>P1寄存器  P1_7~P1_4    P1_3~P1_0     4*4   16个矩阵键盘控制</li></ul>]]></content>
    
    
    <summary type="html">51单片机学习历程</summary>
    
    
    
    <category term="C++" scheme="https://aixiaocainiao.github.io/categories/C/"/>
    
    
    <category term="51" scheme="https://aixiaocainiao.github.io/tags/51/"/>
    
  </entry>
  
  <entry>
    <title>opencv编译命令</title>
    <link href="https://aixiaocainiao.github.io/posts/37604654.html"/>
    <id>https://aixiaocainiao.github.io/posts/37604654.html</id>
    <published>2023-04-19T13:32:40.100Z</published>
    <updated>2023-04-21T10:25:42.882Z</updated>
    
    <content type="html"><![CDATA[<h1 id="opencv编译命令"><a href="#opencv编译命令" class="headerlink" title="opencv编译命令"></a>opencv编译命令</h1><h2 id="C-Opencv"><a href="#C-Opencv" class="headerlink" title="C++ Opencv"></a>C++ Opencv</h2><p>编译命令:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">g++ -o your_executable your_source_file.cpp `pkg-config --cflags --libs opencv`</span><br></pre></td></tr></table></figure><h2 id="python-opencv"><a href="#python-opencv" class="headerlink" title="python opencv"></a>python opencv</h2><p>python opencv python2.7 cv2 版本对应<br>python程序前加：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-*- coding: utf-<span class="number">8</span> -*-</span><br></pre></td></tr></table></figure><p>注意：针对的是python2.7的版本 即python3一下的版本 </p><hr><p>import cv2</p><hr>]]></content>
    
    
    <summary type="html">opencv编译命令</summary>
    
    
    
    <category term="other" scheme="https://aixiaocainiao.github.io/categories/other/"/>
    
    
    <category term="opencv" scheme="https://aixiaocainiao.github.io/tags/opencv/"/>
    
  </entry>
  
  <entry>
    <title>conda使用方法</title>
    <link href="https://aixiaocainiao.github.io/posts/8a0944ef.html"/>
    <id>https://aixiaocainiao.github.io/posts/8a0944ef.html</id>
    <published>2023-04-19T13:32:40.094Z</published>
    <updated>2023-04-19T13:58:03.056Z</updated>
    
    <content type="html"><![CDATA[<h1 id="conda使用方法"><a href="#conda使用方法" class="headerlink" title="conda使用方法"></a>conda使用方法</h1><ul><li>常用命令<br>sudo apt update<br>更新所有软件<br>sudo apt upgrade<br>删除</li></ul><h2 id="conda使用"><a href="#conda使用" class="headerlink" title="conda使用"></a>conda使用</h2><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ul><li><p>创建独立环境<br>不能将需要用的软件或者其他要用的东西装在base环境中</p></li><li><p>创建一些独立的环境会比较方便我们做项目管理，不会有冗余，一个独立的小环境就像一间单独的小房间，彼此独立不会相互影响，这样就会可以方便我们管理不同依赖包的软件</p></li><li><p>建议： base环境中不要安装任何的包，保持干净，除非你知道这个包会对原生的环境造成什么样的影响</p></li></ul><p>conda create -n rnaseq   #创建conda小环境 - -n 用来指定环境的名称<br>conda create -n database python=3.7.3    #指定环境中需要带的python的版本</p><p>conda activate rnaseq     # 启动小环境</p><p>conda deactivate           #退出小环境</p><p>conda env list  / conda info —env    #查看共有多少个小环境</p><p>conda remove -n python —all     #删除conda小环境</p><h2 id="使用流程"><a href="#使用流程" class="headerlink" title="使用流程"></a>使用流程</h2><ul><li>ex:<br>conda create -n adr<br>conda activate rnaseq(name)     # 启动小环境</li></ul><p>这里面可以pip install 包 只存在于这个小环境中 对base(主环境)不受影响</p><h1 id="建议"><a href="#建议" class="headerlink" title="建议"></a>建议</h1><p>最好使用pip install 包名<br>实在下载不了的再用conda install 包名</p><ul><li><p>ipython<br>%run ./adr/main.py<br>exit</p></li><li><p>conda deactivate           #退出小环境</p></li></ul><h2 id="指定安装软件的版本（以fastqc为例）"><a href="#指定安装软件的版本（以fastqc为例）" class="headerlink" title="指定安装软件的版本（以fastqc为例）"></a>指定安装软件的版本（以fastqc为例）</h2><ul><li><p>在不指定版本的情况下，conda默认安装该软件的最新版，如果要安装旧的版本方法：</p><p>  先看看有哪些可以安装的版本 conda search fastqc<br>  安装指定版本的软件</p></li><li><p>conda install fastqc=0.11.7</p></li></ul><p>添加-y参数跳过确认的步骤 conda install -y fastqc=0.11.7<br>安装找不到软件的包</p><pre><code>确定一下conda是否能安装我们需要的软件确定名字是不是输入正确（尤其要注意，因为我不怎么长眼睛）确定好我们要安装的包在conda中的名字</code></pre><ul><li>查看conda中已经安装的软件</li></ul><p>conda list     #查看当前环境下用conda安装的软件</p><p>conda list fast*   # 查看符合正则表达式的软件</p><p>conda list -n base    # 查看指定环境下用conda安装的软件</p><ul><li>删除软件</li></ul><p>conda remove fastqc   # 删除该环境中的软件</p><p>conda remove -n rnaseq fastqc   # 删除指定环境下的软件</p><ul><li>升级软件</li></ul><p>conda update fastqc  #升级指定的软件</p><p>conda update conda    #升级conda本身</p><ul><li>小tips<pre><code>conda可以一次安装多个软件包</code></pre>有时候只要软件比如说我们的conda不影响我们的使用就不需要去管<br>指定下载该软件的旧版本就可以完成该软件的降级</li></ul>]]></content>
    
    
    <summary type="html">conda使用方法</summary>
    
    
    
    <category term="Python" scheme="https://aixiaocainiao.github.io/categories/Python/"/>
    
    
    <category term="conda" scheme="https://aixiaocainiao.github.io/tags/conda/"/>
    
  </entry>
  
  <entry>
    <title>ubuntu学习历程</title>
    <link href="https://aixiaocainiao.github.io/posts/241fcd16.html"/>
    <id>https://aixiaocainiao.github.io/posts/241fcd16.html</id>
    <published>2023-04-16T06:53:20.183Z</published>
    <updated>2023-04-16T07:05:42.563Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ubuntu学习"><a href="#ubuntu学习" class="headerlink" title="ubuntu学习"></a>ubuntu学习</h1><h2 id="慢慢更新"><a href="#慢慢更新" class="headerlink" title="慢慢更新"></a>慢慢更新</h2><p>一、ubuntu右键文档问题解决<br>模板里面创建文档<br>cd 到模板里面<br>touch 空白文档 txt文档</p><p>就完成了<br>(创建了两个文档类型)</p><p>二、ubuntu和windows时间不同步问题<br>2.0<br>准备工作:切换安装源  自动选择最优<br>2.1<br>时间同步工具:<br>sudo apt install ntpdate<br>出现无法定位 可以<br>执行<br>sudo apt-get install<br>sudo apt-get update<br>2.2<br>互联网同步时间<br>sudo ntpdate time.windows.com<br>2.3<br>sudo hwclock —localtime —systohc</p><p>三、启动菜单的默认选项 选为windows</p><p>sudo gedit /etc/default/grub</p><p>GRUB_DEFAULT=2 改为0<br>更新设置<br>sudo update-grub</p><p>四.ros安装流程 ros -noetic<br>4.1清华安装源<br>sudo sh -c ‘. /etc/lsb-release &amp;&amp; echo “deb <a href="http://mirrors.tuna.tsinghua.edu.cn/ros/ubuntu/">http://mirrors.tuna.tsinghua.edu.cn/ros/ubuntu/</a> <code>lsb_release -cs</code> main” &gt; /etc/apt/sources.list.d/ros-latest.list’<br>4.2.设置key<br>sudo apt-key adv —keyserver ‘hkp://keyserver.ubuntu.com:80’ —recv-key C1CF6E31E6BADE8868B172B4F42ED6FBAB17C654<br>4.3安装<br>sudo apt update<br>sudo apt install ros-noetic-desktop-full<br>4.4配置环境变量<br>echo “source /opt/ros/noetic/setup.bash” &gt;&gt; ~/.bashrc<br>source ~/.bashrc</p><p>4.5- 卸载ros指令<br>sudo apt remove ros-noetic-*<br>4.6安装构建依赖<br>sudo apt install python3-rosdep python3-rosinstall python3-rosinstall-generator python3-wstool build-essential</p><p>解决init 和 update失败的问题</p><p>sudo apt-get install python3-pip<br>sudo pip3 install 6-rosdep<br>sudo 6-rosdep</p><p>接着执行就可以了<br>sudo rosdep init<br>sudo update </p><p>五、vscode的安装<br>vscode 的安装 </p><ul><li>浏览器下载deb</li><li>sudo dpkg -i 安装包<br>六、超级终端的安装<br>sudo apt-get install termianator</li></ul><p>ctrl+alt+t 新建终端<br>下面这个建立在上面那个的基础之上<br>ctrl+shift+t 同一个页面切换终端<br>七、cmake的安装升级<br>1、官网安装<br><a href="https://cmake.org/download/">https://cmake.org/download/</a><br>下载tar ;linux版本即可<br>2、解压后编译</p><p>指引到目录下，进行编译即可</p><pre><code>cd ~/Downloads/cmake-3.22.2./configuremakesudo make install</code></pre><p>3、版本覆盖</p><pre><code>    在解压后编译 后，其实再一开始不卸载老版本的cmake的的时候，安装编译新版本的是不能立刻变更的，需要软连接覆盖的。使用which cmake查找cmake的安装路径，新版本的cmake默认编译安装的路径是在/usr/local/bin/cmake，而我们系统会默认去/usr/bin中去寻找老版本的cmake。做一个链接覆盖即可：</code></pre><p>sudo ln -sf /usr/local/bin/cmake /usr/bin</p><p>八、升级gcc<br>1.出现下面情况<br>lib/libxslab2.so: undefined reference to<br>`std::__cxx11::basic_stringstream<char, std::char_traits<char>,<br>std::allocator<char> &gt;::basic_stringstream()@GLIBCXX_3.4.26’</p><p>2、解决方案</p><h1 id="Install-and-use-gcc9"><a href="#Install-and-use-gcc9" class="headerlink" title="Install and use gcc9"></a>Install and use gcc9</h1><p>sudo add-apt-repository ppa:ubuntu-toolchain-r/test<br>sudo apt update<br>sudo apt install gcc-9<br>sudo apt install g++-9<br>sudo rm /usr/bin/gcc<br>sudo rm /usr/bin/g++<br>sudo ln -s /usr/bin/gcc-9 /usr/bin/gcc<br>sudo ln -s /usr/bin/g++-9 /usr/bin/g++</p><p>九、安装配置rplidar(思岚雷达1）<br>mkdir -p rplidar/src<br>cd rplidar/src<br>git clone <a href="https://github.com/Slamtec/rplidar_ros.git">https://github.com/Slamtec/rplidar_ros.git</a><br>cd ..<br>catkin_make<br>sudo gedit ~/.bashrc<br><!-- 在文件最后加入 --><br>source /home/yunfang/rplidar/devel/setup.bash(最好使用绝对路径)<br><!-- 保存并退出 --><br>source ~/.bashrc<br><!-- 在插上雷达之后要进行以下工作 --><br><!-- 检查rplidar串口的权限 --><br>ls -l /dev |grep ttyUSB<br><!-- 输入指令添加权限(我这里是USB0) --><br>sudo chmod 666 /dev/ttyUSB0<br><!-- 启动雷达 --><br>roslaunch rplidar_ros rplidar_s2.launch</p><p>十、安装 Pangolin<br>1.安装依赖<br>sudo apt update<br>sudo apt upgrade<br>sudo apt install libglew-dev cmake libboost-dev libboost-thread-dev<br>libboost-filesystem-dev libeigen3-dev -y</p><p>2.进⼊ 创建目录并进入<br>mkdir Pangolin<br>cd Pangolin<br>git clone <a href="https://github.com/stevenlovegrove/Pangolin.git">https://github.com/stevenlovegrove/Pangolin.git</a><br>cd Pangolinmkdir build &amp;&amp; cd build<br>cmake ..<br>sudo make -j8<br>sudo make install</p><p>更新动态库链接</p><p>sudo ldconfig</p><p>十一、rosdep失败使用rosdepc<br>sudo apt-get install python3-pip<br>sudo pip3 install 6-rosdep<br>sudo 6-rosdep<br>sudo rosdep init<br>rosdep update</p><p>十二、安装并配置 opencv4.6.0<br>参考⽹址⼀ <a href="https://blog.csdn.net/weixin_44796670/article/details/115900538">https://blog.csdn.net/weixin_44796670/article/details/115900538</a><br>参考⽹址⼆ <a href="https://blog.csdn.net/KIK9973/article/details/118830187?">https://blog.csdn.net/KIK9973/article/details/118830187?</a><br>ops_request_misc=&amp;request_id=&amp;biz_id=102&amp;utm_term=Ubuntu18.04 安装<br>OpenCV&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-4-<br>118830187.nonecase&amp;spm=1018.2226.3001.4187</p><p>1、安装依赖环境<br>sudo apt install -y g++<br>sudo apt install -y cmake<br>sudo apt install -y make<br>sudo apt install -y wget unzip<br>2、安装opencv的依赖库<br>sudo apt-get install build-essential libgtk2.0-dev libgtk-3-dev libavcodec-<br>dev libavformat-dev libjpeg-dev libswscale-dev libtiff5-dev</p><p>3、下载 opencv4.6.0 源⽂件<br>wget -O opencv.zip <a href="https://github.com/opencv/opencv/archive/4.6.0.zip">https://github.com/opencv/opencv/archive/4.6.0.zip</a><br>4、编译源⽂件<br>进⼊解压后的 opencv ⽂件夹中执⾏以下命令<br>mkdir build<br>cd build<br>cmake -D CMAKE_BUILD_TYPE=Release -D OPENCV_GENERATE_PKGCONFIG=YES ..<br>make -j12</p><p>PS: 这里的make -j12是根据所使⽤电脑的 CPU 核⼼数来选择的</p><p>5、安装动态库及头文件<br>sudo make install</p><p>6、配置 pkg-conﬁg 环境<br>sudo gedit /etc/profile.d/pkgconfig.sh<br>&lt;打开 config 文件，在文件后面加上一行&gt;<br>export PKG_CONFIG_PATH=/usr/local/lib/pkgconfig:$PKG_CONFIG_PATH<br>&lt;保存并退出&gt;<br>source /etc/profile</p><p>7、配置动态库环境<br>sudo gedit /etc/ld.so.conf.d/opencv4.conf<br>&lt;打开 config 文件，在该文件末尾加上 opencv 的 lib 路径&gt;<br>/usr/local/lib<br>&lt;保存并退出&gt;<br>sudo ldconfig</p><p>git clone <a href="https://github.com/xiangli0608/cartographer_detailed_comments_ws.git">https://github.com/xiangli0608/cartographer_detailed_comments_ws.git</a></p><p>十三、微信的安装<br>​5、kylin.wine封装版【强烈推荐】</p><p>与deepin一样，ubuntukylin（优麒麟）系统也第三方封装的ubuntu。<br>在官方网站可以看到，有提供微信客户端下载</p><p>ukylin-wechat_3.0.0_amd64.deb<br>ukylin-wine_70.6.3.25_amd64.deb</p><p>同样也是基于wine的，一共包含两个deb文件，其中一个封装的是一个3.0的微信！！</p><p> 1.下载Wine环境包：<br> <a href="http://archive.ubuntukylin.com/software/pool/partner/ukylin-wine_70.6.3.25_amd64.deb">http://archive.ubuntukylin.com/software/pool/partner/ukylin-wine_70.6.3.25_amd64.deb</a><br>​<br>2.下载微信（wine）包：<br><a href="http://archive.ubuntukylin.com/software/pool/partner/ukylin-wechat_3.0.0_amd64.deb">http://archive.ubuntukylin.com/software/pool/partner/ukylin-wechat_3.0.0_amd64.deb</a><br>​<br>3.终端输入：<br>sudo apt-get install -f -y ./ukylin-wine_70.6.3.25_amd64.deb<br>sudo apt-get install -f -y ./ukylin-wechat_3.0.0_amd64.deb</p><p> 十四、gcc<br>原来gcc g++ version 7.5<br>十五、超级终端<br> sudo apt install terminator<br>十六、cartographer ubuntu18<br>1.下载cartographer_install并解压<br>cd cartographer_install<br>ls<br>./auto-carto-build.sh<br>会自动安装所有依赖</p><p>mkdir carto_ws<br>cd carto_ws<br>git clone <a href="https://github.com/xiangli0608/cartographer_detailed_comments_ws.git">https://github.com/xiangli0608/cartographer_detailed_comments_ws.git</a><br>cd cartographer_detailed_comments_ws<br>ls<br>./catkin_make.sh<br>自动编译</p><p>mkdir bagfiles<br>将数据集放进来</p><p>cd carto_ws<br>cd cartographer_detailed_comments_ws<br>source install_isolated/setup.bash<br>rospack profile<br>roslaunch cartographer_ros lx_rs16_2d_outdoor.launch<br>保存地图<br>rosrun map-server map-saver<br>地图位置 看你在哪里执行 就保存到哪里<br>或者<br>cd carto_ws<br>cd cartographer_detailed_comments_ws<br>cd src<br>./finish_slam_2d.sh  执行脚本 保存2d地图</p><p>十四、edge浏览器的安装<br>官网下载<br>sudo dpkg -i 安装包名字<br>sudo apt-get install -f</p><p>十五、基于ubuntu18.04和ros melodic的Turtlebot3 仿真<br>一、TurtleBot3 简介</p><pre><code>    TurtleBot3 是一个小型，低成本，完全可编程，基于 ROS 的移动机器人。它旨在用于教育，研究，产品原型和爱好应用的目的。TurtleBot3 的目标是大幅降低平台的尺寸和价格，而不会牺牲性能，功能和质量。由于提供了其他选项，如底盘，计算机和传感器，TurtleBot3 可以通过各种方式进行定制。TurtleBot3 应用 了SBC（单板计算机），深度传感器和 3D 打印的最新技术进步等技术。</code></pre><p>二、安装 TurtleBot3 仿真</p><p> 1.安装依赖<br>sudo apt-get install ros-melodic-joy ros-melodic-teleop-twist-joy ros-melodic-teleop-twist-keyboard ros-melodic-laser-proc ros-melodic-rgbd-launch ros-melodic-depthimage-to-laserscan ros-melodic-rosserial-arduino ros-melodic-rosserial-python ros-melodic-rosserial-server ros-melodic-rosserial-client ros-melodic-rosserial-msgs ros-melodic-amcl ros-melodic-map-server ros-melodic-move-base ros-melodic-urdf ros-melodic-xacro  ros-melodic-compressed-image-transport ros-melodic-rqt-image-view ros-melodic-gmapping ros-melodic-navigation  ros-melodic-interactive-markers rviz<br>2.下载资源包<br>mkdir -p ~/turtlebot3_ws/src/<br>cd ~/turtlebot3_ws/src/<br>git clone <a href="https://github.com/ROBOTIS-GIT/turtlebot3_simulations.git">https://github.com/ROBOTIS-GIT/turtlebot3_simulations.git</a><br>git clone <a href="https://github.com/ROBOTIS-GIT/turtlebot3_msgs.git">https://github.com/ROBOTIS-GIT/turtlebot3_msgs.git</a><br>git clone <a href="https://github.com/ROBOTIS-GIT/turtlebot3.git">https://github.com/ROBOTIS-GIT/turtlebot3.git</a><br>3.编译<br>cd ~/turtlebot3_ws<br>catkin_make<br>三、启动 TurtleBot3 仿真</p><p>1.先将 TurtleBot3 导入，再启动仿真环境（rviz）<br>export TURTLEBOT3_MODEL=burger<br>source turtlebot3_ws/devel/setup.bash<br>roslaunch turtlebot3_fake turtlebot3_fake.launch<br>2.控制TurtleBot3移动</p><p>TurtleBot3 仿真节点不依赖实体机器人，也可以在 rviz 里通过 teleop 节点进行控制。<br>export TURTLEBOT3_MODEL=burger<br>source turtlebot3_ws/devel/setup.bash<br>roslaunch turtlebot3_teleop turtlebot3_teleop_key.launch</p><p>3.加载模型(gazebo )</p><p>第一次使用 gazebo 需要比较长的时间加载模型，也可以手动加载模型，第一次使用 Turtlebot3 的 gazebo 仿真，需要把 Turtlebot3 的模型文件，复制到 gazebo 的模型目录里。</p><pre><code>mkdir -p ~/.gazebo/models/cp -r ~/turtlebot3_simulations路径/turtlebot3_simulations/turtlebot3_gazebo/worlds ~/.gazebo/models/</code></pre><p>例如我的</p><pre><code>mkdir -p ~/.gazebo/models/cp -r ~/turtlebot3_ws/scr/turtlebot3_simulations/turtlebot3_gazebo/worlds ~/.gazebo/models/</code></pre><p>4.设置模型参数</p><p>设置模型参数，指定使用那种机器人型号： burger 或者 waffle</p><p> 5.启动世界地图</p><p>启动世界地图，默认的空白地图环境中加载 Turtlebot3 机器人<br>source turtlebot3_ws/devel/setup.bash<br>roslaunch turtlebot3_gazebo turtlebot3_empty_world.launch<br>四、TurtleBot3 仿真: 复杂地图</p><ol><li>（1）启动更复杂些的地图<br>source turtlebot3_ws/devel/setup.bash<br>export TURTLEBOT3_MODEL=burger<br>roslaunch turtlebot3_gazebo turtlebot3_world.launch</li></ol><p>1.（2）或者房间地图</p><pre><code>export TURTLEBOT3_MODEL=burgersource turtlebot3_ws/devel/setup.bash roslaunch turtlebot3_gazebo turtlebot3_house.launch</code></pre><p>2.用键盘控制 turtlebot3</p><pre><code>export TURTLEBOT3_MODEL=burgersource turtlebot3_ws/devel/setup.bash roslaunch turtlebot3_teleop turtlebot3_teleop_key.launch</code></pre><ol><li><p>启动仿真</p><p> export TURTLEBOT3_MODEL=burger<br> source turtlebot3_ws/devel/setup.bash<br> roslaunch turtlebot3_gazebo turtlebot3_simulation.launch</p></li><li><p>启动 RVIZ 可视化</p><p> export TURTLEBOT3_MODEL=burger<br> source turtlebot3_ws/devel/setup.bash<br> roslaunch turtlebot3_gazebo turtlebot3_gazebo_rviz.launch</p></li></ol><p>五、TurtleBot3 仿真:SLAM</p><ol><li>安装 turtlebot3 相关的 ROS 包</li></ol><p>sudo apt-get install ros-melodic-turtlebot*</p><p>或者：</p><pre><code>sudo apt-get install ros-melodic-turtlebot3 ros-melodic-turtlebot3-descriptionros-melodic-turtlebot3-gazebo ros-melodic-turtlebot3-msgsros-melodic-turtlebot3-slam ros-melodic-turtlebot3-teleop</code></pre><ol><li>目前激光 SLAM 的建图方法有很多中，turtlebot3 支持 gmapping、cartographer、hector、 karto、frontier_exploration，ROS Melodic 版本官方的软件源里只有 karto。用户可以根据 需要安装。</li></ol><p>sudo apt-get install ros-melodic-slam-karto</p><ol><li>建图</li></ol><p>（1）每个新终端都要设置环境变量，也可以是burger，waffle，waffle_pi</p><p>export TURTLEBOT3_MODEL=burger </p><p>（2）加载环境</p><pre><code>export TURTLEBOT3_MODEL=burgerroslaunch turtlebot3_gazebo turtlebot3_world.launch</code></pre><p>也可选择其他环境，或自己搭环境 </p><p>（3） 建图时要切换到这个终端，用键盘控制turtlebot运动</p><pre><code>source turtlebot3_ws/devel/setup.bash roslaunch turtlebot3_teleop turtlebot3_teleop_key.launch</code></pre><p> （4）创建栅格地图 </p><pre><code>source turtlebot3_ws/devel/setup.bash roslaunch turtlebot3_slam turtlebot3_slam.launch slam_methods:=karto</code></pre><ol><li><p>保存地图：地图建完以后将地图保存下来：</p><p> mkdir -p ~/housemap<br> rosrun map_server map_saver -f ~/housemap/housemap</p></li><li><p>导航。利用刚才构建的地图进行 turtlebot 的自主导航仿真实验：</p><p> source turtlebot3_ws/devel/setup.bash<br> export TURTLEBOT3_MODEL=burger<br> roslaunch turtlebot3_gazebo turtlebot3_house.launch</p><p> source turtlebot3_ws/devel/setup.bash<br> roslaunch turtlebot3_navigation turtlebot3_navigation.launch<br> map_file:=/home/zhang/housemap/housemap.yaml</p></li></ol><p>鼠标选择工具栏中的“2D Nav Goal”,在地图上任意设置一个目标，turtlebot3会自动规划路径移动到目标位置</p><p>六.将模型写入.bashrc文件中<br>echo “export TURTLEBOT3_MODEL=burger” &gt;&gt; ~/.bashrc</p><p>打开一个新终端输入</p><p>sudo apt-get install ros-melodic-gmapping<br>roslaunch turtlebot3_slam turtlebot3_slam.launch slam_methods:=gmapping<br>roslaunch turtlebot3_teleop turtlebot3_teleop_key.launch</p><p>顺利的话会显示下图，并且可以控制小车建图。如果想要使用Hector的话就把gampping改为hector<br>要进行cartographer建图，首先要安装cartographer,参考下文博主教程</p><pre><code>https://blog.csdn.net/weixin_39458342/article/details/103276265</code></pre><p>安装成功之后</p><p>roslaunch turtlebot3_gazebo turtlebot3_house.launch</p><p>roslaunch turtlebot3_slam turtlebot3_slam.launch slam_methods:=cartographer</p><p>这个情况是gazebo_ros_imu的一个bug<br>解决办法：<br>roslaunch turtlebot3_slam turtlebot3_slam.launch slam_methods:=cartographer configuration_basename:=turtlebot3_lds_2d_gazebo.lua</p><p>cmake version 3.10.2</p>]]></content>
    
    
    <summary type="html">ubuntu三年慢慢学</summary>
    
    
    
    <category term="SF" scheme="https://aixiaocainiao.github.io/categories/SF/"/>
    
    
    <category term="ubuntu" scheme="https://aixiaocainiao.github.io/tags/ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>makefile学习</title>
    <link href="https://aixiaocainiao.github.io/posts/d84dbbc6.html"/>
    <id>https://aixiaocainiao.github.io/posts/d84dbbc6.html</id>
    <published>2023-04-16T06:34:45.711Z</published>
    <updated>2023-04-16T06:49:43.756Z</updated>
    
    <content type="html"><![CDATA[<h1 id="makefile的学习"><a href="#makefile的学习" class="headerlink" title="makefile的学习"></a>makefile的学习</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">普通编译方式</span><br><span class="line">gcc main.c -o main</span><br></pre></td></tr></table></figure><h2 id="makefile用法"><a href="#makefile用法" class="headerlink" title="makefile用法:"></a>makefile用法:</h2><ul><li><p>新建文件 makefile(大小写目前一样)<br>格式:<br>target:dependencies<br>  command<br>参数意义:<br>target-可执行文件的名字<br>dependencied依赖项<br>tab键<br>command 编译代码</p></li><li><p>注意<br>make clean 可以单独使用这条命令行<br>会执行 rm *.o main 这条命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">clean:</span><br><span class="line">  rm *.o main</span><br></pre></td></tr></table></figure></li><li><p>第一种（最简单的）</p></li></ul><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">main:main.c</span></span><br><span class="line">  gcc main.c -o main</span><br><span class="line"><span class="section">clean:</span></span><br><span class="line">  rm *.o main</span><br></pre></td></tr></table></figure><ul><li>第二种</li></ul><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">main:main.c max.o</span></span><br><span class="line">  gcc main.c max.o -o main</span><br><span class="line"><span class="section">max.o:max.c</span></span><br><span class="line">  gcc -c max.c </span><br><span class="line"><span class="section">clean:</span></span><br><span class="line">  rm *.o main</span><br><span class="line">等价于：</span><br><span class="line">gcc main.c max.c -o main</span><br></pre></td></tr></table></figure><ul><li>第二种加强版</li></ul><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">main:main.c max.o min.o</span></span><br><span class="line">  gcc main.c max.o min.o -o main</span><br><span class="line"><span class="section">max.o:max.c</span></span><br><span class="line"> gcc -c max.c </span><br><span class="line"><span class="section">min.o:min.c</span></span><br><span class="line"> gcc -c min.c</span><br><span class="line"><span class="section">clean:</span></span><br><span class="line"> rm *.o main</span><br></pre></td></tr></table></figure><ul><li>定义编译器<br>定义：<br>CC = gcc<br>使用：<br>$(CC)</li></ul><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">CC = gcc</span><br><span class="line">CFLAGS = -lm -Wall -g</span><br><span class="line"></span><br><span class="line"><span class="section">main:main.c max.o min.o</span></span><br><span class="line"> <span class="variable">$(CC)</span> <span class="variable">$(CFLAGS)</span> main.c max.o min.o -o main</span><br><span class="line"></span><br><span class="line"><span class="section">max.o:max.c</span></span><br><span class="line"> <span class="variable">$(CC)</span> <span class="variable">$(CFLAGS)</span> -c max.c </span><br><span class="line"></span><br><span class="line"><span class="section">min.o:min.c</span></span><br><span class="line"> <span class="variable">$(CC)</span> <span class="variable">$(CFLAGS)</span> -c min.c</span><br><span class="line"></span><br><span class="line"><span class="section">clean:</span></span><br><span class="line"> rm *.o main</span><br></pre></td></tr></table></figure><ul><li><p>一个文件出现多个main函数 需要编辑多个执行文件</p></li><li><p>采取 下面措施</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">CC = gcc</span><br><span class="line">CFLAGS = -lm -Wall -g</span><br><span class="line"></span><br><span class="line">all:main_max main_min</span><br><span class="line"></span><br><span class="line">main_max:main_max.c max.o min.o</span><br><span class="line">$(CC) $(CFLAGS) main_max.c max.o min.o -o main_max</span><br><span class="line"></span><br><span class="line">main_min:main_min.c max.o min.o</span><br><span class="line">$(CC) $(CFLAGS) main_min.c max.o min.o -o main_min</span><br><span class="line"></span><br><span class="line">max.o:max.c</span><br><span class="line">$(CC) $(CFLAGS) -c max.c </span><br><span class="line"></span><br><span class="line">min.o:min.c</span><br><span class="line">$(CC) $(CFLAGS) -c min.c</span><br><span class="line"></span><br><span class="line">clean:</span><br><span class="line">rm *.o main_max main_min</span><br></pre></td></tr></table></figure></li><li>参数详解<br>  如果没有all:main_max main_min<br>  程序只会执行<br>  main_max:main_max.c max.o min.o<br>  $(CC) $(CFLAGS) main_max.c max.o min.o -o main_max<br>  任何寻找指定的依赖<br>  然后就不会执行<br>  main_min:main_min.c max.o min.o<br>  $(CC) $(CFLAGS) main_min.c max.o min.o -o main_min</li></ul>]]></content>
    
    
    <summary type="html">makefile的学习</summary>
    
    
    
    <category term="C++" scheme="https://aixiaocainiao.github.io/categories/C/"/>
    
    
    <category term="makefile" scheme="https://aixiaocainiao.github.io/tags/makefile/"/>
    
  </entry>
  
  <entry>
    <title>ubuntu系统卸载</title>
    <link href="https://aixiaocainiao.github.io/posts/677099ed.html"/>
    <id>https://aixiaocainiao.github.io/posts/677099ed.html</id>
    <published>2023-04-11T12:14:11.134Z</published>
    <updated>2023-04-18T23:51:53.189Z</updated>
    
    <content type="html"><![CDATA[<p>下载磁盘精灵</p><p>解压缩 找到 exe 右键管理员打开</p><p>找到esp(3)这个 下面是Linux图标 四个全部删除  邮件删除分区</p><p>删除完毕后</p><p>点击保存</p><p>找到F盘 扩容分区 保存 </p>]]></content>
    
    
    <summary type="html">ubuntu系统卸载的流程</summary>
    
    
    
    <category term="SF" scheme="https://aixiaocainiao.github.io/categories/SF/"/>
    
    
    <category term="ubuntu" scheme="https://aixiaocainiao.github.io/tags/ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>thread的学习</title>
    <link href="https://aixiaocainiao.github.io/posts/b032c142.html"/>
    <id>https://aixiaocainiao.github.io/posts/b032c142.html</id>
    <published>2023-04-10T14:11:40.377Z</published>
    <updated>2023-04-10T14:21:31.272Z</updated>
    
    <content type="html"><![CDATA[<h1 id="线程thread的学习"><a href="#线程thread的学习" class="headerlink" title="线程thread的学习"></a>线程thread的学习</h1><p>//线程id 线程函数得到线程id<br>pthread_t pthread_self();<br>/*</p><h2 id="线程创建函数"><a href="#线程创建函数" class="headerlink" title="线程创建函数:"></a>线程创建函数:</h2><p>​      int pthread_create(pthread_t <em>thread,const pthread_attr_t </em>attr,<br>​                        void <em>(</em>start_routinue)(void <em>) ,void</em>arg);<br>​      thread: 传出参数，是无符号长整形数，线程创建成功，会将线程 ID 写入到这个指针指向的内存中<br>​      attr: 线程的属性，一般情况下使用默认属性即可，写 NULL<br>​      start_routine: 函数指针，创建出的子线程的处理动作，也就是该函数在子线程中执行。<br>​      arg: 作为实参传递到 start_routine 指针指向的函数内部</p><pre><code>  返回值：线程创建成功返回 0，创建失败返回对应的错误号  注意：        # pthread_create 函数的定义在某一个库中, 编译的时候需要加库名 pthread        $ gcc pthread_create.c -lpthread</code></pre><h2 id="线程退出函数"><a href="#线程退出函数" class="headerlink" title="线程退出函数"></a>线程退出函数</h2><p>​      void pthread_exit(void <em>retval)<br>​      参数：线程退出的时候携带的数据，当前子线程的主线程会得到该数据。如果不需要使用，指定为 NULL<br>线程回收函数<br>​      #include <pthread.h><br>​      // 这是一个阻塞函数, 子线程在运行这个函数就阻塞<br>​      // 子线程退出, 函数解除阻塞, 回收对应的子线程资源, 类似于回收进程使用的函数 wait()<br>​      int pthread_join(pthread_t thread,void *</em>retval)<br>​      参数:<br>​            thread: 要被回收的子线程的线程 ID<br>​            retval: 二级指针，指向一级指针的地址，是一个传出参数，<br>​               这个地址中存储了 pthread_exit () 传递出的数据，如果不需要这个参数，可以指定为 NULL<br>​            返回值：线程回收成功返回 0，回收失败返回错误号。<br>线程分离函数:<br>​      int pthread_detach(pthread_t thread);<br>​            在某些情况下，程序中的主线程有属于自己的业务处理流程，<br>​            如果让主线程负责子线程的资源回收，调用 pthread_join()<br>​            只要子线程不退出主线程就会一直被阻塞，主要线程的任务也就不能被执行了。<br>​            在线程库函数中为我们提供了线程分离函数 pthread_detach()，<br>​            调用这个函数之后指定的子线程就可以和主线程分离，当子线程退出的时候，<br>​            其占用的内核资源就被系统的其他进程接管并回收了。<br>​            线程分离之后在主线程中使用 pthread_join() 就回收不到子线程资源了。</p><h2 id="线程取消函数"><a href="#线程取消函数" class="headerlink" title="线程取消函数"></a>线程取消函数</h2><p>​      // 参数是子线程的线程ID<br>​      int pthread_cancel(pthread_t thread);<br>​      线程取消的意思就是在某些特定情况下在一个线程中杀死另一个线程。使用这个函数杀死一个线程需要分两步：<br>​            在线程 A 中调用线程取消函数 pthread_cancel，指定杀死线程 B，这时候线程 B 是死不了的<br>​            在线程 B 中进程一次系统调用（从用户区切换到内核区），否则线程 B 可以一直运行。<br>​            这其实和七步断肠散、含笑半步癫的功效是一样的，吃了毒药不动或者不笑也没啥事儿<br>​            参数：要杀死的线程的线程 ID<br>​            返回值：函数调用成功返回 0，调用失败返回非 0 错误号。<br>线程ID比较函数<br>​      在 Linux 中线程 ID 本质就是一个无符号长整形，<br>​      因此可以直接使用比较操作符比较两个线程的 ID，<br>​      但是线程库是可以跨平台使用的，在某些平台上 pthread_t 可能不是一个单纯的整形，<br>​      这中情况下比较两个线程的 ID 必须要使用比较函数，函数原型如下<br>​      </p><pre><code>  int pthread_equal(pthread_t t1, pthread_t t2);  参数：t1 和 t2 是要比较的线程的线程 ID  返回值：如果两个线程 ID 相等返回非 0 值，如果不相等返回 0</code></pre><h2 id="互斥锁函数："><a href="#互斥锁函数：" class="headerlink" title="互斥锁函数："></a>互斥锁函数：</h2><p>​      在 Linux 中互斥锁的类型为 pthread_mutex_t，创建一个这种类型的变量就得到了一把互斥锁：<br>​            pthread_mutex_t  mutex;<br>​      // 初始化互斥锁<br>​      // restrict: 是一个关键字, 用来修饰指针, 只有这个关键字修饰的指针可以访问指向的内存地址, 其他指针是不行的<br>​      int pthread_mutex_init(pthread_mutex_t <em>restrict mutex,<br>​            const pthread_mutexattr_t </em>restrict attr);<br>​      // 释放互斥锁资源<br>​      int pthread_mutex_destroy(pthread_mutex_t <em>mutex);<br>​      参数:<br>​      mutex: 互斥锁变量的地址<br>​      attr: 互斥锁的属性，一般使用默认属性即可，这个参数指定为 NULL<br>​      // 修改互斥锁的状态, 将其设定为锁定状态, 这个状态被写入到参数 mutex 中<br>​      int pthread_mutex_lock(pthread_mutex_t </em>mutex);<br>​      这个函数被调用，首先会判断参数 mutex 互斥锁中的状态是不是锁定状态:</p><pre><code>  没有被锁定，是打开的，这个线程可以加锁成功，这个这个锁中会记录是哪个线程加锁成功了  如果被锁定了，其他线程加锁就失败了，这些线程都会阻塞在这把锁上  当这把锁被解开之后，这些阻塞在锁上的线程就解除阻塞了，并且这些线程是通过竞争的方式对这把锁加锁，没抢到锁的线程继续阻塞  // 尝试加锁  int pthread_mutex_trylock(pthread_mutex_t *mutex);  调用这个函数对互斥锁变量加锁还是有两种情况:  如果这把锁没有被锁定是打开的，线程加锁成功  如果锁变量被锁住了，调用这个函数加锁的线程，不会被阻塞，加锁失败直接返回错误号  C  1  2  // 对互斥锁解锁  int pthread_mutex_unlock(pthread_mutex_t *mutex);</code></pre><blockquote><p>参考网址 爱编程的大斌 <a href="https://subingwen.cn/">爱编程的大丙 (subingwen.cn)</a></p></blockquote><p>注意：以后忘记了记得去学习</p>]]></content>
    
    
    <summary type="html">C和C++中关于线程的学习</summary>
    
    
    
    <category term="C++" scheme="https://aixiaocainiao.github.io/categories/C/"/>
    
    
    <category term="thread" scheme="https://aixiaocainiao.github.io/tags/thread/"/>
    
  </entry>
  
  <entry>
    <title>ubuntu解压命令</title>
    <link href="https://aixiaocainiao.github.io/posts/e61dc118.html"/>
    <id>https://aixiaocainiao.github.io/posts/e61dc118.html</id>
    <published>2023-04-09T07:49:32.971Z</published>
    <updated>2023-04-09T08:15:01.684Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ubuntu压缩指令"><a href="#ubuntu压缩指令" class="headerlink" title="ubuntu压缩指令"></a>ubuntu压缩指令</h1><h2 id="详情"><a href="#详情" class="headerlink" title="详情"></a>详情</h2><pre><code>tgz格式解压到当前文件夹：tar -zxvf xxx.tar.gzzip格式解压到当前文件夹：unzip xxx.ziptar.xz格式解压首先：xz -d xxx.tar.xz 解压得到tar文件 ;其次：tar -xvf xxx.tar得到完整解压文件。文件夹压缩：sudo tar jcvf xxx.tar.bz2 xxx</code></pre><h2 id="一、解压-tar-gz格式到指定的目录下："><a href="#一、解压-tar-gz格式到指定的目录下：" class="headerlink" title="一、解压.tar.gz格式到指定的目录下："></a>一、解压.tar.gz格式到指定的目录下：</h2><p>命令格式为：tar -zxvf 【压缩包文件名.tar.gz】 -C 【路径】/</p><p>例如：tar -zxvf japan.tar.gz -C /tmp/</p><h2 id="二、解压-tar-bz2格式到指定的目录下："><a href="#二、解压-tar-bz2格式到指定的目录下：" class="headerlink" title="二、解压.tar.bz2格式到指定的目录下："></a>二、解压.tar.bz2格式到指定的目录下：</h2><p>命令格式：tar -jxvf 【压缩包文件名.tar.bz2】 -C 【路径】/</p><p>例如：tar -zxvf japan.tar.bz2 -C /tmp/</p><h2 id="三、压缩-tar-gz格式到指定目录下"><a href="#三、压缩-tar-gz格式到指定目录下" class="headerlink" title="三、压缩.tar.gz格式到指定目录下"></a>三、压缩.tar.gz格式到指定目录下</h2><p>命令格式：tar -zcvf 【目录】/ 【压缩包文件名.tar.gz】【源文件】</p><p>例如：tar -zcvf /tmp/test.tar.gz japan/</p><p>注意：一次压缩多个文件直接在源文件后用空格格开即可</p><h2 id="四、压缩-tar-bz2格式到指定目录下"><a href="#四、压缩-tar-bz2格式到指定目录下" class="headerlink" title="四、压缩.tar.bz2格式到指定目录下"></a>四、压缩.tar.bz2格式到指定目录下</h2><p>命令格式：tar -jcvf 【目录】/ 【压缩包文件名.tar.gz】【源文件】</p><p>例如：tar -jcvf /tmp/test.tar.bz2 japan/</p><p>注意：一次压缩多个文件直接在源文件后用空格格开即可</p><p>扩展资料</p><p>每条选项以及命令直接的空格一定要打，Linux严格区分大小写，输入时注意大小写。</p><p>tar在Linux上是常用的打包、压缩、加压缩工具，他的参数很多，常用的压缩与解压缩参数有：</p><p>-c ：create 建立压缩档案的参数；</p><p>-x ： 解压缩压缩档案的参数；</p><p>-z ： 是否需要用gzip压缩；</p><p>-v： 压缩的过程中显示档案；</p><p>-f： 置顶文档名，在f后面立即接文件名，不能再加参数<br>————————————————</p><h2 id="五、删除指令"><a href="#五、删除指令" class="headerlink" title="五、删除指令"></a>五、删除指令</h2><p>5.1、强制删除</p><p>sudo rm -rf +文件夹名字</p><hr><p>5.2、其他</p><p>wstool merge -t src <a href="https://ghproxy.com/https://raw.githubusercontent.com/cartographer-project/cartographer_ros/master/cartographer_ros.rosinstall">https://ghproxy.com/https://raw.githubusercontent.com/cartographer-project/cartographer_ros/master/cartographer_ros.rosinstall</a></p><p>uri: <a href="https://github.com/cartographer-project/cartographer.git">https://github.com/cartographer-project/cartographer.git</a></p><p>uri: <a href="https://github.com/cartographer-project/cartographer_ros.git">https://github.com/cartographer-project/cartographer_ros.git</a></p><p>carto packxml<br>46行</p><depend>libabsl-dev</depend><blockquote><p>版权声明：本文为CSDN博主「晓风笙」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/weixin_49285070/article/details/124261150">https://blog.csdn.net/weixin_49285070/article/details/124261150</a></p></blockquote>]]></content>
    
    
    <summary type="html">ubuntu 必备解压命令</summary>
    
    
    
    <category term="SF" scheme="https://aixiaocainiao.github.io/categories/SF/"/>
    
    
    <category term="ubuntu" scheme="https://aixiaocainiao.github.io/tags/ubuntu/"/>
    
    <category term="压缩命令" scheme="https://aixiaocainiao.github.io/tags/%E5%8E%8B%E7%BC%A9%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>ros noetic 基本安装</title>
    <link href="https://aixiaocainiao.github.io/posts/4f1bb390.html"/>
    <id>https://aixiaocainiao.github.io/posts/4f1bb390.html</id>
    <published>2023-04-09T07:48:29.680Z</published>
    <updated>2023-04-09T08:15:01.692Z</updated>
    
    <content type="html"><![CDATA[<h1 id="个人安装流程"><a href="#个人安装流程" class="headerlink" title="个人安装流程"></a>个人安装流程</h1><h2 id="一、ubuntu右键文档问题解决"><a href="#一、ubuntu右键文档问题解决" class="headerlink" title="一、ubuntu右键文档问题解决"></a>一、ubuntu右键文档问题解决</h2><p>模板里面创建文档<br>cd 到模板里面<br>touch 空白文档 txt文档</p><p>就完成了<br>(创建了两个文档类型)</p><h2 id="二、ubuntu和windows时间不同步问题"><a href="#二、ubuntu和windows时间不同步问题" class="headerlink" title="二、ubuntu和windows时间不同步问题"></a>二、ubuntu和windows时间不同步问题</h2><p>2.0<br>准备工作:切换安装源  自动选择最优<br>2.1<br>时间同步工具:<br>sudo apt install ntpdate<br>出现无法定位 可以<br>执行<br>sudo apt-get install<br>sudo apt-get update<br>2.2<br>互联网同步时间<br>sudo ntpdate time.windows.com<br>2.3<br>sudo hwclock —localtime —systohc</p><h2 id="三、启动菜单的默认选项-选为windows"><a href="#三、启动菜单的默认选项-选为windows" class="headerlink" title="三、启动菜单的默认选项 选为windows"></a>三、启动菜单的默认选项 选为windows</h2><p>sudo gedit /etc/default/grub</p><p>GRUB_DEFAULT=2 改为0<br>更新设置<br>sudo update-grub</p><h2 id="四-ros安装流程-ros-noetic"><a href="#四-ros安装流程-ros-noetic" class="headerlink" title="四.ros安装流程 ros -noetic"></a>四.ros安装流程 ros -noetic</h2><p>4.1清华安装源<br>sudo sh -c ‘. /etc/lsb-release &amp;&amp; echo “deb <a href="http://mirrors.tuna.tsinghua.edu.cn/ros/ubuntu/">http://mirrors.tuna.tsinghua.edu.cn/ros/ubuntu/</a> <code>lsb_release -cs</code> main” &gt; /etc/apt/sources.list.d/ros-latest.list’<br>4.2.设置key<br>sudo apt-key adv —keyserver ‘hkp://keyserver.ubuntu.com:80’ —recv-key C1CF6E31E6BADE8868B172B4F42ED6FBAB17C654<br>4.3安装<br>sudo apt update<br>sudo apt install ros-noetic-desktop-full<br>4.4配置环境变量<br>echo “source /opt/ros/noetic/setup.bash” &gt;&gt; ~/.bashrc<br>source ~/.bashrc</p><p>4.5- 卸载ros指令<br>sudo apt remove ros-noetic-*<br>4.6安装构建依赖<br>sudo apt install python3-rosdep python3-rosinstall python3-rosinstall-generator python3-wstool build-essential</p><p>解决init 和 update失败的问题</p><p>sudo apt-get install python3-pip<br>sudo pip3 install 6-rosdep<br>sudo 6-rosdep</p><p>接着执行就可以了<br>sudo rosdep init<br>sudo update </p><h2 id="五、vscode的安装"><a href="#五、vscode的安装" class="headerlink" title="五、vscode的安装"></a>五、vscode的安装</h2><p>vscode 的安装 </p><ul><li>浏览器下载deb</li><li>sudo dpkg -i 安装包<br>六、超级终端的安装<br>sudo </li></ul><h2 id="七、cmake的安装升级"><a href="#七、cmake的安装升级" class="headerlink" title="七、cmake的安装升级"></a>七、cmake的安装升级</h2><p>1、官网安装<br><a href="https://cmake.org/download/">https://cmake.org/download/</a><br>下载tar ;linux版本即可<br>2、解压后编译</p><p>指引到目录下，进行编译即可</p><pre><code>cd ~/Downloads/cmake-3.22.2./configuremakesudo make install</code></pre><p>3、版本覆盖</p><pre><code>    在解压后编译 后，其实再一开始不卸载老版本的cmake的的时候，安装编译新版本的是不能立刻变更的，需要软连接覆盖的。使用which cmake查找cmake的安装路径，新版本的cmake默认编译安装的路径是在/usr/local/bin/cmake，而我们系统会默认去/usr/bin中去寻找老版本的cmake。做一个链接覆盖即可：</code></pre><p>sudo ln -sf /usr/local/bin/cmake /usr/bin</p><h2 id="八、升级gcc"><a href="#八、升级gcc" class="headerlink" title="八、升级gcc"></a>八、升级gcc</h2><p>1.出现下面情况<br>lib/libxslab2.so: undefined reference to<br>`std::__cxx11::basic_stringstream<char, std::char_traits<char>,<br>std::allocator<char> &gt;::basic_stringstream()@GLIBCXX_3.4.26’</p><p>2、解决方案</p><h1 id="Install-and-use-gcc9"><a href="#Install-and-use-gcc9" class="headerlink" title="Install and use gcc9"></a>Install and use gcc9</h1><p>sudo add-apt-repository ppa:ubuntu-toolchain-r/test<br>sudo apt update<br>sudo apt install gcc-9<br>sudo apt install g++-9<br>sudo rm /usr/bin/gcc<br>sudo rm /usr/bin/g++<br>sudo ln -s /usr/bin/gcc-9 /usr/bin/gcc<br>sudo ln -s /usr/bin/g++-9 /usr/bin/g++</p><h2 id="九、安装配置rplidar-思岚雷达1）"><a href="#九、安装配置rplidar-思岚雷达1）" class="headerlink" title="九、安装配置rplidar(思岚雷达1）"></a>九、安装配置rplidar(思岚雷达1）</h2><p>mkdir -p rplidar/src<br>cd rplidar/src<br>git clone <a href="https://github.com/Slamtec/rplidar_ros.git">https://github.com/Slamtec/rplidar_ros.git</a><br>cd ..<br>catkin_make<br>sudo gedit ~/.bashrc<br><!-- 在文件最后加入 --><br>source /home/yunfang/rplidar/devel/setup.bash(最好使用绝对路径)<br><!-- 保存并退出 --><br>source ~/.bashrc<br><!-- 在插上雷达之后要进行以下工作 --><br><!-- 检查rplidar串口的权限 --><br>ls -l /dev |grep ttyUSB<br><!-- 输入指令添加权限(我这里是USB0) --><br>sudo chmod 666 /dev/ttyUSB0<br><!-- 启动雷达 --><br>roslaunch rplidar_ros rplidar_s2.launch</p><h2 id="十、安装-Pangolin"><a href="#十、安装-Pangolin" class="headerlink" title="十、安装 Pangolin"></a>十、安装 Pangolin</h2><p>1.安装依赖<br>sudo apt update<br>sudo apt upgrade<br>sudo apt install libglew-dev cmake libboost-dev libboost-thread-dev<br>libboost-filesystem-dev libeigen3-dev -y</p><p>2.进⼊ 创建目录并进入<br>mkdir Pangolin<br>cd Pangolin<br>git clone <a href="https://github.com/stevenlovegrove/Pangolin.git">https://github.com/stevenlovegrove/Pangolin.git</a><br>cd Pangolinmkdir build &amp;&amp; cd build<br>cmake ..<br>sudo make -j8<br>sudo make install</p><p>更新动态库链接</p><p>sudo ldconfig</p><h2 id="十一、rosdep失败使用rosdepc"><a href="#十一、rosdep失败使用rosdepc" class="headerlink" title="十一、rosdep失败使用rosdepc"></a>十一、rosdep失败使用rosdepc</h2><h2 id="十二、安装并配置-opencv4-6-0"><a href="#十二、安装并配置-opencv4-6-0" class="headerlink" title="十二、安装并配置 opencv4.6.0"></a>十二、安装并配置 opencv4.6.0</h2><p>参考⽹址⼀ <a href="https://blog.csdn.net/weixin_44796670/article/details/115900538">https://blog.csdn.net/weixin_44796670/article/details/115900538</a><br>参考⽹址⼆ <a href="https://blog.csdn.net/KIK9973/article/details/118830187?">https://blog.csdn.net/KIK9973/article/details/118830187?</a><br>ops_request_misc=&amp;request_id=&amp;biz_id=102&amp;utm_term=Ubuntu18.04 安装<br>OpenCV&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-4-<br>118830187.nonecase&amp;spm=1018.2226.3001.4187</p><p>1、安装依赖环境<br>sudo apt install -y g++<br>sudo apt install -y cmake<br>sudo apt install -y make<br>sudo apt install -y wget unzip<br>2、安装opencv的依赖库<br>sudo apt-get install build-essential libgtk2.0-dev libgtk-3-dev libavcodec-<br>dev libavformat-dev libjpeg-dev libswscale-dev libtiff5-dev</p><p>3、下载 opencv4.6.0 源⽂件<br>wget -O opencv.zip <a href="https://github.com/opencv/opencv/archive/4.6.0.zip">https://github.com/opencv/opencv/archive/4.6.0.zip</a><br>4、编译源⽂件<br>进⼊解压后的 opencv ⽂件夹中执⾏以下命令<br>mkdir build<br>cd build<br>cmake -D CMAKE_BUILD_TYPE=Release -D OPENCV_GENERATE_PKGCONFIG=YES ..<br>make -j12</p><p>PS: 这里的make -j12是根据所使⽤电脑的 CPU 核⼼数来选择的</p><p>5、安装动态库及头文件<br>sudo make install</p><p>6、配置 pkg-conﬁg 环境<br>sudo gedit /etc/profile.d/pkgconfig.sh<br>&lt;打开 config 文件，在文件后面加上一行&gt;<br>export PKG_CONFIG_PATH=/usr/local/lib/pkgconfig:$PKG_CONFIG_PATH<br>&lt;保存并退出&gt;<br>source /etc/profile</p><p>7、配置动态库环境<br>sudo gedit /etc/ld.so.conf.d/opencv4.conf<br>&lt;打开 config 文件，在该文件末尾加上 opencv 的 lib 路径&gt;<br>/usr/local/lib<br>&lt;保存并退出&gt;<br>sudo ldconfig</p><blockquote><p>引用说明：部分来自luper</p></blockquote>]]></content>
    
    
    <summary type="html">ubuntu18 ros noetic 新系统必备</summary>
    
    
    
    <category term="SF" scheme="https://aixiaocainiao.github.io/categories/SF/"/>
    
    
    <category term="ros" scheme="https://aixiaocainiao.github.io/tags/ros/"/>
    
    <category term="noetic" scheme="https://aixiaocainiao.github.io/tags/noetic/"/>
    
  </entry>
  
  <entry>
    <title>git的安装</title>
    <link href="https://aixiaocainiao.github.io/posts/c9ac0fa7.html"/>
    <id>https://aixiaocainiao.github.io/posts/c9ac0fa7.html</id>
    <published>2023-04-08T05:25:49.966Z</published>
    <updated>2023-04-09T08:15:01.687Z</updated>
    
    <content type="html"><![CDATA[<p>git的使用：<br>第一步: github 创建同名(文件夹)仓库<br>第二步：cd 到同名文件夹中<br>echo “# download” &gt;&gt; README.md<br>git init<br>(git add README.md)<br>git add .<br>git commit -m “first commit”<br>git branch -M main<br>每个仓库地址不一样<br>(git remote add origin <a href="https://github.com/aixiaocainiao/download.git">https://github.com/aixiaocainiao/download.git</a>)<br>git push -u origin main</p>]]></content>
    
    
    <summary type="html">git的安装</summary>
    
    
    
    <category term="SF" scheme="https://aixiaocainiao.github.io/categories/SF/"/>
    
    
    <category term="git" scheme="https://aixiaocainiao.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>ros指令</title>
    <link href="https://aixiaocainiao.github.io/posts/50f3c42c.html"/>
    <id>https://aixiaocainiao.github.io/posts/50f3c42c.html</id>
    <published>2023-04-07T07:48:37.957Z</published>
    <updated>2023-04-09T08:15:01.677Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ros指令"><a href="#ros指令" class="headerlink" title="ros指令"></a>ros指令</h1><h2 id="一、理解"><a href="#一、理解" class="headerlink" title="一、理解"></a>一、理解</h2><p>odm  framd_id odm_combined<br>map  map<br>nase_frame_id base_footprint</p><p>scan  scan<br> 查看某个具体的消息 需要使用管道<br>rosmsg list | grep -i 话题名称<br>校园网址<br><a href="https://120.199.39.54:7090/zmcc/indexForce.wlan?wlanuserip=10.137.237.63&amp;wlanacname=0437.0571.571.00">https://120.199.39.54:7090/zmcc/indexForce.wlan?wlanuserip=10.137.237.63&amp;wlanacname=0437.0571.571.00</a></p><p>C语言学习中递归函数<br>ctrl+shift+空格出现代码提示<br>使用rosparam导入参数<br>设置的参数.yaml文件中 需要加空格 例如bg_R: 100<br>rosparam 便签 会率先执行 所以在使用dump导出参数的时候需要自己直接写一个launch文件</p><p>写代码之前操作</p><p>mkdir -p xxx_ws/src(必须得有 src)<br>cd xxx_ws<br>catkin_make<br>cd xxx_ws<br>code .</p><p>rviz中 ctrl+shift+鼠标可以拖动位置<br>args=”-d $(find urdf01_rviz)/config/show_mycar.rviz”<br>这玩意保存的时配置 不是rviz里面显示的东西<br>solidworks<br>joint origin是joint相对于parent的位置<br>[joint_state_publisher-4] process has died [pid 12169, exit code 1, cmd /opt/ros/melodic/lib/joint_state_publisher/joint_state_publisher <strong>name:=joint_state_publisher </strong>log:=/home/yunfang/.ros/log/3c02610c-bfaa-11ed-a76e-30d16b56c4c1/joint_state_publisher-4.log].<br>log file: /home/yunfang/.ros/log/3c02610c-bfaa-11ed-a76e-30d16b56c4c1/joint_state_publisher-4*.log</p><p>出现下面的错误 请删除掉urdf里面的中文注释 melidic中不能有一点点中文<br>evince mycar.pdf<br>arbotix报错，进入src下的arbotix_ros功能包，进入arbotix_python，进入bin，进入arbotix_driver<br>将第一行中的python的运行版本从3改为2.7运行就可以了<br>rviz中fixed frame为 odm<br>gazebo有进程问题 请执行下面指令 直接杀死<br>killall gzserver</p><p>killall gzclient</p><p>tar -xvf arduino-1.x.y-linux64.tar.xz<br>tar解压命令 </p><node name="playbag" pkg="rosbag" type="play"      args="--clock $(arg bag_filename)" />]]></content>
    
    
    <summary type="html">ubuntu18 ros</summary>
    
    
    
    <category term="Slam" scheme="https://aixiaocainiao.github.io/categories/Slam/"/>
    
    
    <category term="ros" scheme="https://aixiaocainiao.github.io/tags/ros/"/>
    
  </entry>
  
  <entry>
    <title>导航原理</title>
    <link href="https://aixiaocainiao.github.io/posts/cb0cb908.html"/>
    <id>https://aixiaocainiao.github.io/posts/cb0cb908.html</id>
    <published>2023-04-07T07:48:37.952Z</published>
    <updated>2023-04-09T08:15:01.680Z</updated>
    
    <content type="html"><![CDATA[<h1 id="导航原理"><a href="#导航原理" class="headerlink" title="导航原理"></a>导航原理</h1><h2 id="一、第一部分"><a href="#一、第一部分" class="headerlink" title="一、第一部分"></a>一、第一部分</h2><h3 id="1-1密匙"><a href="#1-1密匙" class="headerlink" title="1.1密匙"></a>1.1密匙</h3><p>tolen url<br>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</p><h2 id="1-2-导航组成"><a href="#1-2-导航组成" class="headerlink" title="1.2 导航组成"></a>1.2 导航组成</h2><p>1.全局地图（全局概览图 ：定位和路径规划）<br>2.自身地位：（确定在地图中的位置）<br>3.路径规划：（全局路径规划+局部路径规划）<br>4.运动控制：（控制速度和方向）<br>5.环境感知：（感知周围环境）</p><h2 id="二、代价地图组成（多层叠加）"><a href="#二、代价地图组成（多层叠加）" class="headerlink" title="二、代价地图组成（多层叠加）"></a>二、代价地图组成（多层叠加）</h2><p>1.静态层 —-slam绘制的静态地图<br>2.障碍物层 —导航中传感器感知的障碍物<br>3.膨胀层  —为了避免碰撞而设置的安全区域</p><p>4.自定义层 —根据业务自设置的地图数据 （例如在地图中添加一个虚拟墙）</p><p>—————————膨胀空间的设置可以参考非自由空间。<br>致命障碍:栅格值为254，此时障碍物与机器人中心重叠，必然发生碰撞；<br>内切障碍:栅格值为253，此时障碍物处于机器人的内切圆内，必然发生碰撞；<br>外切障碍:栅格值为[128,252]，此时障碍物处于其机器人的外切圆内，处于碰撞临界，不一定发生碰撞；<br>非自由空间:栅格值为[1,127]，此时机器人处于障碍物附近，属于危险警戒区，进入此区域，将来可能会发生碰撞；<br>自由区域:栅格值为0，此处机器人可以自由通过；<br>未知区域:栅格值为255，还没探明是否有障碍物。</p>]]></content>
    
    
    <summary type="html">ubuntu18 ros melotic 导航原理</summary>
    
    
    
    <category term="Slam" scheme="https://aixiaocainiao.github.io/categories/Slam/"/>
    
    
    <category term="navigation" scheme="https://aixiaocainiao.github.io/tags/navigation/"/>
    
  </entry>
  
  <entry>
    <title>ros melotic opencv安装</title>
    <link href="https://aixiaocainiao.github.io/posts/676c85a9.html"/>
    <id>https://aixiaocainiao.github.io/posts/676c85a9.html</id>
    <published>2023-04-06T13:58:07.610Z</published>
    <updated>2023-04-09T08:21:39.869Z</updated>
    
    <content type="html"><![CDATA[<h1 id="opencv安装"><a href="#opencv安装" class="headerlink" title="opencv安装"></a>opencv安装</h1><h2 id="一、准备工作"><a href="#一、准备工作" class="headerlink" title="一、准备工作"></a>一、准备工作</h2><h3 id="1-0设置opencv静态库加载路径"><a href="#1-0设置opencv静态库加载路径" class="headerlink" title="1.0设置opencv静态库加载路径"></a>1.0设置opencv静态库加载路径</h3><ul><li><p>打开配置文件：sudo gedit /etc/ld.so.conf</p></li><li><p>加入编译后lib文件夹路径，形式如下所示，但应做修改：<br>include /home/<em>*</em>/opencv-3.4.x/build/lib</p><ul><li>原来的<br>include /etc/ld.so.conf.d/*.conf</li></ul></li></ul><h3 id="2-0安装流程"><a href="#2-0安装流程" class="headerlink" title="2.0安装流程"></a>2.0安装流程</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install build-essential</span><br><span class="line">sudo apt-get install cmake git libgtk2.0-dev pkg-config libavcodec-dev libavformat-dev libswscale-dev</span><br><span class="line">sudo apt-get install python-dev python-numpy libtbb2 libtbb-dev libjpeg-dev libpng-dev libtiff-dev libjasper-dev libdc1394-22-dev</span><br></pre></td></tr></table></figure><p>出现错误：E: 无法定位软件包 libjasper-dev<br>执行这一步即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo add-apt-repository &quot;deb http://security.ubuntu.com/ubuntu xenial-security main&quot;</span><br><span class="line">sudo apt update</span><br><span class="line">sudo apt install libjasper1 libjasper-dev</span><br><span class="line">cd ~/opencv-3.4.15/build/</span><br><span class="line">cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr/local -DOPENCV_EXTRA_MODULES_PATH=../opencv_contrib/modules ..</span><br></pre></td></tr></table></figure><h2 id="二、安装流程："><a href="#二、安装流程：" class="headerlink" title="二、安装流程："></a>二、安装流程：</h2><p>1.ubuntu 18.04 安装OpenCV 4.1.0版本<br>先下载OpenCV和OpenCV_contrib</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/Itseez/opencv.git</span><br><span class="line">git clone https://github.com/Itseez/opencv_contrib.git</span><br></pre></td></tr></table></figure><p>其中opencv_contrib放入opencv文件夹中<br>2.安装依赖</p><h2 id="三、-更新源，安装软件包"><a href="#三、-更新源，安装软件包" class="headerlink" title="三、 更新源，安装软件包"></a>三、 更新源，安装软件包</h2><h3 id="3-1"><a href="#3-1" class="headerlink" title="3.1"></a>3.1</h3><p>sudo apt update &amp;&amp; sudo apt install -y cmake g++ wget unzip</p><h3 id="3-2安装依赖"><a href="#3-2安装依赖" class="headerlink" title="3.2安装依赖"></a>3.2安装依赖</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install build-essential libgtk2.0-dev libavcodec-dev libavformat-dev libjpeg-dev libswscale-dev libtiff5-dev</span><br><span class="line">sudo apt-get install libgtk2.0-dev</span><br><span class="line">sudo apt-get install pkg-config</span><br></pre></td></tr></table></figure><p>出现错误：E: 无法定位软件包 libjasper-dev<br>执行这一步即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo add-apt-repository &quot;deb http://security.ubuntu.com/ubuntu xenial-security main&quot;</span><br><span class="line">sudo apt update</span><br><span class="line">sudo apt install libjasper1 libjasper-dev</span><br><span class="line">cd ~/opencv-3.4.15/build/</span><br><span class="line">cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr/local -DOPENCV_EXTRA_MODULES_PATH=../opencv_contrib/modules ..</span><br></pre></td></tr></table></figure><h3 id="3-3在build文件夹下执行cmake"><a href="#3-3在build文件夹下执行cmake" class="headerlink" title="3.3在build文件夹下执行cmake"></a>3.3在build文件夹下执行cmake</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cd opencv/</span><br><span class="line">mkdir build</span><br><span class="line">cd build/</span><br><span class="line">(cd ~/opencv-3.4.15/build/)看一下上面 整过了就不用整了</span><br><span class="line">cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr/local -DOPENCV_EXTRA_MODULES_PATH=../opencv_contrib-3.4.15/modules ..</span><br><span class="line">opencv_contrib-3.4.15需要修改成自己的文件夹名字</span><br></pre></td></tr></table></figure><h3 id="3-4编译"><a href="#3-4编译" class="headerlink" title="3.4编译"></a>3.4编译</h3><p>这里的j4是针对性能不好的电脑，我这里电脑性能比较强，选择j32编译,s数据越大编译的速度就越快。<br>make -j4</p><h3 id="3-5安装到系统"><a href="#3-5安装到系统" class="headerlink" title="3.5安装到系统"></a>3.5安装到系统</h3><p>sudo make install<br>添加路径<br>sudo gedit /etc/ld.so.conf.d/opencv.conf</p><p>然后在打开文件中添加如下内容<br>/usr/local/lib<br>之后再终端输入以下命令（安装完成某个工程后生成许多动态库，该命令是为了让这些动态链接库为系统所共享）<br>sudo ldconfig</p><p>使其保存并生效。<br>再在终端输入</p><p>sudo gedit /etc/bash.bashrc</p><p>打开文件后在末尾输入：</p><p>PKG_CONFIG_PATH=$PKG_CONFIG_PATH:/usr/local/lib/pkgconfig<br>export PKG_CONFIG_PATH<br>保存退出，终端输入：<br>source /etc/bash.bashrc<br>至此，opencv及opencv_contrib安装配置完成了！</p><h3 id="3-6测试安装的文件"><a href="#3-6测试安装的文件" class="headerlink" title="3.6测试安装的文件"></a>3.6测试安装的文件</h3><p>进入opencv/samples/cpp/example_cmake目录下，终端打开，依次输入：<br>cd ../samples/cpp/example_cmake<br>cmake .<br>make<br>./opencv_example</p>]]></content>
    
    
    <summary type="html">ubuntu18 ros melotic opencv安装</summary>
    
    
    
    <category term="SF" scheme="https://aixiaocainiao.github.io/categories/SF/"/>
    
    
    <category term="opencv" scheme="https://aixiaocainiao.github.io/tags/opencv/"/>
    
    <category term="ros" scheme="https://aixiaocainiao.github.io/tags/ros/"/>
    
    <category term="melodic" scheme="https://aixiaocainiao.github.io/tags/melodic/"/>
    
  </entry>
  
  <entry>
    <title>ros melotic安装</title>
    <link href="https://aixiaocainiao.github.io/posts/e9f64358.html"/>
    <id>https://aixiaocainiao.github.io/posts/e9f64358.html</id>
    <published>2023-04-06T13:55:01.784Z</published>
    <updated>2023-04-10T14:21:31.283Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ros-melodi-安装"><a href="#ros-melodi-安装" class="headerlink" title="ros melodi 安装"></a>ros melodi 安装</h1><h2 id="一、安装流程"><a href="#一、安装流程" class="headerlink" title="一、安装流程"></a>一、安装流程</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">sudo sh -c &#x27;. /etc/lsb-release &amp;&amp; echo &quot;deb http://mirrors.tuna.tsinghua.edu.cn/ros/ubuntu/ $DISTRIB_CODENAME main&quot; &gt; /etc/apt/sources.list.d/ros-latest.list&#x27;</span><br><span class="line">sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys F42ED6FBAB17C654</span><br><span class="line">sudo apt-get update</span><br><span class="line"></span><br><span class="line">sudo apt-get install ros-melodic-desktop-full</span><br><span class="line"></span><br><span class="line">sudo apt-get install ros-melodic-rqt*</span><br><span class="line"></span><br><span class="line">sudo apt install rospack-tool</span><br><span class="line"></span><br><span class="line">sudo apt-get install python3-pip</span><br><span class="line">sudo pip3 install 6-rosdep</span><br><span class="line">sudo 6-rosdep</span><br><span class="line">sudo rosdep init </span><br><span class="line">rosdep update </span><br><span class="line"></span><br><span class="line">echo &quot;source /opt/ros/melodic/setup.bash&quot; &gt;&gt; ~/.bashrc</span><br><span class="line">source ~/.bashrc</span><br><span class="line"></span><br><span class="line">sudo apt install python-rosinstall python-rosinstall-generator python-wstool build-essential</span><br></pre></td></tr></table></figure><h2 id="二、启动"><a href="#二、启动" class="headerlink" title="二、启动"></a>二、启动</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;source /opt/ros/melodic/setup.bash&quot; &gt;&gt; ~/.bashrc</span><br><span class="line">source ~/.bashrc</span><br><span class="line">roscore</span><br><span class="line">rosrun turtlesim turtlesim_node</span><br><span class="line">rosrun turtlesim turtle_teleop_key</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">ubuntu18 ros melotic安装</summary>
    
    
    
    <category term="SF" scheme="https://aixiaocainiao.github.io/categories/SF/"/>
    
    
    <category term="ros" scheme="https://aixiaocainiao.github.io/tags/ros/"/>
    
    <category term="melodic" scheme="https://aixiaocainiao.github.io/tags/melodic/"/>
    
  </entry>
  
  <entry>
    <title>ros melotic cartographer安装</title>
    <link href="https://aixiaocainiao.github.io/posts/26aabfb9.html"/>
    <id>https://aixiaocainiao.github.io/posts/26aabfb9.html</id>
    <published>2023-04-06T13:39:21.589Z</published>
    <updated>2023-04-09T08:15:01.703Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ros-melotic-cartographer安装"><a href="#ros-melotic-cartographer安装" class="headerlink" title="ros melotic cartographer安装"></a>ros melotic cartographer安装</h1><h2 id="一、安装相关"><a href="#一、安装相关" class="headerlink" title="一、安装相关"></a>一、安装相关</h2><h3 id="1-安装相关的依赖"><a href="#1-安装相关的依赖" class="headerlink" title="1.安装相关的依赖"></a>1.安装相关的依赖</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install -y google-mock libboost-all-dev  libeigen3-dev libgflags-dev libgoogle-glog-dev liblua5.2-dev libprotobuf-dev  libsuitesparse-dev libwebp-dev ninja-build protobuf-compiler python-sphinx  ros-melodic-tf2-eigen libatlas-base-dev libsuitesparse-dev liblapack-dev</span><br></pre></td></tr></table></figure><h3 id="2-下载安装包"><a href="#2-下载安装包" class="headerlink" title="2.下载安装包"></a>2.下载安装包</h3><p>（因为命令下载太慢，所以我直接提前下载下来，主目录下建立  cartographer_ws文件夹，cartographer_ws文件夹内建src文件夹，放入下载的cartographer，cartographer_ros，ceres-solver）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mkdir cartographer</span><br><span class="line">cd cartographer</span><br><span class="line">mkdir src</span><br><span class="line">cd src</span><br><span class="line">git clone https://github.com/googlecartographer/cartographer_ros.git</span><br><span class="line">git clone https://github.com/googlecartographer/cartographer.git</span><br><span class="line">(git clone https://github.com/ceres-solver/ceres-solver.git)</span><br><span class="line">不用这个</span><br></pre></td></tr></table></figure><h3 id="3-获取ceres-solver"><a href="#3-获取ceres-solver" class="headerlink" title="3.获取ceres-solver"></a>3.获取ceres-solver</h3><p>在上述建好的src文件夹下，获取ceres-solver源码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget ceres-solver.org/ceres-solver-1.13.0.tar.gz</span><br></pre></td></tr></table></figure><p>下载不成功的话，可以使用下面的链接下载</p><p>版本为ceres-solver-1.13.0，对应的是ros-melodic的环境，激光—cartographer中使用-Linux文档类资源-CSDN下载</p><p>切记：版本一定要对，否则编译不过去</p><h3 id="4-接着"><a href="#4-接着" class="headerlink" title="4 .接着"></a>4 .接着</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">cd ceres-solver</span><br><span class="line">mkdir build</span><br><span class="line">cd build</span><br><span class="line">cmake ..</span><br><span class="line">make -j 8 </span><br><span class="line">#make test  # 此选项可选</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure><h3 id="5-放在目录"><a href="#5-放在目录" class="headerlink" title="5 .放在目录"></a>5 .放在目录</h3><p>下载好的protobuf放在cartographer/scripts/目录下就行<br>下载链接下载地址：<a href="https://codeload.github.com/google/protobuf/zip/v3.0.0">https://codeload.github.com/google/protobuf/zip/v3.0.0</a></p><h3 id="6-执行依赖"><a href="#6-执行依赖" class="headerlink" title="6.执行依赖"></a>6.执行依赖</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">cd protobuf</span><br><span class="line">mkdir build</span><br><span class="line">cd build</span><br><span class="line">cmake -G Ninja \</span><br><span class="line">  -DCMAKE_POSITION_INDEPENDENT_CODE=ON \</span><br><span class="line">  -DCMAKE_BUILD_TYPE=Release \</span><br><span class="line">  -Dprotobuf_BUILD_TESTS=OFF \</span><br><span class="line">  ../cmake</span><br><span class="line"></span><br><span class="line">ninja</span><br><span class="line">sudo ninja install</span><br></pre></td></tr></table></figure><h3 id="7-进入工作空间"><a href="#7-进入工作空间" class="headerlink" title="7.进入工作空间"></a>7.进入工作空间</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd cartographer_ws</span><br><span class="line">rosdep update</span><br><span class="line">rosdep install --from-paths src --ignore-src --rosdistro=$&#123;ROS_DISTRO&#125; -y（出错）</span><br></pre></td></tr></table></figure><ul><li>解决：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">（1）rosdep install --from-paths src --ignore-src --rosdistro=$&#123;ROS_DISTRO&#125; -y 行不通。pass</span><br><span class="line">（2）把：rosdep install --from-paths src --ignore-src --rosdistro=kinetic -y</span><br><span class="line">改成：rosdep install --from-paths ~/cartographer_ws/src --ignore-src -r</span><br><span class="line">OK！</span><br><span class="line">catkin_ws 自己的工作空间  我的是cartographer_ws</span><br><span class="line">————————————————</span><br></pre></td></tr></table></figure><p>执行catkin_make_isolated —install —use-ninja（出错）<br>报错：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;== Failed to process package &#x27;cartographer&#x27;: </span><br><span class="line">  Command &#x27;[&#x27;cmake&#x27;, &#x27;/home/willingham/carto_ws/src/cartographer&#x27;, &#x27;-DCMAKE_INSTALL_PREFIX=/home/willingham/carto_ws/install_isolated&#x27;, &#x27;-G&#x27;, &#x27;Ninja&#x27;]&#x27; returned non-zero exit status 1</span><br><span class="line"></span><br><span class="line">Reproduce this error by running:</span><br><span class="line">==&gt; cd /home/willingham/carto_ws/build_isolated/cartographer &amp;&amp; cmake /home/willingham/carto_ws/src/cartographer -DCMAKE_INSTALL_PREFIX=/home/willingham/carto_ws/install_isolated -G Ninja</span><br><span class="line"></span><br><span class="line">Command failed, exiting.</span><br></pre></td></tr></table></figure><ul><li>解决：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install stow</span><br><span class="line">sudo chmod +x ~/cartographer_ws/src/cartographer/scripts/install_abseil.sh</span><br><span class="line">cd ~/cartographer_ws/src/cartographer/scripts</span><br><span class="line">./install_abseil.sh</span><br><span class="line">再执行一次catkin_make_isolated --install --use-ninja  成功</span><br></pre></td></tr></table></figure><h3 id="8-执行命令"><a href="#8-执行命令" class="headerlink" title="8.执行命令"></a>8.执行命令</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source install_isolated/setup.bash</span><br></pre></td></tr></table></figure><p>下载DEMO测试</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2d slam</span><br><span class="line">wget -P ~/Downloads https://storage.googleapis.com/cartographer-public-data/bags/backpack_2d/cartographer_paper_deutsches_museum.bag</span><br><span class="line">roslaunch cartographer_ros demo_backpack_2d.launch bag_filename:=$&#123;HOME&#125;/Downloads/cartographer_paper_deutsches_museum.bag</span><br></pre></td></tr></table></figure><ul><li>中间包括自己下载camke 3.11以上的版本</li></ul><h3 id="8-1错误纠正"><a href="#8-1错误纠正" class="headerlink" title="8.1错误纠正"></a>8.1错误纠正</h3><ul><li><p>1.通过以下命令查询cmake版本。</p><p>cmake —version</p></li><li><p>2.这里，我并没有卸载旧版本的cmake，而是直接安装新版本，而且这样没有出现问题。【非必须】<br>可去<a href="http://www.cmake.org/files查找需要的版本，写本博客时最新版为3.11.3，以此为例。">http://www.cmake.org/files查找需要的版本，写本博客时最新版为3.11.3，以此为例。</a></p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install build-essential</span><br><span class="line">$ wget http://www.cmake.org/files/v3.11/cmake-3.11.3.tar.gz</span><br><span class="line">$ tar xf cmake-3.11.3.tar.gz</span><br><span class="line">$ cd cmake-3.11.3</span><br><span class="line">$ ./configure</span><br><span class="line">$ make</span><br><span class="line">$ sudo make install</span><br></pre></td></tr></table></figure><ul><li>3.创建cmake的软连接(我这里自动连接了)　(我没有整这一步也是OK的 没必要的）跳转第四部    </li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1.ln -sf /your cmake3.11 path/bin/*  /usr/bin/</span><br><span class="line">2.ln -sf /your/cmake-3.11.3/path/bin/*  /usr/bin/</span><br></pre></td></tr></table></figure><p>如果需要要换成自己的实际路径</p><ul><li><p>4.然后，输入以下命令查询cmake版本。<br>1</p><p>cmake —version</p></li></ul><hr><p>如果输出以下信息，则表明安装成功。<br>cmake version 3.11<br>————————————————</p><hr>]]></content>
    
    
    <summary type="html">ubuntu18 ros melotic cartographer安装</summary>
    
    
    
    <category term="SF" scheme="https://aixiaocainiao.github.io/categories/SF/"/>
    
    
    <category term="ubuntu" scheme="https://aixiaocainiao.github.io/tags/ubuntu/"/>
    
    <category term="melodic" scheme="https://aixiaocainiao.github.io/tags/melodic/"/>
    
    <category term="cartographer" scheme="https://aixiaocainiao.github.io/tags/cartographer/"/>
    
  </entry>
  
  <entry>
    <title>ubuntu18安装pycharm2021.3</title>
    <link href="https://aixiaocainiao.github.io/posts/62d28f2b.html"/>
    <id>https://aixiaocainiao.github.io/posts/62d28f2b.html</id>
    <published>2023-04-06T13:14:57.303Z</published>
    <updated>2023-04-09T08:15:01.711Z</updated>
    
    <content type="html"><![CDATA[<h1 id="如何在Ubuntu安装pycharm的专业版，保姆级教学"><a href="#如何在Ubuntu安装pycharm的专业版，保姆级教学" class="headerlink" title="如何在Ubuntu安装pycharm的专业版，保姆级教学"></a>如何在Ubuntu安装pycharm的专业版，保姆级教学</h1><h2 id="一、下载Pycharm2021-3版本"><a href="#一、下载Pycharm2021-3版本" class="headerlink" title="一、下载Pycharm2021.3版本"></a>一、下载Pycharm2021.3版本</h2><pre><code>    进入pycharm官网，点击Download下载按钮</code></pre><p><a href="https://img-blog.csdnimg.cn/3cc019fbca954a5590106a31ee7c07ca.png">https://img-blog.csdnimg.cn/3cc019fbca954a5590106a31ee7c07ca.png</a><br>     这里我们选择Other version，其他版本<br><a href="https://img-blog.csdnimg.cn/cec1e7cca3ae4b9fb3661ee31fb4a7bf.png">https://img-blog.csdnimg.cn/cec1e7cca3ae4b9fb3661ee31fb4a7bf.png</a><br>        下拉选择2021.3版本（注意别选错了，其他版本不知道有没有用）<br><a href="https://img-blog.csdnimg.cn/eebfbe2261ad48a2b4286666539ec24f.png">https://img-blog.csdnimg.cn/eebfbe2261ad48a2b4286666539ec24f.png</a><br> 点击下载（注意：下载的是2021.3 - Linux (tar.gz)）<br><a href="https://img-blog.csdnimg.cn/5379a28e41f24c6e89d5fb1d9eeb423e.png">https://img-blog.csdnimg.cn/5379a28e41f24c6e89d5fb1d9eeb423e.png</a><br>    下载完成后，我们可以在下载文件夹下看到安装包<br><a href="https://img-blog.csdnimg.cn/2603a06c9d3e4a2196c20d8b78867a0a.png">https://img-blog.csdnimg.cn/2603a06c9d3e4a2196c20d8b78867a0a.png</a></p><h2 id="二、安装pycharm2021-3"><a href="#二、安装pycharm2021-3" class="headerlink" title="二、安装pycharm2021.3"></a>二、安装pycharm2021.3</h2><pre><code>    由于我们下载的安装包是压缩的形式，我们先把它提取出来 ,这里我预先已经提取出来了</code></pre><p><a href="https://img-blog.csdnimg.cn/58d774aef9c44199bf69d31b163dde0a.png">https://img-blog.csdnimg.cn/58d774aef9c44199bf69d31b163dde0a.png</a></p><ul><li><p>现在我们来看一下提取出来的文件结构：</p><pre><code>            双击进去的第一层是“pycharm-2021.3”</code></pre><p><a href="https://img-blog.csdnimg.cn/b03fbf9391d04bada412067da83a5a54.png">https://img-blog.csdnimg.cn/b03fbf9391d04bada412067da83a5a54.png</a></p></li><li><p>这里为了后面好操作我将其移动到“主目录”  下，就是“用户文件夹”下<br><a href="https://img-blog.csdnimg.cn/8c8c34f331e74790a2c1f3a6649758c6.png">https://img-blog.csdnimg.cn/8c8c34f331e74790a2c1f3a6649758c6.png</a><br><a href="https://img-blog.csdnimg.cn/">https://img-blog.csdnimg.cn/</a> 3329149da1e742aaa9c0197fb2aeef8b.png</p></li><li>进入“pycharm-2021.3”可看到这些结构，找到bin这个文件夹：<br><a href="https://img-blog.csdnimg.cn/747779f9793142eab088b426c3750782.png">https://img-blog.csdnimg.cn/747779f9793142eab088b426c3750782.png</a></li><li><p>这里我们选择bin这个文件继续进去 ，找到pycharm.sh和pycharm64.vmoptions这2个文件</p><pre><code>  其中pycharm.sh是运行文件，pycharm64.vmoptions是配置文件</code></pre></li><li><p>我们先来修改一下配置文件 pycharm64.vmoptions：</p><pre><code>  将下面这段代码添加上去  注：-javaagent: 后面加的是文件fineagent.jar的路径  文件在文章最后有提供。</code></pre></li><li>-javaagent:/home/用户名/fineagent.jar<br><a href="https://img-blog.csdnimg.cn/1d19259dce59418eac8f57eb9c016b44.png">https://img-blog.csdnimg.cn/1d19259dce59418eac8f57eb9c016b44.png</a></li><li>添加好上面这段代码之后，我们将文件 fineagent.jar复制到“主目录”  下，就是“用户文件夹”下<br><a href="https://img-blog.csdnimg.cn/7c729511478a4cb4a10b89c58fdaa45e.png">https://img-blog.csdnimg.cn/7c729511478a4cb4a10b89c58fdaa45e.png</a></li></ul><h2 id="三、运行pycharm"><a href="#三、运行pycharm" class="headerlink" title="三、运行pycharm"></a>三、运行pycharm</h2><pre><code>    在终端进入pycharm的bin文件夹 ：</code></pre><p><a href="https://img-blog.csdnimg.cn/4e910984b78a4fb6bf2be541245c610b.png">https://img-blog.csdnimg.cn/4e910984b78a4fb6bf2be541245c610b.png</a><br><a href="https://img-blog.csdnimg.cn/ef0ec50c440f4a2e93291979084f0e6b.png">https://img-blog.csdnimg.cn/ef0ec50c440f4a2e93291979084f0e6b.png</a><br> 通过下列命令运行pycharm<br>./pycharm.sh</p><h2 id="四、运行成功，输入破解码激活"><a href="#四、运行成功，输入破解码激活" class="headerlink" title="四、运行成功，输入破解码激活"></a>四、运行成功，输入破解码激活</h2><pre><code>    复制下列代码：</code></pre><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">5AYV1D1RE5-eyJsaWNlbnNlSWQiOiI1QVlWMUQxUkU1IiwibGljZW5zZWVOYW1lIjoiaHR0cHM6Ly93d3cuaml3ZWljaGVuZ3podS5jb20iLCJhc3NpZ25lZU5hbWUiOiIiLCJhc3NpZ25lZUVtYWlsIjoiIiwibGljZW5zZVJlc3RyaWN0aW9uIjoiIiwiY2hlY2tDb25jdXJyZW50VXNlIjpmYWxzZSwicHJvZHVjdHMiOlt7ImNvZGUiOiJJSSIsImZhbGxiYWNrRGF0ZSI6IjIwOTktMTItMzEiLCJwYWlkVXBUbyI6IjIwOTktMTItMzEifSx7ImNvZGUiOiJBQyIsImZhbGxiYWNrRGF0ZSI6IjIwOTktMTItMzEiLCJwYWlkVXBUbyI6IjIwOTktMTItMzEifSx7ImNvZGUiOiJEUE4iLCJmYWxsYmFja0RhdGUiOiIyMDk5LTEyLTMxIiwicGFpZFVwVG8iOiIyMDk5LTEyLTMxIn0seyJjb2RlIjoiUFMiLCJmYWxsYmFja0RhdGUiOiIyMDk5LTEyLTMxIiwicGFpZFVwVG8iOiIyMDk5LTEyLTMxIn0seyJjb2RlIjoiR08iLCJmYWxsYmFja0RhdGUiOiIyMDk5LTEyLTMxIiwicGFpZFVwVG8iOiIyMDk5LTEyLTMxIn0seyJjb2RlIjoiRE0iLCJmYWxsYmFja0RhdGUiOiIyMDk5LTEyLTMxIiwicGFpZFVwVG8iOiIyMDk5LTEyLTMxIn0seyJjb2RlIjoiQ0wiLCJmYWxsYmFja0RhdGUiOiIyMDk5LTEyLTMxIiwicGFpZFVwVG8iOiIyMDk5LTEyLTMxIn0seyJjb2RlIjoiUlMwIiwiZmFsbGJhY2tEYXRlIjoiMjA5OS0xMi0zMSIsInBhaWRVcFRvIjoiMjA5OS0xMi0zMSJ9LHsiY29kZSI6IlJDIiwiZmFsbGJhY2tEYXRlIjoiMjA5OS0xMi0zMSIsInBhaWRVcFRvIjoiMjA5OS0xMi0zMSJ9LHsiY29kZSI6IlJEIiwiZmFsbGJhY2tEYXRlIjoiMjA5OS0xMi0zMSIsInBhaWRVcFRvIjoiMjA5OS0xMi0zMSJ9LHsiY29kZSI6IlBDIiwiZmFsbGJhY2tEYXRlIjoiMjA5OS0xMi0zMSIsInBhaWRVcFRvIjoiMjA5OS0xMi0zMSJ9LHsiY29kZSI6IlJNIiwiZmFsbGJhY2tEYXRlIjoiMjA5OS0xMi0zMSIsInBhaWRVcFRvIjoiMjA5OS0xMi0zMSJ9LHsiY29kZSI6IldTIiwiZmFsbGJhY2tEYXRlIjoiMjA5OS0xMi0zMSIsInBhaWRVcFRvIjoiMjA5OS0xMi0zMSJ9LHsiY29kZSI6IkRCIiwiZmFsbGJhY2tEYXRlIjoiMjA5OS0xMi0zMSIsInBhaWRVcFRvIjoiMjA5OS0xMi0zMSJ9LHsiY29kZSI6IkRDIiwiZmFsbGJhY2tEYXRlIjoiMjA5OS0xMi0zMSIsInBhaWRVcFRvIjoiMjA5OS0xMi0zMSJ9LHsiY29kZSI6IlJTVSIsImZhbGxiYWNrRGF0ZSI6IjIwOTktMTItMzEiLCJwYWlkVXBUbyI6IjIwOTktMTItMzEifV0sImhhc2giOiIxMjc5Njg3Ny8wIiwiZ3JhY2VQZXJpb2REYXlzIjo3LCJhdXRvUHJvbG9uZ2F0ZWQiOmZhbHNlLCJpc0F1dG9Qcm9sb25nYXRlZCI6ZmFsc2V9-HNPogO0kWkHCVMnsjmBXUqQt87UPHqdkYqZGveSJtu8hb2V2Yq7gHsHenp4UuEd3jwEwC+YrUIf7U5yDA/56F5Sdn0RLUHZX5DHeQbJPbmYCBsDRT7m8rnmMFOSZn3vwNatvv1cooZbcGOk3Wwxx6bF7XcgaIrmXRcmZMZgv2PZehr0WS1HxNKe3X4nbGP3MwiSbg4ypmxNDrljmgv+Si9QDDwNLDffqeO0Lce0FqEJuMWmvBS42S0aeIYF8IS5bp4+LFKLJ8T7tF40OxKYDurBb9+9c43GZBscM/eLB8Jos66jNGFwgebFUlvhzJKVHZtuc/N8zGeEnTq6K0T/B8w==-MIIDTjCCAjagAwIBAgIBDTANBgkqhkiG9w0BAQsFADAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBMCAXDTE4MTEwMTEyMjk0NloYDzIwOTkwODA5MDIyNjA3WjAfMR0wGwYDVQQDDBRwcm9kMnktZnJvbS0yMDIwMTAxOTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAMK3eyr0+Oys/TwcQO+qYaXWGBmXcEP4fR0bHHzZd/4WNGltXhecM80OWthA38BQRYAJBCKz/dSkO2Kj1H2y+7KB5cIaOiJEyTESfTSgzQdot6laRBU8oxy9mmagI46M8zEEmplPybY4YJj4HOwZiBsMQEMxoTgMDLpuHX6uASoVhSj6koB55lOj4wEgsQBeAMWTAXmTl88ixE179J8aBUkBGpL8w/tZzl9BJXZNF15gPfkS58rw8cdPzXLS0Yym37A2/KKFhfHzJc5KhbaxqYzmkAfTMqPsIqCQ1lQUAqfiPn2gN2I1Z3/cQuEW27M55fXVr2DduQe5DWzYJs85L50CAwEAAaOBmTCBljAJBgNVHRMEAjAAMB0GA1UdDgQWBBQk2hEilvWFQcCTR+gxI0z0wIQC/zBIBgNVHSMEQTA/gBSjnrZIZ0ISNkG9beC5tKBSi5fxs6EcpBowGDEWMBQGA1UEAwwNSmV0UHJvZmlsZSBDQYIJANJssYOyg3nhMBMGA1UdJQQMMAoGCCsGAQUFBwMBMAsGA1UdDwQEAwIFoDANBgkqhkiG9w0BAQsFAAOCAQEAsCQBjO5wttco/Z5cj/o4GBrku8UtBBBVFq4xsBanshTHm4deVxcTvta4aScV0TPKcaLqGqWx8A9v8XXO8dBbCuyXvWZteZ/C2Covg1xXiM99lz7VxqpjVmLdKanZn5u0gQSiYJdcfF+TdbmEIeSOnN/kLXNq2hXdJQK2zk2J25UZqu5EibRtTbdOzw6ZcfwJ8uOntXfsmAhnNICP3Wf/4wR/mwB0Ka4S+JA3IbF5MUmUZ/fjUaFarnin70us+Vxf/sZUi7u67wilvwVV0NAqDpthHUV0NRc4q+yOr2Dt/uCHdy4XRXLJfAv/z9/xBwNZZALNz3EtQL6IeIWWJByl3g==</span><br></pre></td></tr></table></figure><p><a href="https://img-blog.csdnimg.cn/7da38dc5cd5b413e815bc9213b2b94e8.png">https://img-blog.csdnimg.cn/7da38dc5cd5b413e815bc9213b2b94e8.png</a><br><a href="https://img-blog.csdnimg.cn/373e6474f69e438f92553476f1c2ac02.png">https://img-blog.csdnimg.cn/373e6474f69e438f92553476f1c2ac02.png</a></p><ul><li>激活成功实例：<br><a href="https://img-blog.csdnimg.cn/d18f50b6be804b608a918d951e7ce483.png">https://img-blog.csdnimg.cn/d18f50b6be804b608a918d951e7ce483.png</a><br>到这里我们就已经成功在Ubuntu系统上激活pycharm专业版了， 欢迎大家在评论区讨论！！！</li></ul><p>文章所需要的pycharm版本和资料如下 ，我已经放在了网盘，有需要也可以加我微信发你！！！！</p><p> 链接：<a href="https://pan.baidu.com/s/1uZteOE7OcXfwP4mHC2hlrg">https://pan.baidu.com/s/1uZteOE7OcXfwP4mHC2hlrg</a></p><p>提取码：x7x7 </p><p>微信 如下：<br>————————————————</p><blockquote><p>本文为CSDN博主「@xuxin_2000」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/qq_52466870/article/details/128134511">https://blog.csdn.net/qq_52466870/article/details/128134511</a><br><a href="https://img-blog.csdnimg.cn/4115133912824e0a8c9bdb62bafe9fc3.png">https://img-blog.csdnimg.cn/4115133912824e0a8c9bdb62bafe9fc3.png</a><br>注：如果文件pycharm64.vmoptions没有配置错误和文件fineagent.jar添加正确，pycharm是正常运行的 </p></blockquote>]]></content>
    
    
    <summary type="html">ubuntu18 pycharm2021.3</summary>
    
    
    
    <category term="SF" scheme="https://aixiaocainiao.github.io/categories/SF/"/>
    
    
    <category term="ubuntu" scheme="https://aixiaocainiao.github.io/tags/ubuntu/"/>
    
    <category term="pycharm2021.3" scheme="https://aixiaocainiao.github.io/tags/pycharm2021-3/"/>
    
  </entry>
  
  <entry>
    <title>ubuntu按装搜狗输入法</title>
    <link href="https://aixiaocainiao.github.io/posts/cb2decdd.html"/>
    <id>https://aixiaocainiao.github.io/posts/cb2decdd.html</id>
    <published>2023-04-06T12:51:35.828Z</published>
    <updated>2023-04-09T08:15:01.707Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ubuntu安装搜狗输入法"><a href="#ubuntu安装搜狗输入法" class="headerlink" title="ubuntu安装搜狗输入法"></a>ubuntu安装搜狗输入法</h1><h2 id="一、安装fcitx"><a href="#一、安装fcitx" class="headerlink" title="一、安装fcitx"></a>一、安装fcitx</h2><ul><li><p>sudo apt-get install fcitx-bin </p></li><li><p>第一步，安装sogoupinyin_4.0.1.2800_x86_64.deb包；<br>通过命令行重新安装搜狗输入法，安装包官网下载链接<br>sudo dpkg –i sogoupinyin_4.0.1.2800_x86_64.deb<br>安装中文支持包</p></li><li><p>打开setting－&gt; Region &amp; Lannguage -&gt; InputSource下的Manage installation Language</p></li><li><p>点击Installation/ Remove Language<br>勾选中文（简体），并点击应用</p></li><li><p>keyboard input method system选择：fcitx<br>————————————————<br>点击应用到全局，然后重启</p></li></ul><h2 id="二、具体操作"><a href="#二、具体操作" class="headerlink" title="二、具体操作"></a>二、具体操作</h2><h3 id="2-1、第一步"><a href="#2-1、第一步" class="headerlink" title="2.1、第一步"></a>2.1、第一步</h3><ul><li>1、通过命令行更新系统（如果因网络连接问题无法更新，可以选择换源）</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get upgrade</span><br></pre></td></tr></table></figure><ul><li>2、通过命令行安装aptitude</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install aptitude   </span><br></pre></td></tr></table></figure><ul><li>3、通过命令行利用aptitude 安装fcitx、qt</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo aptitude install fcitx-bin fcitx-table fcitx-config-gtk fcitx-config-gtk2 fcitx-frontend-all</span><br><span class="line">sudo aptitude install qt5-default qtcreator qml-module-qtquick-controls2</span><br></pre></td></tr></table></figure><ul><li><p>4、如果右上角没有出现fcitx，在终端中输入im-config进行配置</p></li><li><p>5、通过命令行重新安装搜狗输入法</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo dpkg –i sogoupinyin_4.0.1.2800_x86_64.deb</span><br></pre></td></tr></table></figure><h3 id="2-2、第二步"><a href="#2-2、第二步" class="headerlink" title="2.2、第二步"></a>2.2、第二步</h3><ul><li>1、安装依赖。因为我之前安装好deb包后直接以为安装完成了，忽略了第二步要安装依赖。（这步骤很关键）<br>安装官网给出的两条命令，在终端执行</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install libqt5qml5 libqt5quick5 libqt5quickwidgets5 qml-module-qtquick2</span><br><span class="line"></span><br><span class="line">sudo apt install libgsettings-qt1</span><br></pre></td></tr></table></figure><ul><li>2、最后卸载ibus </li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get purge ibus</span><br></pre></td></tr></table></figure><ul><li>3、重启完成即可使用（如果没有，需在右上角fcitx配置中添加搜狗输入法）<br>————————————————</li></ul>]]></content>
    
    
    <summary type="html">ubuntu按装搜狗输入法</summary>
    
    
    
    <category term="SF" scheme="https://aixiaocainiao.github.io/categories/SF/"/>
    
    
    <category term="ubuntu" scheme="https://aixiaocainiao.github.io/tags/ubuntu/"/>
    
    <category term="搜狗输入法" scheme="https://aixiaocainiao.github.io/tags/%E6%90%9C%E7%8B%97%E8%BE%93%E5%85%A5%E6%B3%95/"/>
    
  </entry>
  
</feed>
